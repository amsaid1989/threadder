{"version":3,"sources":["themes/threadder-dark-theme.js","components/StyledButton.js","components/StyledMenu.js","components/LoggedInMenu.js","components/Header.js","components/CustomIconButton.js","utils/detectMobileBrowsers.js","components/InputToolbar.js","components/TweetInput.js","controllers/tweetEntitiesHandler.js","utils/generalConstants.js","components/TweetToolbar.js","controllers/db.js","components/TweetImage.js","utils/numUtils.js","components/Tweet.js","controllers/gridPlacement.js","components/ThreadViewer.js","components/MessagesDialog.js","components/CustomAlert.js","utils/fullSentenceSplitter.js","utils/midSentenceSplitter.js","controllers/tweetSplitter.js","utils/objectIntegrityCheckers.js","controllers/APICalls.js","controllers/storageWrappers.js","App.js","controllers/textManip.js","serviceWorkerRegistration.js","index.js"],"names":["primaryPalette","main","light","dark","contrastText","contrastText2","backgroundPalette","paper","default","darkTheme","createMuiTheme","palette","primary","secondary","hover","inactive","inactiveText","background","spacing","shape","borderRadius","useStyles","makeStyles","theme","styledButton","color","backgroundColor","StyledButton","props","classes","joinClassNames","classNames","className","Button","menuList","border","StyledMenu","menuClasses","Menu","menuItem","LoggedInMenu","useState","anchorEl","setAnchorEl","closeMenu","Box","IconButton","size","onClick","event","currentTarget","Avatar","src","user","profileImage","alt","name","id","getContentAnchorEl","anchorReference","anchorOrigin","horizontal","vertical","transformOrigin","open","Boolean","onClose","autoFocus","MenuItem","screenName","window","logout","toolbar","height","padding","title","flexGrow","Header","logInBtn","variant","login","AppBar","position","Toolbar","Typography","loggedIn","toolbarButton","marginRight","CustomIconButton","children","isMobile","a","navigator","userAgent","vendor","opera","test","substr","root","marginTop","InputToolbar","pickerOpen","setPickerOpen","Hidden","smDown","ClickAwayListener","onClickAway","style","set","data","emoji","showPreview","perLine","onSelect","pickEmojiHandler","prevState","splitTweetHandler","clearTweetHandler","flexFlow","fullHeight","containerWithShadow","boxShadow","shadows","expandingFlexItem","flex","fixedSizeFlexItem","textareaContainer","display","paddingBottom","threadTextarea","fontFamily","fontSize","resize","width","outline","statsContainer","justifyContent","statsText","emojiPicker","TweetInput","React","forwardRef","ref","Grid","container","item","xs","Container","onChange","handleTweetInput","handleCursorPositionChange","placeholder","value","tweetText","length","thread","mdUp","fullWidth","viewThreadHandler","highlightEntity","tweet","matchObj","highlightColor","output","start","slice","index","end","highlightTweetEntities","matchesArray","matchesArr","reversedArray","Array","from","sort","b","dotenv","config","TWEET_LENGTH","UNTITLED_NAME","gap","alignItems","imageButton","margin","left","resetFont","tweetLength","textAlign","TweetToolbar","supportedImageTypes","exceedsAllowedLimits","files","some","file","type","allFilesAreSupported","extensions","map","every","ext","fileSizeAllowed","disabled","addDisabled","target","parentElement","querySelector","click","accept","join","multiple","hidden","filesArr","setAlertData","addImagesHandler","db","minHeight","maxHeight","deleteButton","right","top","iconBackground","minWidth","maxWidth","buttonIcon","zIndex","scale","image","objectFit","TweetImage","gridColumn","gridRow","deleteImageHandler","imageIndex","imageSource","altText","onLoad","URL","revokeObjectURL","isEven","num","dbOpen","dbConnected","openDB","Promise","resolve","reject","indexedDB","openRequest","addEventListener","error","message","objectStore","createObjectStore","keyPath","indices","params","unique","forEach","createIndex","createStores","result","addOrUpdateImages","tweetIndex","imgArr","storeOperation","IDBDatabase","promises","arrayBuffer","buf","ArrayBuffer","buffer","all","fileObjectsToBuffers","then","buffers","transaction","store","tweetImages","request","errorHandler","catch","saveImagesToDB","modifyImagesInDB","getOrDeleteImagesFromDB","deleteImagesFromDB","indexExistsInDB","results","buffersToFileObjects","buffersArr","bufObj","File","marginBottom","verticalGrid","centerVerticalGridItems","threadLineContainer","threadLine","tweetContainer","marginLeft","defaultTextColor","userName","fontWeight","userHandle","whiteSpace","overflowWrap","imageGallery","gridTemplateColumns","gridTemplateRows","gridGap","hiddenOverflow","overflow","Tweet","images","setImages","reloadImages","setReloadImages","disableAddImages","setDisableAddImages","removeImage","updatedImages","imageElements","arr","itemIndex","totalItems","colStart","colEnd","getRow","rowStart","rowEnd","key","createObjectURL","useEffect","checkInterval","checkTimeout","setInterval","clearInterval","reloadImagesFromDB","setTimeout","shouldDisable","err","dangerouslySetInnerHTML","__html","text","xsUp","imagesToAdd","autoOverflow","tweetsContainer","buttonRowContainer","ThreadViewer","tweets","sanitizedTweet","DOMPurify","sanitize","highlightedTweet","matches","matchAll","matchEntitiesInTweet","editThreadHandler","publishHandler","dialogText","MessagesDialog","Dialog","DialogContent","DialogContentText","msg","CustomAlert","Collapse","in","visible","Alert","severity","trimTopAndTailSpaces","replace","splitAtNewlines","split","filter","idx","splitAtFullstops","splitIndices","match","push","splitIndex","combineSentencesIntoTweets","sentenceArray","combiningCharacter","outArray","i","lastSentenceIndex","lastSentence","curSentence","startsWith","recombineShortTweets","threadArray","combinedTweets","curTweet","lastTweetIndex","lastTweet","removeEllipsisFromTweet","breakVeryLongWord","word","tweetCount","Math","ceil","splitTweets","sliceStart","sliceEnd","outWord","splitTweet","userDefinedSplits","trim","allTweetsFitLength","fullSentencesSplit","newLineSplit","flat","breakTextAtFullSentences","sentence","splitWords","currentTweet","currentWord","breakLongSentence","checkUserObject","userObj","obj","Object","entries","keysArr","objKeys","keys","includes","containsAllKeys","sendAPIRequest","url","method","undefined","axios","withCredentials","baseURL","publishAllTweetImages","FormData","append","publishMedia","response","media_id","publishThread","getStorage","localStorage","sessionStorage","setStorageItem","storeName","itemName","itemValue","storage","setItem","JSON","stringify","getStorageItem","parse","getItem","gridContainer","appHeader","appView","breakpoints","up","mainArea","App","untitledUser","setDBOpen","alertVisibility","setAlertVisibility","alertSeverity","setAlertSeverity","alertMessage","setAlertMessage","dialogOpen","setDialogOpen","dialogMessage","setDialogMessage","setLoggedIn","setUser","setTweetText","cursorPosition","setCursorPosition","setThread","editing","setEditing","tweetInputRef","createRef","insertTextAtCursor","cursorObj","textToAdd","insertIntoText","updatedText","newPos","toggleEditing","displayAlert","useCallback","level","loginHandler","showDialog","document","location","href","redirect","console","log","finally","closeDialog","publishTweets","toPublish","media","getAll","out","allImages","Number","mediaIDs","search","queryString","current","selectionStart","selectionEnd","focus","clearRequest","clear","clearImagesFromDB","closeAlertTimeout","clearTimeout","ThemeProvider","CssBaseline","md","native","isLocalhost","hostname","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","process","origin","fetch","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.e5968484.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core/styles\";\n\n/*\n * Threadder's main theme\n */\n\nconst primaryPalette = {\n    main: \"#283845\",\n    light: \"#395164\",\n    dark: \"#22303c\",\n    contrastText: \"#ffffff\",\n    contrastText2: \"#e5e5e5\",\n};\n\nconst secondaryPalette = {\n    main: \"#ffc107\",\n    light: \"#ffd147\",\n    dark: \"#c97d02\",\n    hover: \"#ffa042\",\n    inactive: \"#432a01\",\n    contrastText: \"#14213d\",\n    inactiveText: \"#111111\",\n};\n\nconst backgroundPalette = {\n    paper: primaryPalette.light,\n    default: \"#202c39\",\n};\n\nconst darkTheme = createMuiTheme({\n    palette: {\n        primary: primaryPalette,\n        secondary: secondaryPalette,\n        background: backgroundPalette,\n    },\n    spacing: 4,\n    shape: {\n        borderRadius: 2,\n    },\n});\n\nexport default darkTheme;\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport Button from \"@material-ui/core/Button\";\n\n/**\n * A component that applies custom styling to Material UI's\n * default Button component. It passes all the props added\n * to it to the enclosed Button component.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    styledButton: {\n        \"&:disabled\": {\n            color: theme.palette.secondary.inactiveText,\n            backgroundColor: theme.palette.secondary.inactive,\n        },\n        \"&:hover\": {\n            backgroundColor: theme.palette.secondary.hover,\n        },\n    },\n}));\n\nexport default function StyledButton(props) {\n    const classes = useStyles();\n\n    /**\n     * Since the custom styling is applied by passing a class\n     * to the className prop, which only accepts one class,\n     * we use the classNames NPM package to merge the custom\n     * styling class with any classes passed by someone using\n     * the component who might want to further customise its\n     * display.\n     */\n    const joinClassNames = classNames(props.className, classes.styledButton);\n\n    return <Button {...props} className={joinClassNames} />;\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport Menu from \"@material-ui/core/Menu\";\n\n/**\n * Component that applies custom styling to Material UI's\n * Menu component. It passes all of its props to the\n * enclosed Menu component.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    menuList: {\n        border: `solid 1px ${theme.palette.primary.dark}`,\n    },\n}));\n\nexport default function StyledMenu(props) {\n    const classes = useStyles();\n\n    const menuClasses = {\n        paper: classes.menuList,\n    };\n\n    return <Menu classes={menuClasses} {...props} />;\n}\n","import { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport StyledMenu from \"./StyledMenu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\n/*\n * The styles and implementation of the menu component that\n * is rendered when the user is logged in to their Twitter\n * account.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    menuList: {\n        border: `solid 1px ${theme.palette.primary.dark}`,\n    },\n    menuItem: {\n        color: theme.palette.primary.contrastText,\n        \"&:hover\": {\n            color: theme.palette.secondary.contrastText,\n            backgroundColor: theme.palette.secondary.main,\n        },\n    },\n}));\n\nexport default function LoggedInMenu(props) {\n    const classes = useStyles();\n\n    /* COMPONENT STATE */\n    // Generate the anchor element which will be used to trigger the menu\n    const [anchorEl, setAnchorEl] = useState(null);\n    /* END COMPONENT STATE */\n\n    /* EVENT HANDLERS */\n    const handleAvatarClick = (event) => {\n        /**\n         * This is used to set the Avatar as an anchor element for the\n         * menu. In effect, it expands the menu whenever the Avatar is\n         * clicked by the user.\n         */\n\n        // Use currentTarget instead of target to ensure that it grabs\n        // the parent div rather than any of the child elements\n        setAnchorEl(event.currentTarget);\n    };\n\n    const closeMenu = () => {\n        setAnchorEl(null);\n    };\n\n    const redirectToTwitter = () => {\n        /**\n         * Handles the click event for the Go to Twitter menu\n         * item, redirecting the logged-in user to their Twitter\n         * profile\n         */\n\n        closeMenu();\n\n        const screenName = props.user.screenName;\n\n        window.open(`https://twitter.com/${screenName}`, \"_blank\");\n\n        // document.location.href = `https://twitter.com/${screenName}`;\n    };\n\n    const logOutHandler = () => {\n        /**\n         * Handles the click event for the Logout menu item\n         */\n\n        closeMenu();\n\n        props.logout();\n    };\n    /* END EVENT HANDLERS */\n\n    return (\n        <Box>\n            <IconButton size=\"small\" onClick={handleAvatarClick}>\n                <Avatar\n                    src={props.user.profileImage}\n                    alt={`${props.user.name} profile picture`}\n                />\n            </IconButton>\n\n            <StyledMenu\n                id=\"account-settings-menu\"\n                getContentAnchorEl={null}\n                anchorEl={anchorEl}\n                anchorReference=\"anchorEl\"\n                anchorOrigin={{ horizontal: \"center\", vertical: \"bottom\" }}\n                transformOrigin={{ horizontal: \"center\", vertical: \"top\" }}\n                open={Boolean(anchorEl)}\n                onClose={closeMenu}\n                autoFocus={false}\n            >\n                <MenuItem\n                    className={classes.menuItem}\n                    onClick={redirectToTwitter}\n                >\n                    Go to Twitter\n                </MenuItem>\n\n                <MenuItem className={classes.menuItem} onClick={logOutHandler}>\n                    Log out\n                </MenuItem>\n            </StyledMenu>\n        </Box>\n    );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport StyledButton from \"./StyledButton\";\nimport LoggedInMenu from \"./LoggedInMenu\";\n\n/*\n * The styles and implementation of the app Header component.\n * It shows the app name, logo and a sign in button to allow\n * the user to log into their Twitter account.\n * When logged in, it replaces the sign in button with the\n * Twitter profile photo of the user and a menu that allows\n * them to navigate to their Twitter account directly from\n * the app or to log out.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    toolbar: {\n        height: \"1em\",\n        padding: \"1em 1.5em\",\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nexport default function Header(props) {\n    const classes = useStyles();\n\n    // The sign in StyledButton component\n    const logInBtn = (\n        <StyledButton\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={props.login}\n        >\n            Log in\n        </StyledButton>\n    );\n\n    return (\n        <AppBar position=\"relative\">\n            <Toolbar className={classes.toolbar}>\n                <Typography variant=\"h5\" className={classes.title}>\n                    Threadder\n                </Typography>\n                {props.loggedIn ? (\n                    <LoggedInMenu user={props.user} logout={props.logout} />\n                ) : (\n                    logInBtn\n                )}\n            </Toolbar>\n        </AppBar>\n    );\n}\n","import classNames from \"classnames\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\nconst useStyles = makeStyles((theme) => ({\n    toolbarButton: {\n        marginRight: \"0.45em\",\n        color: theme.palette.secondary.dark,\n        \"&:hover\": {\n            color: theme.palette.secondary.main,\n        },\n    },\n}));\n\nexport default function CustomIconButton(props) {\n    /**\n     * Component that applies custom styling to Material UI's\n     * IconButton, so that it can be consistently reused in\n     * different parts of the app.\n     */\n\n    const classes = useStyles();\n\n    const joinClassNames = classNames(props.className, classes.toolbarButton);\n\n    return (\n        <IconButton {...props} className={joinClassNames}>\n            {props.children}\n        </IconButton>\n    );\n}\n","export function isMobile() {\n    return (function (a) {\n        return (\n            /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n                a\n            ) ||\n            /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\n                a.substr(0, 4)\n            )\n        );\n    })(navigator.userAgent || navigator.vendor || window.opera);\n}\n","import { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CustomIconButton from \"./CustomIconButton\";\nimport EmojiEmotionsIcon from \"@material-ui/icons/EmojiEmotions\";\nimport BackspaceIcon from \"@material-ui/icons/Backspace\";\nimport ViewAgendaIcon from \"@material-ui/icons/ViewAgenda\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport data from \"emoji-mart/data/twitter.json\";\nimport { NimblePicker } from \"emoji-mart\";\nimport { isMobile } from \"../utils/detectMobileBrowsers\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport \"./emojiPicker.css\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: 0,\n        marginTop: \"0.5em\",\n    },\n}));\n\nexport default function InputToolbar(props) {\n    const classes = useStyles();\n\n    const [pickerOpen, setPickerOpen] = useState(false);\n\n    const handlePickerClick = () => {\n        /**\n         * Handles the user click on the button the toggles\n         * the emoji picker.\n         */\n\n        setPickerOpen((prevState) => !prevState);\n    };\n\n    const handleClickAway = () => {\n        setPickerOpen(false);\n    };\n\n    return (\n        <div className={classes.root}>\n            {/* EMOJI BUTTON */}\n            <Hidden smDown={isMobile()}>\n                <ClickAwayListener onClickAway={handleClickAway}>\n                    <span style={{ position: \"relative\" }}>\n                        {pickerOpen && (\n                            <NimblePicker\n                                set=\"twitter\"\n                                data={data}\n                                title=\"\"\n                                emoji=\"\"\n                                showPreview={false}\n                                perLine={8}\n                                onSelect={props.pickEmojiHandler}\n                            />\n                        )}\n                        <CustomIconButton\n                            size=\"small\"\n                            onClick={handlePickerClick}\n                            title=\"Emoji\"\n                        >\n                            <EmojiEmotionsIcon />\n                        </CustomIconButton>\n                    </span>\n                </ClickAwayListener>\n            </Hidden>\n            {/* FORCE SPLIT BUTTON */}\n            <CustomIconButton\n                size=\"small\"\n                onClick={props.splitTweetHandler}\n                title=\"Split\"\n            >\n                <ViewAgendaIcon />\n            </CustomIconButton>\n            {/* CLEAR INPUT BUTTON */}\n            <CustomIconButton\n                size=\"small\"\n                onClick={props.clearTweetHandler}\n                title=\"Clear\"\n            >\n                <BackspaceIcon />\n            </CustomIconButton>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport StyledButton from \"./StyledButton\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport InputToolbar from \"./InputToolbar\";\n\n/**\n * The styles and implementation of the tweet input component.\n * This component is where the user will input the text they\n * want to split into a thread of tweets.\n * It also shows some stats about the character count of the\n * text and how many tweets are generated from it.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexFlow: \"column nowrap\",\n    },\n    fullHeight: {\n        height: \"100%\",\n    },\n    containerWithShadow: {\n        boxShadow: theme.shadows[4],\n    },\n    expandingFlexItem: {\n        flex: 1,\n    },\n    fixedSizeFlexItem: {\n        flex: 0,\n    },\n    textareaContainer: {\n        display: \"flex\",\n        flexFlow: \"column nowrap\",\n        padding: \"1.5em\",\n        paddingBottom: \"0.55em\",\n        backgroundColor: theme.palette.primary.main,\n    },\n    threadTextarea: {\n        fontFamily: \"inherit\",\n        fontSize: \"inherit\",\n        resize: \"none\",\n        width: \"100%\",\n        padding: \"0.5em 0.75em\",\n        color: theme.palette.primary.contrastText,\n        backgroundColor: theme.palette.primary.main,\n        border: 0,\n        boxShadow: \"inset 0px 0px 5px 0px rgba(0, 0, 0, 0.4)\",\n        \"&:focus\": {\n            border: 0,\n            outline: 0,\n        },\n    },\n    statsContainer: {\n        padding: \"1em 1.5em\",\n        display: \"flex\",\n        flexFlow: \"row nowrap\",\n        justifyContent: \"space-between\",\n        backgroundColor: theme.palette.primary.dark,\n    },\n    statsText: {\n        color: theme.palette.primary.contrastText2,\n    },\n    emojiPicker: {\n        position: \"absolute\",\n    },\n}));\n\nconst TweetInput = React.forwardRef((props, ref) => {\n    const classes = useStyles();\n\n    return (\n        <Grid\n            container\n            spacing={2}\n            className={classNames(classes.root, classes.fullHeight)}\n        >\n            {/* GRID ITEM 01: Tweet Input Textarea and toolbar */}\n            <Grid\n                item\n                xs={12}\n                className={classNames(\n                    classes.expandingFlexItem,\n                    classes.fullHeight\n                )}\n            >\n                <Container\n                    className={classNames(\n                        classes.textareaContainer,\n                        classes.fullHeight,\n                        classes.containerWithShadow\n                    )}\n                >\n                    <textarea\n                        className={classNames(\n                            classes.threadTextarea,\n                            classes.fullHeight\n                        )}\n                        onChange={props.handleTweetInput}\n                        onSelect={props.handleCursorPositionChange}\n                        placeholder=\"Type your tweet here...\"\n                        value={props.tweetText}\n                        ref={ref}\n                    />\n\n                    <InputToolbar\n                        pickEmojiHandler={props.pickEmojiHandler}\n                        splitTweetHandler={props.splitTweetHandler}\n                        clearTweetHandler={props.clearTweetHandler}\n                    />\n                </Container>\n            </Grid>\n\n            {/* GRID ITEM 02: Status Bar */}\n            <Grid item xs={12} className={classes.fixedSizeFlexItem}>\n                <Container\n                    className={classNames(\n                        classes.statsContainer,\n                        classes.containerWithShadow\n                    )}\n                >\n                    <Typography\n                        variant=\"body2\"\n                        className={classes.statsText}\n                    >{`Characters: ${props.tweetText.length}`}</Typography>\n                    <Typography\n                        variant=\"body2\"\n                        className={classes.statsText}\n                    >{`Tweets: ${props.thread.length}`}</Typography>\n                </Container>\n            </Grid>\n\n            {/* GRID ITEM 03: View Thread Button\n            This button is hidden in the desktop view of the app */}\n            <Hidden mdUp>\n                <Grid item xs={12} className={classes.fixedSizeFlexItem}>\n                    <StyledButton\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        fullWidth\n                        onClick={props.viewThreadHandler}\n                    >\n                        View thread\n                    </StyledButton>\n                </Grid>\n            </Hidden>\n        </Grid>\n    );\n});\n\nexport default TweetInput;\n","import darkTheme from \"../themes/threadder-dark-theme\";\n\nexport function matchEntitiesInTweet(tweet) {\n    // This matches mentions and hashtags\n    // TODO: Add URL pattern as well\n    const pattern = /@\\w+|#\\w+[a-zA-Z]+\\w+/g;\n\n    let matches;\n\n    if (typeof tweet === \"string\") {\n        matches = tweet.matchAll(pattern) ?? [];\n    }\n\n    return matches;\n}\n\nfunction reverseSortMatchesArray(matchesArr) {\n    const arr = Array.from(matchesArr);\n\n    const compareFunc = (a, b) => {\n        return b.index - a.index;\n    };\n\n    return arr.sort(compareFunc);\n}\n\nfunction highlightEntity(tweet, matchObj) {\n    const highlightColor = darkTheme.palette.secondary.main;\n\n    let output = tweet;\n\n    const start = output.slice(0, matchObj.index);\n    const end = output.slice(matchObj.index + matchObj[0].length);\n\n    return (\n        start +\n        `<strong style=\"color: ${highlightColor};\">${matchObj[0]}</strong>` +\n        end\n    );\n}\n\nexport function highlightTweetEntities(tweet, matchesArray) {\n    let output = tweet;\n\n    const reversedArray = reverseSortMatchesArray(matchesArray);\n\n    for (const match of reversedArray) {\n        output = highlightEntity(output, match);\n    }\n\n    return output;\n}\n","import dotenv from \"dotenv\";\n\ndotenv.config();\n\nexport const TWEET_LENGTH = 280;\nexport const SERVER =\n    process.env.NODE_ENV === \"development\" ? \"http://localhost:8080\" : \"\";\nexport const UNTITLED_NAME = \"Untitled User\";\nexport const UNTITLED_SCREEN_NAME = \"untitled_user\";\nexport const UNTITLED_PROFILE_IMAGE = \"\";\nexport const MAX_IMAGE_SIZE = 5 * 1000 * 1000; // Size in bytes\nexport const MAX_GIF_SIZE = 15 * 1000 * 1000; // Size in bytes\nexport const THREADDER_DB_NAME = \"threadderDB\";\nexport const THREADDER_DB_VERSION = 1;\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport Grid from \"@material-ui/core/Grid\";\nimport CustomIconButton from \"./CustomIconButton\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport {\n    TWEET_LENGTH,\n    MAX_IMAGE_SIZE,\n    MAX_GIF_SIZE,\n} from \"../utils/generalConstants\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: \"100%\",\n        marginTop: \"0.4em\",\n        display: \"flex\",\n        flexFlow: \"row nowrap\",\n        gap: 0,\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n    },\n    imageButton: {\n        margin: 0,\n        padding: 0,\n        position: \"relative\",\n        left: \"-0.1875rem\", // Calculated by dividing 3px by 16px which is equivalent to 1rem\n    },\n    resetFont: {\n        /**\n         * A helper class to make sure that an element uses the parent's\n         * font family and font size\n         */\n        fontFamily: \"inherit\",\n        fontSize: \"inherit\",\n    },\n    tweetLength: {\n        margin: 0,\n        width: \"100%\",\n        textAlign: \"right\",\n        color: theme.palette.secondary.main,\n    },\n}));\n\nexport default function TweetToolbar(props) {\n    const classes = useStyles();\n\n    const supportedImageTypes = [\".png\", \".jpg\", \".jpeg\", \".gif\", \".webp\"];\n\n    const triggerFileSelect = (event) => {\n        /**\n         * Triggers a click event on the file selection input\n         * element which is hidden.\n         */\n\n        // We need to go 2 levels up to get the common parent\n        const parent = event.target.parentElement.parentElement;\n\n        const input = parent.querySelector(\"input[type='file']\");\n\n        input.click();\n    };\n\n    const filesSelectedHandler = (event) => {\n        /**\n         * Event handler for the file input. It runs everytime\n         * the user selects files from the dialog that opens\n         * when the add image button is clicked.\n         */\n\n        const files = event.target.files;\n\n        if (files.length === 0) {\n            return;\n        }\n\n        // Create an array from the files list to be able to use\n        // the array every() and map() methods\n        const filesArr = Array.from(files);\n\n        if (exceedsAllowedLimits(filesArr)) {\n            props.setAlertData(\n                \"error\",\n                \"A maximum of 1 GIF or 4 images can be added\"\n            );\n\n            return;\n        }\n\n        if (!allFilesAreSupported(filesArr)) {\n            props.setAlertData(\n                \"error\",\n                `Only the following file types are supported: ${supportedImageTypes.join(\n                    \", \"\n                )}`\n            );\n\n            return;\n        }\n\n        if (!filesArr.every((file) => fileSizeAllowed(file))) {\n            props.setAlertData(\n                \"error\",\n                \"You can only upload images that are smaller than 5 MB or GIFs smaller than 15 MB\"\n            );\n\n            return;\n        }\n\n        // If all the files pass the checks, send them back\n        // to the parent Tweet component to be saved in its\n        // state\n        props.addImagesHandler(filesArr);\n\n        // We need to clear the value, because if a Chrome user\n        // attempts to upload the same image twice, the 'change'\n        // event will not fire, because the value of the input\n        // element won't actually change\n        event.target.value = \"\";\n    };\n\n    const exceedsAllowedLimits = (files) => {\n        /**\n         * Tests all the files in the array to test if it exceeds\n         * the maximum number of images allowed by Twitter (currently,\n         * 1 GIF or 4 images).\n         *\n         * Returns true if the limits are exceeded, false otherwise.\n         */\n\n        return (\n            files.length > 4 ||\n            (files.some((file) => file.type === \"image/gif\") &&\n                files.length > 1)\n        );\n    };\n\n    const allFilesAreSupported = (files) => {\n        /**\n         * Tests all files in an array to make sure that they all\n         * are supported image types.\n         */\n\n        // Clean the file extensions from the dot at the beginning\n        // and prefix the extension with the string 'image/' because\n        // that is how the image type appears in the file URL as\n        // formatted by the FileReader\n        const extensions = supportedImageTypes.map(\n            (type) => `image/${type.slice(1)}`\n        );\n\n        return files.every((file) => {\n            return extensions.some((ext) => file.type === ext);\n        });\n    };\n\n    const fileSizeAllowed = (file) => {\n        /**\n         * Checks the size of the files selected by the user to\n         * make sure they meet the limits defined by the Twitter\n         * API.\n         */\n\n        return (\n            file.size < MAX_IMAGE_SIZE ||\n            (file.type === \"image/gif\" && file.size < MAX_GIF_SIZE)\n        );\n    };\n\n    return (\n        <Grid className={classes.root}>\n            <Grid item>\n                <CustomIconButton\n                    className={classes.imageButton}\n                    size=\"small\"\n                    title=\"Add image\"\n                    disabled={props.addDisabled}\n                    onClick={triggerFileSelect}\n                >\n                    <ImageIcon />\n                    <input\n                        type=\"file\"\n                        accept={supportedImageTypes.join(\",\")}\n                        multiple\n                        hidden\n                        onChange={filesSelectedHandler}\n                    />\n                </CustomIconButton>\n            </Grid>\n            <Grid item>\n                <p\n                    className={classNames(\n                        classes.resetFont,\n                        classes.tweetLength\n                    )}\n                >\n                    {`${props.length}/${TWEET_LENGTH}`}\n                </p>\n            </Grid>\n        </Grid>\n    );\n}\n","import {\n    THREADDER_DB_NAME,\n    THREADDER_DB_VERSION,\n} from \"../utils/generalConstants\";\n\n// REVIEW: Try to simplify the database code and improve it.\n\nlet db;\nlet dbOpen = false;\n\nexport function dbConnected() {\n    /**\n     * Returns a boolean to indicate whether\n     * the database was connected successfully\n     * or not.\n     */\n\n    return dbOpen;\n}\n\nexport function openDB() {\n    /**\n     * Initiates the process of opening the application database\n     * and returns a promise that resolves once the database is\n     * connected and rejects when any errors occur.\n     */\n\n    return new Promise((resolve, reject) => {\n        if (!window.indexedDB) {\n            reject(\n                \"Your browser doesn't support IndexedDB. Some features may not work properly.\"\n            );\n        }\n\n        const openRequest = window.indexedDB.open(\n            THREADDER_DB_NAME,\n            THREADDER_DB_VERSION\n        );\n\n        openRequest.addEventListener(\"error\", (event) => {\n            const error = event.target.error;\n\n            reject(`${error.name}: ${error.message}`);\n        });\n\n        openRequest.addEventListener(\"blocked\", () => {\n            reject(\n                \"Upgrading the database failed. Please close all other tabs with this site open.\"\n            );\n        });\n\n        openRequest.addEventListener(\"upgradeneeded\", (event) => {\n            // On initial creation of the database, create the\n            // stores required for the current version\n            createStores(event.target.result);\n        });\n\n        openRequest.addEventListener(\"success\", (event) => {\n            db = event.target.result;\n            dbOpen = true;\n\n            db.addEventListener(\"close\", () => {\n                // Event handler that resets the dbOpen to\n                // false when the database is closed\n                dbOpen = false;\n            });\n\n            resolve(\"Connected\");\n        });\n    });\n}\n\nexport function clearImagesFromDB() {\n    /**\n     * Clears all entries in the images store. If successful, it\n     * returns nothing. Otherwise, it returns an error message\n     * to indicate that the process failed.\n     */\n\n    if (db && db instanceof IDBDatabase) {\n        const transaction = db.transaction([\"images\"], \"readwrite\");\n\n        const store = transaction.objectStore(\"images\");\n\n        const clearRequest = store.clear();\n\n        transaction.addEventListener(\"error\", () => {\n            return \"Clear images transaction failed\";\n        });\n\n        clearRequest.addEventListener(\"error\", () => {\n            return \"Clear images request failed\";\n        });\n    }\n}\n\nfunction addOrUpdateImages(tweetIndex, imgArr, storeOperation) {\n    /**\n     * Utility function that adds a new entry to the database or\n     * updates an existing one with an array of file objects passed\n     * to it.\n     *\n     * It also takes a string that represents a store operation,\n     * either 'add' or 'put'. This string will be passed as a key\n     * to get the equivalent function from the objectStore prototype.\n     */\n\n    return new Promise((resolve, reject) => {\n        if (db && db instanceof IDBDatabase) {\n            // We first convert each file object to an array buffer\n            // and store the buffer in an object that also contains\n            // the file name and the file type.\n            // The reason we convert the file objects to array\n            // buffers is that, according to this article on Google\n            // developers website (https://developers.google.com/web/fundamentals/instant-and-offline/web-storage/indexeddb-best-practices#not_everything_can_be_stored_in_indexeddb_on_all_platforms)\n            // storing File objects in an indexedDB doesn't work well\n            // on all platforms.\n            fileObjectsToBuffers(imgArr)\n                .then((buffers) => {\n                    const transaction = db.transaction([\"images\"], \"readwrite\");\n\n                    const store = transaction.objectStore(\"images\");\n\n                    const tweetImages = { tweetIndex, buffers };\n\n                    const request = store[storeOperation](tweetImages);\n\n                    // EVENT HANDLERS\n                    const errorHandler = () => {\n                        reject(\"Failed to save images to database\");\n                    };\n\n                    transaction.addEventListener(\"abort\", () => {\n                        reject(\"Adding images to the database was aborted\");\n                    });\n\n                    transaction.addEventListener(\"error\", errorHandler);\n\n                    request.addEventListener(\"success\", () => {\n                        resolve(\"All done!\");\n                    });\n\n                    request.addEventListener(\"error\", errorHandler);\n                })\n                .catch(() => {\n                    reject(\n                        \"Images are not formatted properly for the database\"\n                    );\n                });\n        } else {\n            reject(\"Can't save any images because the database isn't open\");\n        }\n    });\n}\n\nexport function saveImagesToDB(tweetIndex, imgArr) {\n    /**\n     * Saves the images passed in the imgArr to the appropriate\n     * store in the database.\n     */\n\n    return addOrUpdateImages(tweetIndex, imgArr, \"add\");\n}\n\nexport function modifyImagesInDB(tweetIndex, imgArr) {\n    /**\n     * Updates an existing entry in the database with the new\n     * imgArr.\n     */\n\n    return addOrUpdateImages(tweetIndex, imgArr, \"put\");\n}\n\nfunction getOrDeleteImagesFromDB(tweetIndex, storeOperation) {\n    /**\n     * Utility function that get or deletes an ew entry from the database.\n     *\n     * It takes a string that represents a store operation, either 'get'\n     * or 'delete'. This string will be passed as a key to get the\n     * equivalent function from the objectStore prototype.\n     */\n\n    return new Promise((resolve, reject) => {\n        if (db && db instanceof IDBDatabase) {\n            const transaction = db.transaction([\"images\"], \"readwrite\");\n\n            const store = transaction.objectStore(\"images\");\n\n            const request = store[storeOperation](tweetIndex);\n\n            const errorHandler = () => {\n                reject(\"Failed to save images to database\");\n            };\n\n            transaction.addEventListener(\"abort\", () => {\n                reject(\"Adding images to the database was aborted\");\n            });\n\n            transaction.addEventListener(\"error\", errorHandler);\n\n            request.addEventListener(\"success\", (event) => {\n                resolve(event.target.result);\n            });\n\n            request.addEventListener(\"error\", errorHandler);\n        } else {\n            reject(\"Can't save any images because the database isn't open\");\n        }\n    });\n}\n\nexport function deleteImagesFromDB(tweetIndex) {\n    /**\n     * Deletes all images associated with a specific tweet from\n     * the database.\n     */\n\n    return getOrDeleteImagesFromDB(tweetIndex, \"delete\");\n}\n\nexport function reloadImagesFromDB(tweetIndex) {\n    /**\n     * Used when the page reloads to restore any images that\n     * the user has added to any tweet before the reload.\n     *\n     * It returns a promise that doesn't reject. If there\n     * were images stored in the database associated with\n     * the current tweet, then it loads those images.\n     *\n     * Otherwise, it returns an empty array to indicate that\n     * there was no images associated with this tweet.\n     */\n\n    return new Promise((resolve) => {\n        getOrDeleteImagesFromDB(tweetIndex, \"get\")\n            .then((results) => {\n                if (results) {\n                    // Convert the buffers back to file objects\n                    // before loading them in the UI.\n                    resolve(buffersToFileObjects(results.buffers));\n                } else {\n                    resolve([]);\n                }\n            })\n            .catch(() => {\n                resolve([]);\n            });\n    });\n}\n\nexport function indexExistsInDB(tweetIndex) {\n    /**\n     * Checks a tweetIndex to see if it has an existing item\n     * in the database.\n     *\n     * Returns a promise that doesn't reject. It resolves to\n     * true if an item exists, and false otherwise.\n     */\n\n    return new Promise((resolve) => {\n        getOrDeleteImagesFromDB(tweetIndex, \"get\")\n            .then((results) => {\n                if (results) {\n                    resolve(true);\n                } else {\n                    resolve(false);\n                }\n            })\n            .catch(() => {\n                resolve(false);\n            });\n    });\n}\n\nexport function getAllImagesFromDB() {\n    return new Promise((resolve, reject) => {\n        if (db && db instanceof IDBDatabase) {\n            const transaction = db.transaction([\"images\"], \"readonly\");\n\n            const store = transaction.objectStore(\"images\");\n\n            const request = store.getAll();\n\n            const errorHandler = () => {\n                reject(\"Failed to retrieve images from the database\");\n            };\n\n            transaction.addEventListener(\"error\", errorHandler);\n\n            transaction.addEventListener(\"abort\", () => {\n                reject(\"Retrieving the images from the database was aborted\");\n            });\n\n            request.addEventListener(\"error\", errorHandler);\n\n            request.addEventListener(\"success\", (event) => {\n                let out = [];\n\n                for (let tweet of event.target.result) {\n                    const buffers = tweet.buffers;\n\n                    delete tweet.buffers;\n\n                    tweet.files = buffersToFileObjects(buffers);\n\n                    out.push(tweet);\n                }\n\n                resolve(out);\n            });\n        } else {\n            reject(\"Database is not connected\");\n        }\n    });\n}\n\nfunction createIndices(objectStore, indices) {\n    /**\n     * Utility function that takes an IndexedDB objectStore\n     * and an array of objects defining indices and creates\n     * those indices in the store.\n     */\n\n    indices.forEach((index) => {\n        objectStore.createIndex(index?.name, index?.keyPath, index?.params);\n    });\n}\n\nfunction createStores(db) {\n    /**\n     * Define the stores for the current version of the\n     * application database.\n     *\n     * This function is called when the 'upgradeneeded'\n     * event is fired when opening the database with\n     * a new version.\n     */\n\n    const imagesStore = db.createObjectStore(\"images\", {\n        keyPath: \"tweetIndex\",\n    });\n\n    createIndices(imagesStore, [\n        {\n            name: \"tweetIndex\",\n            keyPath: \"tweetIndex\",\n            params: { unique: true },\n        },\n    ]);\n}\n\nfunction fileObjectsToBuffers(filesArr) {\n    /**\n     * Takes an array of File objects and converts the\n     * files into ArrayBuffers. It then saves each buffer\n     * in an object that also contains the file name\n     * along with the file type.\n     *\n     * Returns a promise that resolves when all the File\n     * objects are converted successfully into ArrayBuffer\n     * objects.\n     */\n\n    const promises = filesArr.map(async (file) => {\n        const buf = await file.arrayBuffer();\n\n        if (buf instanceof ArrayBuffer) {\n            return {\n                name: file.name,\n                type: file.type,\n                buffer: buf,\n            };\n        }\n    });\n\n    return Promise.all(promises);\n}\n\nfunction buffersToFileObjects(buffersArr) {\n    /**\n     * Takes an array of objects that each contain an\n     * ArrayBuffer, a file name and a file type and\n     * constructs File objects out of this array.\n     *\n     * Returns the File objects in an array.\n     */\n\n    return buffersArr.map(\n        (bufObj) =>\n            new File([bufObj.buffer], bufObj.name, { type: bufObj.type })\n    );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport CustomIconButton from \"./CustomIconButton\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        position: \"relative\",\n        width: \"100%\",\n        minHeight: \"100%\",\n        maxHeight: \"100%\",\n    },\n    deleteButton: {\n        padding: 0,\n        margin: 0,\n        position: \"absolute\",\n        right: \"6px\",\n        top: \"6px\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n    iconBackground: {\n        position: \"absolute\",\n        minWidth: \"65%\",\n        maxWidth: \"65%\",\n        minHeight: \"65%\",\n        maxHeight: \"65%\",\n        backgroundColor: \"black\",\n        borderRadius: \"1em\",\n    },\n    buttonIcon: {\n        zIndex: 900,\n        scale: 1.2,\n    },\n    image: {\n        width: \"100%\",\n        height: \"100%\",\n        objectFit: \"cover\",\n    },\n}));\n\nexport default function TweetImage(props) {\n    const classes = useStyles();\n\n    const revokeImgURL = () => {\n        /**\n         * Once the image is loaded, revokes the URL object\n         * that was used in its 'src' attribute.\n         */\n\n        URL.revokeObjectURL(props.imageSource);\n    };\n\n    return (\n        <div\n            className={classes.root}\n            style={{ gridColumn: props.gridColumn, gridRow: props.gridRow }}\n        >\n            <CustomIconButton\n                size=\"small\"\n                className={classes.deleteButton}\n                onClick={() => props.deleteImageHandler(props.imageIndex)}\n            >\n                <span className={classes.iconBackground} />\n                <CancelIcon className={classes.buttonIcon} />\n            </CustomIconButton>\n\n            <img\n                src={props.imageSource}\n                alt={props.altText}\n                className={classes.image}\n                onLoad={revokeImgURL}\n            />\n        </div>\n    );\n}\n","export function isOdd(num) {\n    return num % 2 !== 0;\n}\n\nexport function isEven(num) {\n    return num % 2 === 0;\n}\n","import { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport TweetToolbar from \"./TweetToolbar\";\nimport TweetImage from \"./TweetImage\";\nimport { getColumn, getRow } from \"../controllers/gridPlacement\";\nimport {\n    dbConnected,\n    indexExistsInDB,\n    saveImagesToDB,\n    modifyImagesInDB,\n    deleteImagesFromDB,\n    reloadImagesFromDB,\n} from \"../controllers/db\";\n\n/**\n * The style and implementation of the Tweet component which is used\n * by the ThreadViewer to display the split tweets in a format that\n * is familiar to a Twitter user.\n * It shows a picture of the logged in user, the user's name and\n * their Twitter handle, as well as the text for each of the tweets.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        /*\n         * Styles that apply to the main container of the Tweet component.\n         * It adds a margin to the bottom of the component if there are\n         * multiple tweets displayed. If the tweet is the last one, or the\n         * only one, in the thread, then no margin is added.\n         */\n        marginBottom: \"1em\",\n        flexFlow: \"row nowrap\",\n        \"&:last-child\": {\n            marginBottom: 0,\n        },\n    },\n    expandingFlexItem: {\n        flex: 1,\n    },\n    fixedSizeFlexItem: {\n        flex: 0,\n    },\n    verticalGrid: {\n        display: \"flex\",\n        flexFlow: \"column nowrap\",\n    },\n    centerVerticalGridItems: {\n        alignItems: \"center\",\n    },\n    threadLineContainer: {\n        padding: 0,\n    },\n    threadLine: {\n        /**\n         * A class that controls the appearance of the line that\n         * visually connects each tweet to the following one in\n         * the thread.\n         * This lines serves no functional purpose. It is just\n         * a visual cue, that is already used by Twitter, to\n         * indicate that these tweets belong together in the same\n         * thread.\n         */\n        width: \"2px\",\n\n        // Add the marginBottom value from the root to the height\n        height: \"calc(100% + 1.5em)\",\n\n        backgroundColor: theme.palette.background.default,\n    },\n    tweetContainer: {\n        marginLeft: \"1em\",\n    },\n    resetFont: {\n        /**\n         * A helper class to make sure that an element uses the parent's\n         * font family and font size\n         */\n        fontFamily: \"inherit\",\n        fontSize: \"inherit\",\n    },\n    defaultTextColor: {\n        color: theme.palette.primary.contrastText,\n    },\n    userName: {\n        fontWeight: \"bold\",\n    },\n    userHandle: {\n        color: theme.palette.primary.contrastText2,\n        marginLeft: \"0.5em\",\n    },\n    tweetText: {\n        padding: 0,\n        margin: 0,\n        marginTop: \"0.25em\",\n\n        /**\n         * This ensures that any line breaks or extra white spaces added\n         * by the user in the TweetInput component is not discarded when\n         * displayed in the Tweet component.\n         */\n        whiteSpace: \"pre-wrap\",\n\n        overflowWrap: \"break-word\",\n    },\n    imageGallery: {\n        width: \"100%\",\n        height: \"16em\",\n        minHeight: \"16em\",\n        maxHeight: \"16em\",\n        marginTop: \"0.4em\",\n        borderRadius: \"0.5em\",\n        display: \"grid\",\n        gridTemplateColumns: \"1fr 1fr\",\n        gridTemplateRows: \"1fr 1fr\",\n        gridGap: \"0.25em\",\n    },\n    hiddenOverflow: {\n        overflow: \"hidden\",\n    },\n}));\n\nexport default function Tweet(props) {\n    const classes = useStyles();\n\n    // Destruct the props objects to get some of the\n    // items that will be used as dependencies for\n    // some of the hooks.\n    const { tweetIndex, setAlertData } = props;\n\n    const [images, setImages] = useState([]);\n    const [reloadImages, setReloadImages] = useState(true);\n    const [disableAddImages, setDisableAddImages] = useState(false);\n\n    const addImages = (imagesToAdd) => {\n        /**\n         * Updates the component state to add new\n         * images to the tweet.\n         */\n\n        const updatedImages = [...images, ...imagesToAdd];\n\n        setImages(updatedImages);\n    };\n\n    const removeImage = (index) => {\n        /**\n         * Updates the component state to delete\n         * an image from the tweet.\n         */\n\n        const updatedImages = [\n            ...images.slice(0, index),\n            ...images.slice(index + 1),\n        ];\n\n        setImages(updatedImages);\n    };\n\n    const imageElements = images.map((image, index, arr) => {\n        const [colStart, colEnd] = getColumn(index, arr.length);\n        const [rowStart, rowEnd] = getRow(index, arr.length);\n\n        const key = image + index + colStart + colEnd + rowStart + rowEnd;\n\n        const src = URL.createObjectURL(image);\n\n        return (\n            <TweetImage\n                key={key}\n                imageSource={src}\n                altText=\"\"\n                // Specify the column and row placement of each image\n                // in the grid, so that images fill the entire grid\n                // even if not all of the maximum of 4 images are added\n                gridColumn={`${colStart} / ${colEnd}`}\n                gridRow={`${rowStart} / ${rowEnd}`}\n                imageIndex={index}\n                deleteImageHandler={removeImage}\n            />\n        );\n    });\n\n    useEffect(() => {\n        // When the app reloads, check the database for any\n        // images that were added to the tweets before\n        // reloading, and add them again.\n        // It runs in an interval until the connection to\n        // the database is successful and then it reloads\n        // the images from the database.\n\n        let checkInterval;\n        let checkTimeout;\n\n        const reload = () => {\n            if (dbConnected()) {\n                clearInterval(checkInterval);\n\n                reloadImagesFromDB(tweetIndex).then((results) => {\n                    setImages(results);\n                });\n\n                setReloadImages(false);\n            }\n        };\n\n        if (reloadImages) {\n            checkInterval = setInterval(reload, 20);\n\n            // Setup a 10 second timeout. If the database\n            // is still not connected after that, then\n            // there is probably some problem with it and\n            // it won't connect. This way, we won't keep\n            // checking for it and wasting resources\n            // unnecessarily.\n            if (!checkTimeout) {\n                checkTimeout = setTimeout(() => {\n                    clearInterval(checkInterval);\n                }, 10000);\n            }\n        }\n    }, [reloadImages, tweetIndex]);\n\n    useEffect(() => {\n        // Disable the add images button once the limits defined by\n        // Twitter are reached\n        const shouldDisable =\n            images.length === 4 ||\n            (images.length === 1 && images[0].type === \"image/gif\");\n\n        setDisableAddImages(shouldDisable);\n    }, [images]);\n\n    useEffect(() => {\n        // Calls an asynchronous function each time the images\n        // state is updated to save the state in the database.\n        (async () => {\n            if (dbConnected()) {\n                // Checks if there is an entry for the tweet\n                // already in the database.\n                const checkIndex = await indexExistsInDB(tweetIndex);\n\n                if (checkIndex) {\n                    if (images.length > 0) {\n                        modifyImagesInDB(tweetIndex, images).catch((err) => {\n                            setAlertData(\"error\", err);\n                        });\n                    } else {\n                        deleteImagesFromDB(tweetIndex).catch((err) => {\n                            setAlertData(\"error\", err);\n                        });\n                    }\n                } else {\n                    if (images.length > 0) {\n                        saveImagesToDB(tweetIndex, images).catch((err) => {\n                            setAlertData(\"error\", err);\n                        });\n                    }\n                }\n            }\n        })();\n    }, [tweetIndex, setAlertData, images]);\n\n    return (\n        <Grid container className={classes.root}>\n            <Grid\n                container\n                className={classNames(\n                    classes.fixedSizeFlexItem,\n                    classes.verticalGrid,\n                    classes.centerVerticalGridItems\n                )}\n            >\n                <Grid item>\n                    <Avatar\n                        src={props.user.profileImage}\n                        alt={`${props.user.name} profile picture`}\n                    />\n                </Grid>\n\n                {/* Render a line that connects all tweets similar to\n                 * what happens on Twitter when you write a thread.\n                 * This only render if the tweet is not the last one\n                 * which is determined based on the boolean prop\n                 * 'threadLine'.\n                 */}\n                {props.threadLine && (\n                    <Grid\n                        item\n                        className={classNames(\n                            classes.expandingFlexItem,\n                            classes.threadLineContainer\n                        )}\n                    >\n                        <div className={classes.threadLine} />\n                    </Grid>\n                )}\n            </Grid>\n\n            {/* Vertical grid that contains the user information\n             * as well as the text of the tweet.\n             */}\n            <Grid\n                container\n                className={classNames(\n                    classes.expandingFlexItem,\n                    classes.verticalGrid,\n                    classes.tweetContainer,\n                    classes.hiddenOverflow\n                )}\n            >\n                {/* Grid item that includes the user information\n                 * split over two spans, one for the name and\n                 * another for the Twitter handle.\n                 */}\n                <Grid item>\n                    <span\n                        className={classNames(\n                            classes.resetFont,\n                            classes.defaultTextColor,\n                            classes.userName\n                        )}\n                    >\n                        {props.user.name}\n                    </span>\n                    <span\n                        className={classNames(\n                            classes.resetFont,\n                            classes.userHandle\n                        )}\n                    >\n                        {`@${props.user.screenName}`}\n                    </span>\n                </Grid>\n\n                {/* Grid item that includes the tweet text */}\n                <Grid item>\n                    <p\n                        className={classNames(\n                            classes.resetFont,\n                            classes.defaultTextColor,\n                            classes.tweetText\n                        )}\n                        dangerouslySetInnerHTML={{ __html: props.text }}\n                    />\n                </Grid>\n\n                <Hidden xsUp={images.length === 0}>\n                    <Grid\n                        item\n                        className={classNames(\n                            classes.imageGallery,\n                            classes.hiddenOverflow\n                        )}\n                    >\n                        {imageElements}\n                    </Grid>\n                </Hidden>\n\n                <Grid item>\n                    <TweetToolbar\n                        length={props.text.length}\n                        addDisabled={disableAddImages}\n                        setAlertData={props.setAlertData}\n                        addImagesHandler={addImages}\n                    />\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n}\n","import { isOdd, isEven } from \"../utils/numUtils\";\n\n/**\n * Exports a couple of functions that are used in the tweet\n * component to control the placement of any images added to\n * the tweet.\n *\n * The images are added to a gallery that is made of a CSS\n * grid and can take a maximum of 4 images, since this is\n * the maximum number of images that can be added to a tweet.\n */\n\nexport function getColumn(itemIndex, totalItems) {\n    /**\n     * Calculates the start and end grid columns for an item\n     * based on its index and the number of items in the grid.\n     *\n     * The values are mostly hard coded since a tweet can only\n     * have a maximum of 4 images so there isn't a lot of\n     * variation in how they could be placed.\n     */\n\n    let colStart, colEnd;\n\n    if (isEven(itemIndex)) {\n        colStart = 1;\n    } else {\n        colStart = 2;\n    }\n\n    if (\n        (isEven(itemIndex) && totalItems === itemIndex + 1) ||\n        isOdd(itemIndex)\n    ) {\n        colEnd = 3;\n    } else {\n        colEnd = 2;\n    }\n\n    return [colStart, colEnd];\n}\n\nexport function getRow(itemIndex, totalItems) {\n    /**\n     * Calculates the start and end grid rows for an item\n     * based on its index and the number of items in the grid.\n     *\n     * The values are mostly hard coded since a tweet can only\n     * have a maximum of 4 images so there isn't a lot of\n     * variation in how they could be placed.\n     */\n\n    let rowStart, rowEnd;\n\n    if (itemIndex < 2) {\n        rowStart = 1;\n    } else {\n        rowStart = 2;\n    }\n\n    if ((itemIndex < 2 && totalItems < 3) || itemIndex >= 2) {\n        rowEnd = 3;\n    } else {\n        rowEnd = 2;\n    }\n\n    return [rowStart, rowEnd];\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport StyledButton from \"./StyledButton\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport DOMPurify from \"dompurify\";\nimport {\n    matchEntitiesInTweet,\n    highlightTweetEntities,\n} from \"../controllers/tweetEntitiesHandler\";\nimport Tweet from \"./Tweet\";\n\n/**\n * The styles and implementation of the Thread Viewer component.\n * This component will show the tweets passed from the App\n * component using the Tweet component.\n * It also has the Publish Thread button which activates when\n * there are at least 1 tweet added.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexFlow: \"column nowrap\",\n    },\n    fullHeight: {\n        height: \"100%\",\n    },\n    containerWithShadow: {\n        boxShadow: theme.shadows[4],\n    },\n    expandingFlexItem: {\n        flex: 1,\n    },\n    fixedSizeFlexItem: {\n        flex: 0,\n    },\n    autoOverflow: {\n        overflow: \"auto\",\n    },\n    hiddenOverflow: {\n        overflow: \"hidden\",\n    },\n    tweetsContainer: {\n        padding: \"1.5em\",\n        backgroundColor: theme.palette.primary.main,\n    },\n    buttonRowContainer: {\n        display: \"flex\",\n        flexFlow: \"row nowrap\",\n        justifyContent: \"space-between\",\n        gap: \"1em\",\n        margin: 0,\n        padding: 0,\n    },\n}));\n\nexport default function ThreadViewer(props) {\n    const classes = useStyles();\n\n    const tweets = props.thread.map((tweet, index, arr) => {\n        const sanitizedTweet = DOMPurify.sanitize(tweet);\n\n        const matches = matchEntitiesInTweet(sanitizedTweet);\n\n        const highlightedTweet = highlightTweetEntities(\n            sanitizedTweet,\n            matches\n        );\n\n        return (\n            <Tweet\n                // The index is used as a key here on purpose because\n                // it is the only unique identifier available for the\n                // tweet, apart from its text.\n                // Since the data comes directly from user inputting\n                // the text, there is no way to get an ID for each\n                // tweet.\n                // The text of the tweet could have been used as a key\n                // but that would create issues if the user adds images\n                // to the tweet, because if the user decides to change\n                // the text, then the key would change and the images\n                // would be removed.\n                // Using the index as a key solves this issue, because\n                // the images are added to the tweet based on its\n                // location in the array. However, this creates another\n                // issue. If the user adds images to the tweet, then\n                // decides to add another tweet before it, then all the\n                // images would shift to the previous tweet.\n                // However, the user adding an entire tweet before is\n                // definitely less likely to happen than the user updating\n                // the text of the tweet, it makes more sense to rely on\n                // the array index, until a better solution to identify\n                // each tweet is figured out.\n                key={index}\n                tweetIndex={index}\n                user={props.user}\n                text={highlightedTweet}\n                threadLine={index + 1 < arr.length}\n                setAlertData={props.setAlertData}\n            />\n        );\n    });\n\n    return (\n        <Grid\n            container\n            spacing={2}\n            className={classNames(\n                classes.root,\n                classes.fullHeight,\n                classes.hiddenOverflow\n            )}\n        >\n            {/* GRID ITEM 01: Thread List */}\n            <Grid\n                item\n                xs={12}\n                className={classNames(\n                    classes.expandingFlexItem,\n                    classes.fullHeight,\n                    classes.hiddenOverflow\n                )}\n            >\n                <Container\n                    className={classNames(\n                        classes.tweetsContainer,\n                        classes.fullHeight,\n                        classes.containerWithShadow,\n                        classes.autoOverflow\n                    )}\n                >\n                    {tweets}\n                </Container>\n            </Grid>\n\n            {/* GRID ITEM 02: Button Bar\n            The Edit Thread button will be hidden in the desktop view of the app */}\n            <Grid item xs={12} className={classes.fixedSizeFlexItem}>\n                <Container\n                    className={classNames(\n                        classes.buttonRowContainer,\n                        classes.fullHeight\n                    )}\n                >\n                    <Hidden mdUp>\n                        <StyledButton\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            fullWidth\n                            onClick={props.editThreadHandler}\n                        >\n                            Edit thread\n                        </StyledButton>\n                    </Hidden>\n\n                    <StyledButton\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        onClick={props.publishHandler}\n                        disabled={!tweets.length > 0}\n                        fullWidth\n                    >\n                        Publish thread\n                    </StyledButton>\n                </Container>\n            </Grid>\n        </Grid>\n    );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\n\nconst useStyles = makeStyles((theme) => ({\n    dialogText: {\n        color: theme.palette.primary.contrastText,\n        textAlign: \"center\",\n    },\n}));\n\nexport default function MessagesDialog(props) {\n    const classes = useStyles();\n\n    return (\n        <Dialog open={props.open}>\n            <DialogContent>\n                <DialogContentText className={classes.dialogText}>\n                    {props.msg}\n                </DialogContentText>\n            </DialogContent>\n        </Dialog>\n    );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        position: \"absolute\",\n        width: \"50%\",\n        margin: 0,\n        zIndex: 10000,\n        left: \"25%\",\n        top: 0,\n    },\n}));\n\nexport default function CustomAlert(props) {\n    /**\n     * Component that wraps Material UI's Alert component\n     * in a collapse component so that the Alert animates\n     * in and out when displayed.\n     */\n\n    const classes = useStyles();\n\n    return (\n        <Collapse in={props.visible} className={classes.root}>\n            <Alert severity={props.severity}>{props.msg}</Alert>\n        </Collapse>\n    );\n}\n","import { TWEET_LENGTH } from \"./generalConstants\";\n\nexport default function breakTextAtFullSentences(text) {\n    /**\n     * The main function of the module which will be used by\n     * the tweet splitter module.\n     *\n     * It starts by splitting the text at newline characters,\n     * then splits any tweets that are still longer than the\n     * maximum tweet length at fullstops.\n     */\n\n    const newLineSplit = combineSentencesIntoTweets(\n        splitAtNewlines(text),\n        \"\\n\"\n    );\n\n    // Return early if all tweets are shorter than the maximum\n    // character count allowed for tweets\n    if (newLineSplit.every((tweet) => tweet.length <= TWEET_LENGTH)) {\n        return newLineSplit;\n    }\n\n    // If there are tweets that are still longer than the maxmium\n    // allowed character count, attempt to split these tweets\n    // at fullstops, since a fullstop is usually an indication of\n    // a new sentence. However, make sure that sentences aren't\n    // split into extermely short tweets by recombining them\n    const fullSentenceSplit = combineSentencesIntoTweets(\n        newLineSplit\n            .map((tweet) => {\n                if (tweet.length <= TWEET_LENGTH) {\n                    return tweet;\n                }\n\n                return splitAtFullstops(tweet);\n            })\n            .flat()\n            .map((tweet) => tweet.trim())\n    );\n\n    return fullSentenceSplit;\n}\n\nfunction trimTopAndTailSpaces(text) {\n    /**\n     * Removes any spaces or tab characters from the start and end of\n     * a string. It is similar to the built-in trim() String method,\n     * but it doesn't remove newline characters like the trim() method\n     * does.\n     */\n\n    const startPattern = /^[ \\t]*/;\n    const endPattern = /[ \\t]*$/;\n\n    return text.replace(startPattern, \"\").replace(endPattern, \"\");\n}\n\nfunction splitAtNewlines(tweet) {\n    /**\n     * Takes a text and splits it into an array of tweets at the\n     * newline characters\n     */\n\n    return tweet.split(/(\\n)/).filter((tweet, idx, arr) => {\n        // This filters double newline characters keeping only\n        // one of them\n        return tweet !== \"\\n\" || (tweet === \"\\n\" && arr[idx] !== \"\\n\");\n    });\n}\n\nfunction splitAtFullstops(text) {\n    /**\n     * Takes a string that has multiple sentences ending in full stops\n     * and splits it into an array of single sentences that each contain\n     * the full stop at the end.\n     *\n     * It works by checking for any full stops that are followed by\n     * a letter or a newline character because that would mean they are\n     * at the middle of the string. It then splits the string at these\n     * full stops, which removes them from the sentences, then rejoins\n     * the whole string with a full stop followed by a space.\n     *\n     * Next, it splits the string again at any space character that is\n     * preceded by a full stop. The result of this is that each sentence\n     * would end up keeping its full stop.\n     */\n\n    /**\n     * Let's break this regex pattern down to clarify what it does exactly.\n     *\n     * The pattern is actually 2 patterns combined as alternatives.\n     *\n     * The first one is this:\n     * (?<!\\svs?)(?<=\\s\\w+[a-zA-Z]+)\\.(?=\\s*[a-zA-Z]+\\w*)\n     *\n     * (?<!\\svs?)\n     * It starts with a negative lookbehind that ensures the full stop\n     * is not preceded by the abbreviations 'v' or 'vs' for versus. This\n     * is to avoid splitting the sentence at the abbreviation since it\n     * almost always comes mid-sentence.\n     *\n     * (?<=\\s\\w+[a-zA-Z]+)\n     * Then, we have a positive lookbehind that makes sure the full stop\n     * is preceded by a string of text that is made of at least 1 alphabetical\n     * character and 1 word character (a-zA-Z0-9_). This is to avoid splitting\n     * sentences when initials are encountered. For instance, Abdelrahman\n     * M. Said shouldn't be split after the M. It also ensure that the last\n     * character before the full stop is alphabetical. This is to avoid\n     * splitting at points that separate currencies which have no symbol,\n     * and uses alphabetical letters instead. For example, EGP4.5M, won't be\n     * split, because the last character before the full stop is a digit.\n     *\n     * \\.\n     * Next, we have the pattern that matches the full stop character.\n     *\n     * (?=\\s*[a-zA-Z]+\\w*)\n     * And lastly, for the first pattern, we have a positive lookahead which\n     * ensures that the full stop is succeeded by at least 1 alphabetical\n     * character that comes immediately after it. It will also match any\n     * length of word or non-word characters that follow the alphabetical\n     * one.\n     *\n     *\n     * The second alternative is this:\n     * (?<=\\d+[\\s./-]\\d+|\\s\\d+)\\.(?=\\s*\\W*[a-zA-Z]+\\w*\\W*)\n     *\n     * (?<=\\d+[\\s./-]\\d+|\\s\\d+)\n     * This one starts with a positive lookbehind that looks for either\n     * a string of digits that is at least 1 digit long and that is preceded\n     * by a space or a sequence of digits separated by some of the separator\n     * used with dates or IP addresses such as ., -, and /.\n     *\n     * This is combined with a similar positive lookahead to the one in the\n     * previous pattern. This ensures that a sequence of digits at the end\n     * of a sentence will be captured correctly (lorem ipsum 2019.)\n     *\n     * If the sentence ends with something like an IP address (127.0.0.1.),\n     * then the pattern will only match the last full stop.\n     *\n     *\n     * The last alternative is the simplest:\n     * \\.$\n     *\n     * It matches the full stop at the end of the provided text.\n     */\n\n    const removeFullstopPattern =\n        /\\svs?\\.|\\s\\w+[a-zA-Z]+(\\.)(?=\\s*[a-zA-Z]+\\w*)|\\d+[\\s./-]\\d+(\\.)(?=\\s*\\W*[a-zA-Z]+\\w*\\W*)|\\s\\d+(\\.)(?=\\s*\\W*[a-zA-Z]+\\w*\\W*)|(\\.)$/g;\n\n    let splitIndices = [];\n\n    for (const match of text.matchAll(removeFullstopPattern)) {\n        if (match[1] || match[2] || match[3] || match[4]) {\n            splitIndices.push(match.index + match[0].length);\n        }\n    }\n\n    if (splitIndices.length === 0) {\n        return [text];\n    }\n\n    return splitIndices\n        .map((splitIndex, index, arr) => {\n            if (index === 0) {\n                return text.slice(0, splitIndex);\n            }\n\n            if (index + 1 === arr.length && splitIndex + 1 < text.length) {\n                return text.slice(splitIndex);\n            }\n\n            return text.slice(arr[index - 1], splitIndex);\n        })\n        .map((tweet) => trimTopAndTailSpaces(tweet));\n}\n\nfunction combineSentencesIntoTweets(sentenceArray, combiningCharacter = \" \") {\n    /**\n     * Takes an array of sentences and iterates over it combining\n     * the sentences into tweets that aren't longer than 280\n     * characters. However, if one of the sentences is shorter than\n     * 70 (1/4th of 280), it will add the following sentence to it\n     * even if the combined length is longer than 280. This is to\n     * avoid having very short tweets unnecessarily. If the user\n     * wants to have short tweets, they can force a split.\n     *\n     * Any tweets longer than 280 will be handled by further functions\n     * that will eventually split them to fit the maximum character\n     * count on Twitter.\n     *\n     * It uses a combiningCharacter parameter to allow the user to\n     * define if they want a non-space character added between the\n     * two sentences. If the combiningCharacter isn't specified, it\n     * will just use a space.\n     */\n\n    // Return early if sentenceArray is empty\n    if (sentenceArray.length === 0) {\n        return [];\n    }\n\n    let outArray = [];\n\n    for (let i = 0; i < sentenceArray.length; i++) {\n        // Just add the first sentence to the output array\n        if (i === 0) {\n            outArray.push(sentenceArray[i]);\n\n            continue;\n        }\n\n        // Get the last sentence that was added to the output array\n        const lastSentenceIndex = outArray.length - 1;\n        let lastSentence = outArray[lastSentenceIndex];\n\n        const curSentence = sentenceArray[i];\n\n        if (\n            lastSentence.length <= TWEET_LENGTH / 4 ||\n            lastSentence.length + curSentence.length <= TWEET_LENGTH\n        ) {\n            // If the current sentence starts with a newline character\n            // we just concatenate it to the last sentence. Otherwise,\n            // we add the combiningCharacter after the last sentence\n            // then concatenate the current one\n            lastSentence += curSentence.startsWith(\"\\n\")\n                ? curSentence\n                : `${combiningCharacter}${curSentence}`;\n\n            outArray[lastSentenceIndex] = lastSentence;\n        } else {\n            outArray.push(sentenceArray[i]);\n        }\n    }\n\n    return outArray;\n}\n\n// Module functions exported mainly for testing purposes\nexport const fsSplitter = {\n    trimTopAndTailSpaces,\n    splitAtFullstops,\n    combineSentencesIntoTweets,\n    splitAtNewlines,\n};\n","import { TWEET_LENGTH } from \"./generalConstants\";\n\nexport function breakLongSentence(sentence) {\n    /**\n     * Takes a tweet that is longer than the maximum character\n     * count allowed by Twitter and breaks it into an array of tweets that are\n     * all less than or equal to the maximum character count.\n     */\n\n    if (sentence.length <= TWEET_LENGTH) {\n        return sentence;\n    }\n\n    // Define a tweet length that is 3 characters shorter than the maximum\n    // length allowed by Twitter because the function will add ellipsis \"...\"\n    // to the end of the tweet to indicate that this tweet is breaking a\n    // sentence in the middle\n    const localTweetLength = TWEET_LENGTH - 3;\n\n    // Split the tweet into separate words and remove any empty elements from\n    // the array\n    const splitWords = sentence.split(\" \").filter((word) => word.length !== 0);\n\n    // A variable that will be used to build a tweet of a length less than or\n    // equal to the localTweetLength. This tweet will then be pushed to the\n    // output array of the split tweets, and the variable will be cleared for\n    // the next tweet\n    let currentTweet = \"\";\n\n    // The output array\n    let splitTweets = [];\n\n    for (const word of splitWords) {\n        // Ensure that the word is clear of any extra spaces\n        const currentWord = word.trim();\n\n        // If we encounter a word that is longer than the tweet length so it\n        // needs to be broken into separate tweets, then we push any text in\n        // the currentTweet variable to the output array and clear the variable\n        if (currentWord.length > TWEET_LENGTH) {\n            if (currentTweet.length > 0) {\n                splitTweets.push(`${currentTweet}...`);\n                currentTweet = \"\";\n            }\n\n            splitTweets = [...splitTweets, ...breakVeryLongWord(currentWord)];\n\n            continue;\n        }\n\n        if (currentTweet.length === 0) {\n            // When there is no text in the currentTweet variable, don't add\n            // a space before adding the currentWord\n            currentTweet += currentWord;\n        } else if (\n            currentTweet.length + currentWord.length + 1 <\n            localTweetLength\n        ) {\n            currentTweet += ` ${currentWord}`;\n        } else {\n            splitTweets.push(`${currentTweet}...`);\n\n            currentTweet = currentWord;\n        }\n    }\n\n    // If there is any text left over in the currentTweet that hasn't been\n    // pushed yet to the output array, push it\n    if (currentTweet.length > 0) {\n        splitTweets.push(currentTweet);\n    }\n\n    // Remove ellipsis from the last tweet. The reason we remove the ellipsis\n    // from the last tweet is that this function acts on complete sentences,\n    // so the last tweet in the array is not part of any sentence that comes\n    // after it. It is part of the thread, but it is not part of a broken\n    // sentence, so it doesn't need the ellipsis\n    const lastTweetIndex = splitTweets.length - 1;\n    splitTweets[lastTweetIndex] = removeEllipsisFromTweet(\n        splitTweets[lastTweetIndex]\n    );\n\n    return splitTweets;\n}\n\nexport function recombineShortTweets(threadArray) {\n    /**\n     * Takes an array of tweets and iterates over it combining any\n     * consecutive tweets that can fit in a single tweet\n     */\n\n    // The output array\n    let combinedTweets = [];\n\n    for (let i = 0; i < threadArray.length; i++) {\n        const curTweet = threadArray[i];\n\n        if (i === 0) {\n            combinedTweets.push(curTweet);\n\n            continue;\n        }\n\n        const lastTweetIndex = combinedTweets.length - 1;\n\n        // Get the last tweet making sure to clean it from ellipsis\n        // if it has them at the end to prepare it for the following\n        // tweet to be added if they can fit together in a single tweet\n        const lastTweet = removeEllipsisFromTweet(\n            combinedTweets[lastTweetIndex]\n        );\n\n        if (lastTweet.length + curTweet.length + 1 <= TWEET_LENGTH) {\n            // Replace the last tweet with the combination of last tweet\n            // and the current tweet\n            combinedTweets[lastTweetIndex] = `${lastTweet} ${curTweet}`;\n        } else {\n            combinedTweets.push(curTweet);\n        }\n    }\n\n    return combinedTweets;\n}\n\nfunction breakVeryLongWord(word) {\n    /**\n     * Takes any word longer than the maximum character\n     * count allowed for Twitter and splits it into several tweets.\n     * This allows the app to handle user input if the user decides to\n     * type long strings with no spaces in between.\n     */\n\n    if (word.length <= TWEET_LENGTH) {\n        return word;\n    }\n\n    // Define a tweet length that is 3 characters shorter than the maximum\n    // length allowed by Twitter because the function will add ellipsis \"...\"\n    // to the end of the tweet to indicate that this tweet is breaking a word\n    // in the middle\n    const localTweetLength = TWEET_LENGTH - 3;\n\n    // Get how many tweets are needed to include the entire word\n    const tweetCount = Math.ceil(word.length / localTweetLength);\n\n    let splitTweets = [];\n\n    for (let i = 0; i < tweetCount; i++) {\n        const sliceStart = i * localTweetLength;\n        const sliceEnd = (i + 1) * localTweetLength;\n\n        let outWord = word.slice(sliceStart, sliceEnd) + \"...\";\n\n        splitTweets.push(outWord);\n    }\n\n    return splitTweets;\n}\n\nfunction removeEllipsisFromTweet(tweet) {\n    /**\n     * Removes the ellipsis from the end of a tweet\n     */\n\n    const lastThreeCharacters = tweet.slice(tweet.length - 3);\n\n    if (lastThreeCharacters === \"...\") {\n        return tweet.slice(0, tweet.length - 3);\n    } else {\n        return tweet;\n    }\n}\n\n// Module functions exported mainly for testing purposes\nexport const msSplitter = {\n    breakVeryLongWord,\n    removeEllipsisFromTweet,\n    recombineShortTweets,\n};\n","import { TWEET_LENGTH } from \"../utils/generalConstants\";\nimport breakTextAtFullSentences from \"../utils/fullSentenceSplitter\";\nimport {\n    breakLongSentence,\n    recombineShortTweets,\n} from \"../utils/midSentenceSplitter\";\n\nexport default function splitTweet(thread) {\n    const cleanedThread = thread.trim();\n\n    // First, take care of user-defined splits\n    const userDefinedSplits = cleanedThread\n        .split(\"(---)\")\n        .map((tweet) => tweet.trim())\n        .filter((tweet) => tweet !== \"\");\n\n    // Return early if all tweets are shorter than the maximum allowed\n    // tweet length\n    if (allTweetsFitLength(userDefinedSplits)) {\n        return userDefinedSplits;\n    }\n\n    // Third, split the tweet at full sentences if the tweet is longer\n    // than the maximum length allowed\n    const fullSentencesSplit = userDefinedSplits\n        .map((tweet) => {\n            if (tweet.length <= TWEET_LENGTH) {\n                return tweet;\n            }\n\n            return breakTextAtFullSentences(tweet);\n        })\n        .flat()\n        .map((tweet) => tweet.trim());\n\n    // Return early if all tweets are shorter than the maximum allowed\n    // tweet length\n    if (allTweetsFitLength(fullSentencesSplit)) {\n        return fullSentencesSplit;\n    }\n\n    // Next, split any tweets that are still longer than the maximum\n    // allowed tweet length\n    const midSentenceSplit = fullSentencesSplit\n        .map((tweet) => {\n            if (tweet.length <= TWEET_LENGTH) {\n                return tweet;\n            }\n\n            return breakLongSentence(tweet);\n        })\n        .flat()\n        .map((tweet) => tweet.trim());\n\n    // Last, do a final pass going over the thread recombining any\n    // tweets that are too short\n    const output = recombineShortTweets(midSentenceSplit)\n        .flat()\n        .map((tweet) => tweet.trim());\n\n    return output;\n}\n\nfunction allTweetsFitLength(threadArray) {\n    /**\n     * Utility function that makes sure that the length of every tweet\n     * in an array is less than or equal to the defined tweet length\n     */\n\n    return threadArray.every((tweet) => tweet.length <= TWEET_LENGTH);\n}\n","import { UNTITLED_NAME } from \"./generalConstants\";\n\nexport function checkUserObject(userObj) {\n    return (\n        userObj !== null &&\n        isNotEmpty(userObj) &&\n        containsAllKeys(userObj, [\"name\", \"screenName\", \"profileImage\"]) &&\n        userObj.name !== UNTITLED_NAME\n    );\n}\n\nexport function isNotEmpty(obj) {\n    return Object.entries(obj).length > 0;\n}\n\nexport function containsAllKeys(obj, keysArr) {\n    const objKeys = Object.keys(obj);\n\n    for (const key of keysArr) {\n        if (!objKeys.includes(key)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import axios from \"axios\";\nimport { SERVER } from \"../utils/generalConstants\";\n\nfunction sendAPIRequest(url, method, data = undefined) {\n    /**\n     * Utility function that makes a request to the backend\n     * sending along any data that is passed as an argument.\n     */\n\n    return axios({\n        url: url,\n        method: method,\n        withCredentials: true,\n        baseURL: SERVER,\n        data: data ? data : {},\n    });\n}\n\nexport function login() {\n    /**\n     * Call the login route\n     */\n\n    return sendAPIRequest(\"/request_token\", \"get\");\n}\n\nexport function logout() {\n    /**\n     * Call the logout route\n     */\n\n    return sendAPIRequest(\"/logout\", \"get\");\n}\n\nexport function publishAllTweetImages(files) {\n    return new Promise((resolve, reject) => {\n        const promises = files.map((file) => publishMedia(file));\n\n        Promise.all(promises)\n            .then((results) => {\n                const output = results.map(\n                    (response) => response.data.media_id\n                );\n\n                resolve(output);\n            })\n            .catch((err) => {\n                reject(err);\n            });\n    });\n}\n\nfunction publishMedia(file) {\n    const data = new FormData();\n\n    data.append(\"mediaFile\", file);\n\n    return sendAPIRequest(\"/upload_media\", \"post\", data);\n}\n\nexport function publishThread(thread) {\n    /**\n     * Call the publish_thread route\n     */\n\n    return sendAPIRequest(\"/publish_thread\", \"post\", { tweets: thread });\n}\n","function getStorage(name) {\n    /**\n     * Returns either the window's localStorage or sessionStorage\n     * depending on the name passed by the user.\n     *\n     * If the name is invalid, then it returns undefined.\n     */\n\n    if (name === \"local\") {\n        return localStorage;\n    } else if (name === \"session\") {\n        return sessionStorage;\n    } else {\n        return undefined;\n    }\n}\n\nexport function setStorageItem(storeName, itemName, itemValue) {\n    /**\n     * A thin wrapper around the setItem method which converts any\n     * object passed to it in the itemValue argument to a string\n     * that can be saved in the storage.\n     */\n\n    const storage = getStorage(storeName);\n\n    if (storage) {\n        storage.setItem(itemName, JSON.stringify(itemValue));\n    }\n}\n\nexport function getStorageItem(storeName, itemName) {\n    /**\n     * A thin wrapper around the setItem method which converts the\n     * string representation of the value stored in the item into\n     * a Javascript object.\n     */\n\n    const storage = getStorage(storeName);\n\n    if (storage) {\n        return JSON.parse(storage.getItem(itemName));\n    }\n}\n","import { useState, useEffect, useCallback, createRef } from \"react\";\nimport { makeStyles, ThemeProvider } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport queryString from \"query-string\";\nimport darkTheme from \"./themes/threadder-dark-theme\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport Header from \"./components/Header\";\nimport TweetInput from \"./components/TweetInput\";\nimport ThreadViewer from \"./components/ThreadViewer\";\nimport MessagesDialog from \"./components/MessagesDialog\";\nimport CustomAlert from \"./components/CustomAlert\";\nimport splitTweet from \"./controllers/tweetSplitter\";\nimport { checkUserObject } from \"./utils/objectIntegrityCheckers\";\nimport {\n    login,\n    logout,\n    publishAllTweetImages,\n    publishThread,\n} from \"./controllers/APICalls\";\nimport { setStorageItem, getStorageItem } from \"./controllers/storageWrappers\";\nimport { insertIntoText } from \"./controllers/textManip\";\nimport {\n    openDB,\n    dbConnected,\n    clearImagesFromDB,\n    getAllImagesFromDB,\n} from \"./controllers/db\";\nimport {\n    UNTITLED_NAME,\n    UNTITLED_SCREEN_NAME,\n    UNTITLED_PROFILE_IMAGE,\n} from \"./utils/generalConstants\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        /**\n         * Styles that apply to the main Container component of the App\n         */\n        height: \"100vh\",\n        maxHeight: \"100vh\",\n    },\n    gridContainer: {\n        /**\n         * A class for the main grid layout of the App. It organises all\n         * the main elements of the App in a column layout.\n         */\n        flexFlow: \"column nowrap\",\n        height: \"100%\",\n    },\n    appHeader: {\n        flex: 0,\n    },\n    appView: {\n        flex: 1,\n        [theme.breakpoints.up(\"md\")]: {\n            display: \"flex\",\n            flexFlow: \"row nowrap\",\n            gap: theme.spacing(1.5),\n        },\n    },\n    mainArea: {\n        height: \"100%\",\n    },\n    hiddenOverflow: {\n        overflow: \"hidden\",\n    },\n}));\n\nexport default function App(props) {\n    const classes = useStyles();\n\n    const untitledUser = {\n        name: UNTITLED_NAME,\n        screenName: UNTITLED_SCREEN_NAME,\n        profileImage: UNTITLED_PROFILE_IMAGE,\n    };\n\n    /* APP STATE */\n    // Technically, this state is not required and it is\n    // not used by anything else. The only reason it exists\n    // is because it is used as a dependency for a useEffect\n    // hook that opens the database when the app first\n    // starts. Without having a dependency for the hook, it\n    // will keep running for every render, which means it\n    // will go nonstop trying to open the database.\n    const [dbOpen, setDBOpen] = useState(false);\n\n    const [alertVisibility, setAlertVisibility] = useState(false);\n    const [alertSeverity, setAlertSeverity] = useState(\"error\");\n    const [alertMessage, setAlertMessage] = useState(\"\");\n\n    // Feedback dialog states\n    const [dialogOpen, setDialogOpen] = useState(false);\n    const [dialogMessage, setDialogMessage] = useState(\n        \"This is an empty dialog\"\n    );\n\n    const [loggedIn, setLoggedIn] = useState(\n        getStorageItem(\"session\", \"loggedIn\") || false\n    );\n    const [user, setUser] = useState(\n        getStorageItem(\"session\", \"user\") || untitledUser\n    );\n    const [tweetText, setTweetText] = useState(\n        getStorageItem(\"session\", \"tweetText\") || \"\"\n    );\n    const [cursorPosition, setCursorPosition] = useState({\n        start: tweetText.length,\n        end: tweetText.length,\n    });\n    const [thread, setThread] = useState([]);\n    const [editing, setEditing] = useState(true);\n    /* END APP STATE */\n\n    /* COMPONENT REFS */\n    // createRef is used rather than useRef because the ref is\n    // being forwarded, and useRef doesn't seem to allow for\n    // ref forwarding.\n    const tweetInputRef = createRef();\n    /* END COMPONENT REFS */\n\n    /* EVENT HANDLERS AND FUNCTIONS */\n    const updateTweet = (event) => {\n        /**\n         * Handles user input in the textarea where the user\n         * types the tweet they want to split into a thread.\n         */\n\n        const text = event.target.value;\n\n        setTweetText(text);\n\n        setCursorPosition({\n            start: event.target.selectionStart,\n            end: event.target.selectionEnd,\n        });\n    };\n    const updateCursorPosition = (event) => {\n        /**\n         * Updates the cursor position state whenever the user\n         * changes the cursor position in the tweet input\n         * textarea.\n         */\n\n        const start = event.target.selectionStart;\n        const end = event.target.selectionEnd;\n\n        setCursorPosition({ start, end });\n    };\n    const insertTextAtCursor = (text) => {\n        /**\n         * Inserts any text passed to it at the current cursor\n         * position in the tweet text displayed in the input\n         * area.\n         */\n\n        const [updatedText, newPos] = insertIntoText(\n            tweetText,\n            cursorPosition,\n            text\n        );\n\n        setCursorPosition({ start: newPos, end: newPos });\n\n        setTweetText(updatedText);\n    };\n    const insertEmoji = (emoji) => {\n        /**\n         * Event handler for the emoji picker. It inserts the\n         * selected emoji at the current cursor position in\n         * the tweet text.\n         */\n\n        insertTextAtCursor(emoji.native);\n    };\n    const addSplit = () => {\n        /**\n         * Event handler for the split text toolbar button\n         * which adds a user defined split at the current\n         * cursor position in the tweet text.\n         */\n\n        insertTextAtCursor(\"\\n(---)\\n\");\n    };\n    const clearTweet = () => {\n        /**\n         * Event handler for the clear tweet toolbar button.\n         */\n\n        setTweetText(\"\");\n    };\n    const toggleEditing = () => {\n        /**\n         * Handles switching between editing the tweet and\n         * viewing the thread when the app is used on mobile\n         * phones\n         */\n\n        setEditing(!editing);\n    };\n    const displayAlert = useCallback((level, message) => {\n        /**\n         * Displays an alert in the UI using the severity level and\n         * the message specified.\n         *\n         * Defined as a useCallback hook, to allow using it as\n         * a dependency for useEffect hooks.\n         */\n        setAlertVisibility(true);\n\n        setAlertSeverity(level);\n\n        setAlertMessage(message);\n    }, []);\n    const loginHandler = () => {\n        /**\n         * Event handler for the Login button\n         */\n\n        showDialog(\"Please wait while we try to log you into your account\");\n\n        login()\n            .then((response) => {\n                document.location.href = response.data.redirect;\n            })\n            .catch((err) => {\n                console.log(err);\n\n                const errorMessage =\n                    typeof err === \"string\" ? err : \"Login failed\";\n\n                displayAlert(\"error\", errorMessage);\n            })\n            .finally(closeDialog);\n    };\n    const logoutHandler = () => {\n        /**\n         * Event handler for the Logout button\n         */\n\n        logout()\n            .then(() => {\n                displayAlert(\"success\", \"You are now logged out\");\n\n                setLoggedIn(false);\n                setUser(untitledUser);\n            })\n            .catch((err) => {\n                console.log(err);\n\n                const errorMessage =\n                    typeof err === \"string\" ? err : \"Logout failed\";\n\n                displayAlert(\"error\", errorMessage);\n            });\n    };\n    const publishTweets = useCallback(async () => {\n        /**\n         * A helper function that handles calling the function\n         * that sends the thread to the backend and clears the\n         * tweet input textarea if the thread was published\n         * successfully.\n         */\n\n        showDialog(\"Hold tight while we publish your thread\");\n\n        const toPublish = thread.map((tweet) => ({ text: tweet, media: [] }));\n\n        const allImages = await getAllImagesFromDB();\n\n        if (allImages instanceof Array && allImages.length > 0) {\n            for (const tweetImages of allImages) {\n                const index = Number(tweetImages.tweetIndex);\n\n                try {\n                    const mediaIDs = await publishAllTweetImages(\n                        tweetImages.files\n                    );\n\n                    toPublish[index].media = mediaIDs;\n                } catch {\n                    closeDialog();\n\n                    displayAlert(\n                        \"error\",\n                        \"Thread publishing was cancelled because publishing the images failed\"\n                    );\n\n                    return;\n                }\n            }\n        }\n\n        publishThread(toPublish)\n            .then(() => {\n                displayAlert(\"success\", \"Thread published successfully\");\n\n                setTweetText(\"\");\n            })\n            .catch((err) => {\n                console.log(err);\n\n                const errorMessage =\n                    typeof err === \"string\"\n                        ? err\n                        : \"Failed to publish your thread\";\n\n                displayAlert(\"error\", errorMessage);\n            })\n            .finally(closeDialog);\n    }, [thread, displayAlert]);\n    const showDialog = (message) => {\n        /**\n         * Opens the modal dialog with the specified message.\n         */\n\n        setDialogMessage(message);\n        setDialogOpen(true);\n    };\n    const closeDialog = () => {\n        /**\n         * Closes the modal dialog.\n         */\n\n        setDialogOpen(false);\n    };\n    const publishThreadHandler = () => {\n        /**\n         * Handles the click event of the Publish Thread button.\n         * If the user is already logged in, then it just publishes\n         * the thread. Otherwise, it sets the publishAfterLogin\n         * item in the sessionStorage to true and initiates the\n         * login process.\n         *\n         * The publishAfterLogin sessionStorage item determines\n         * whether the application needs to publish a thread after\n         * the user logs in successfully.\n         */\n\n        if (loggedIn) {\n            publishTweets();\n        } else {\n            setStorageItem(\"session\", \"publishAfterLogin\", true);\n\n            loginHandler();\n        }\n    };\n    /* END EVENT HANDLERS AND FUNCTIONS */\n\n    /* SIDE EFFECTS */\n    // Runs when the app loads and tries to open the database.\n    // TODO: Check to make sure that this hook doesn't keep running\n    // if the connection to database fails.\n    useEffect(() => {\n        if (!dbOpen) {\n            openDB()\n                .then(() => {\n                    setDBOpen(true);\n                })\n                .catch((err) => {\n                    displayAlert(\"error\", err);\n                });\n        }\n    }, [dbOpen, displayAlert]);\n\n    // Once a login attempt is complete and the app reloads, check\n    // the session store to display the appropriate alert depending\n    // on whether the attempt was successful or not\n    useEffect(() => {\n        if (getStorageItem(\"session\", \"loginSuccessMessage\")) {\n            setStorageItem(\"session\", \"loginSuccessMessage\", false);\n\n            displayAlert(\"success\", \"You are now logged in\");\n        } else if (getStorageItem(\"session\", \"loginFailMessage\")) {\n            setStorageItem(\"session\", \"loginFailMessage\", false);\n\n            displayAlert(\"error\", \"Login failed\");\n        }\n    }, [displayAlert]);\n\n    // When the backend redirects to the app, set the user to logged\n    // in if the process was successful. It also sets some values in\n    // the session storage for the alerts that will need to be displayed\n    // in the UI once the login attempt is complete\n    useEffect(() => {\n        if (document.location.search !== \"\") {\n            const user = queryString.parse(document.location.search);\n\n            document.location.href = \"/\";\n\n            if (checkUserObject(user)) {\n                setLoggedIn(true);\n                setUser(user);\n\n                setStorageItem(\"session\", \"loginSuccessMessage\", true);\n            } else {\n                setStorageItem(\"session\", \"loginFailMessage\", true);\n            }\n        }\n    }, []);\n\n    useEffect(() => {\n        if (\n            document.location.search === \"\" &&\n            thread.length > 0 &&\n            getStorageItem(\"session\", \"publishAfterLogin\")\n        ) {\n            setStorageItem(\"session\", \"publishAfterLogin\", false);\n\n            publishTweets();\n        }\n    }, [thread, publishTweets]);\n\n    // On every update, make sure that the TweetInput area has its\n    // cursor in the correct place. This is to ensure that, when the\n    // user adds an emoji or a user defined split in the middle of any\n    // text that already exists, the cursor doesn't jump to the end\n    useEffect(() => {\n        if (tweetInputRef.current) {\n            tweetInputRef.current.selectionStart = cursorPosition.start;\n            tweetInputRef.current.selectionEnd = cursorPosition.end;\n        }\n    });\n\n    // Give focus to the tweet input area on page load and whenever\n    // the tweet input is re-rendered\n    useEffect(() => {\n        if (tweetInputRef.current) {\n            tweetInputRef.current.focus();\n        }\n    }, [tweetInputRef]);\n\n    // Update the session storage when the logged in state changes\n    useEffect(() => {\n        setStorageItem(\"session\", \"loggedIn\", loggedIn);\n    }, [loggedIn]);\n\n    // Update the session storage when the user state changes\n    useEffect(() => {\n        setStorageItem(\"session\", \"user\", user);\n    }, [user]);\n\n    // When the tweet text is cleared, clear the stored images\n    // from the IndexedDB if the tweet length is 0.\n    // This runs in an interval until the connection to the\n    // database is successful, and then it clears the images.\n    // The reason we need to clear the images is that, all of\n    // the application state is persisted in the sessionStorage\n    // which is cleared automatically when the tab is closed.\n    // However, the images are persisted in the IndexedDB, which\n    // isn't cleared manually.\n    useEffect(() => {\n        let checkInterval;\n        let checkTimeout;\n\n        const clear = () => {\n            if (dbConnected()) {\n                clearInterval(checkInterval);\n\n                if (tweetText.length === 0) {\n                    clearImagesFromDB();\n                }\n            }\n        };\n\n        checkInterval = setInterval(clear, 20);\n\n        // Setup a 10 second timeout. If the database\n        // is still not connected after that, then\n        // there is probably some problem with it and\n        // it won't connect. This way, we won't keep\n        // checking for it and wasting resources\n        // unnecessarily.\n        if (!checkTimeout) {\n            checkTimeout = setTimeout(() => {\n                clearInterval(checkInterval);\n            }, 10000);\n        }\n    }, [tweetText]);\n\n    // When the tweetText is updated, update the thread state,\n    // store the tweetText in the sessionStorage to ensure\n    // it persists across reloads and\n    useEffect(() => {\n        if (tweetText.length === 0) {\n            setThread([]);\n        } else {\n            setThread(splitTweet(tweetText));\n        }\n\n        setStorageItem(\"session\", \"tweetText\", tweetText);\n    }, [tweetText]);\n\n    // When the thread is updated, store it in the sessionStorage\n    // to ensure it persists across reloads\n    // useEffect(() => {\n    //     setStorageItem(\"session\", \"thread\", thread);\n    // }, [thread]);\n\n    // When an alert is shown in the UI, start a timeout to hide\n    // it after a few seconds\n    useEffect(() => {\n        if (alertVisibility) {\n            let closeAlertTimeout;\n\n            if (closeAlertTimeout) {\n                clearTimeout(closeAlertTimeout);\n            }\n\n            closeAlertTimeout = setTimeout(() => {\n                setAlertVisibility(false);\n            }, 4000);\n\n            return () => clearTimeout(closeAlertTimeout);\n        }\n    }, [alertVisibility]);\n    /* END SIDE EFFECTS */\n\n    return (\n        <ThemeProvider theme={darkTheme}>\n            <CssBaseline>\n                <CustomAlert\n                    visible={alertVisibility}\n                    severity={alertSeverity}\n                    msg={alertMessage}\n                />\n\n                <MessagesDialog open={dialogOpen} msg={dialogMessage} />\n\n                <Container className={classes.root}>\n                    <Grid\n                        container\n                        spacing={3}\n                        className={classes.gridContainer}\n                    >\n                        {/* App Header grid item */}\n                        <Grid item xs={12} className={classes.appHeader}>\n                            <Header\n                                user={user}\n                                loggedIn={loggedIn}\n                                login={loginHandler}\n                                logout={logoutHandler}\n                            />\n                        </Grid>\n\n                        {/* Grid item that holds both TweetInput and the ThreadViewer */}\n                        <Grid\n                            item\n                            xs={12}\n                            className={classNames(\n                                classes.appView,\n                                classes.hiddenOverflow\n                            )}\n                        >\n                            {/* TweetInput item which gets hidden in mobile views if not editing */}\n                            <Hidden smDown={!editing}>\n                                <Grid\n                                    item\n                                    xs={12}\n                                    md={7}\n                                    className={classNames(\n                                        classes.mainArea,\n                                        classes.hiddenOverflow\n                                    )}\n                                >\n                                    <TweetInput\n                                        tweetText={tweetText}\n                                        handleTweetInput={updateTweet}\n                                        handleCursorPositionChange={\n                                            updateCursorPosition\n                                        }\n                                        pickEmojiHandler={insertEmoji}\n                                        splitTweetHandler={addSplit}\n                                        clearTweetHandler={clearTweet}\n                                        thread={thread}\n                                        viewThreadHandler={toggleEditing}\n                                        ref={tweetInputRef}\n                                    />\n                                </Grid>\n                            </Hidden>\n\n                            {/* ThreadViewer item which gets hidden in mobile views when editing */}\n                            <Hidden smDown={editing}>\n                                <Grid\n                                    item\n                                    xs={12}\n                                    md={5}\n                                    className={classNames(\n                                        classes.mainArea,\n                                        classes.hiddenOverflow\n                                    )}\n                                >\n                                    <ThreadViewer\n                                        user={user}\n                                        thread={thread}\n                                        editThreadHandler={toggleEditing}\n                                        publishHandler={publishThreadHandler}\n                                        setAlertData={displayAlert}\n                                    />\n                                </Grid>\n                            </Hidden>\n                        </Grid>\n                    </Grid>\n                </Container>\n            </CssBaseline>\n        </ThemeProvider>\n    );\n}\n","export function insertIntoText(text, cursorObj, textToAdd) {\n    /**\n     * Takes a string, a cursor object, an object with start\n     * and end attributes, and another string that will be\n     * added to the first string between the start and end\n     * indices defined by the cursor object.\n     *\n     * Returns an array with the updated text and an updated\n     * cursor object.\n     */\n\n    const before = text.slice(0, cursorObj.start);\n    const after = text.slice(cursorObj.end);\n\n    const updatedText = before + textToAdd + after;\n\n    const newPos = cursorObj.start + textToAdd.length;\n\n    return [updatedText, newPos];\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://cra.link/PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://cra.link/PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport \"./styles/index.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.querySelector(\"#root\")\n);\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}