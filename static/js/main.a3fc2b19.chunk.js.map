{"version":3,"sources":["themes/threadder-dark-theme.js","components/StyledButton.js","components/StyledMenu.js","utils/generalConstants.js","controllers/APICalls.js","components/LoggedInMenu.js","components/Header.js","components/TweetInput.js","components/Tweet.js","components/ThreadViewer.js","utils/fullSentenceSplitter.js","utils/midSentenceSplitter.js","controllers/tweetSplitter.js","controllers/sessionStorageWrappers.js","App.js","utils/objectIntegrityCheckers.js","index.js"],"names":["primaryPalette","main","light","dark","contrastText","contrastText2","backgroundPalette","paper","default","darkTheme","createMuiTheme","palette","primary","secondary","hover","inactive","inactiveText","background","spacing","shape","borderRadius","useStyles","makeStyles","theme","styledButton","color","backgroundColor","StyledButton","props","classes","allClasses","classNames","className","Button","menuList","border","StyledMenu","menuClasses","Menu","dotenv","config","TWEET_LENGTH","SERVER","sendAPIRequest","url","method","data","undefined","axios","withCredentials","baseURL","login","then","response","document","location","href","redirect","catch","err","console","log","publishThread","thread","tweets","menuItem","LoggedInMenu","useState","anchorEl","setAnchorEl","useCookies","cookie","closeMenu","Box","IconButton","size","onClick","event","currentTarget","Avatar","src","user","profileImage","alt","name","id","getContentAnchorEl","anchorReference","anchorOrigin","horizontal","vertical","transformOrigin","open","Boolean","onClose","autoFocus","MenuItem","screenName","setLoggedOutState","toolbar","height","padding","title","flexGrow","Header","logInBtn","variant","AppBar","position","Toolbar","Typography","loggedIn","root","flexFlow","fullHeight","containerWithShadow","boxShadow","shadows","expandingFlexItem","flex","fixedSizeFlexItem","textareaContainer","threadTextarea","fontFamily","fontSize","resize","width","outline","statsContainer","display","justifyContent","statsText","TweetInput","Grid","container","item","xs","Container","onChange","handleTweetInput","placeholder","value","tweetText","length","Hidden","mdUp","fullWidth","viewThreadHandler","marginBottom","verticalGrid","centerVerticalGridItems","alignItems","threadLineContainer","threadLine","tweetContainer","marginLeft","resetFont","defaultTextColor","userName","fontWeight","userHandle","margin","marginTop","whiteSpace","overflowWrap","hiddenOverflow","overflow","Tweet","text","autoOverflow","tweetsContainer","buttonRowContainer","gap","map","tweet","index","arr","editThreadHandler","publishHandler","disabled","trimTopAndTailSpaces","replace","splitAtFullstops","split","filter","sentence","join","combineSentencesIntoTweets","sentenceArray","combiningCharacter","outArray","i","lastSentenceIndex","lastSentence","curSentence","startsWith","push","breakTweetAtNewlines","breakVeryLongWord","word","tweetCount","Math","ceil","splitTweets","sliceStart","sliceEnd","outWord","slice","removeEllipsisFromTweet","recombineShortTweets","threadArray","combinedTweets","curTweet","lastTweetIndex","lastTweet","splitTweet","userDefinedSplits","trim","allTweetsFitLength","fullSentencesSplit","fullSentenceSplit","every","flat","breakTextAtFullSentences","splitWords","currentTweet","currentWord","breakLongSentence","setSesssionStorageItem","itemName","itemValue","sessionStorage","setItem","JSON","stringify","getSesssionStorageItem","parse","getItem","maxHeight","gridContainer","appHeader","appView","breakpoints","up","mainArea","App","setLoggedIn","setUser","setTweetText","setThread","editing","setEditing","toggleEditing","useEffect","search","userObj","queryString","obj","Object","entries","keysArr","objKeys","keys","key","includes","containsAllKeys","ThemeProvider","CssBaseline","smDown","md","target","ReactDOM","render","StrictMode","querySelector"],"mappings":"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","file":"static/js/main.a3fc2b19.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core/styles\";\n\n/*\n * Threadder's main theme\n */\n\nconst primaryPalette = {\n    main: \"#283845\",\n    light: \"#395164\",\n    dark: \"#22303c\",\n    contrastText: \"#ffffff\",\n    contrastText2: \"#e5e5e5\",\n};\n\nconst secondaryPalette = {\n    main: \"#ffc107\",\n    light: \"#ffd147\",\n    dark: \"#c97d02\",\n    hover: \"#ffa042\",\n    inactive: \"#432a01\",\n    contrastText: \"#14213d\",\n    inactiveText: \"#111111\",\n};\n\nconst backgroundPalette = {\n    paper: primaryPalette.light,\n    default: \"#202c39\",\n};\n\nconst darkTheme = createMuiTheme({\n    palette: {\n        primary: primaryPalette,\n        secondary: secondaryPalette,\n        background: backgroundPalette,\n    },\n    spacing: 4,\n    shape: {\n        borderRadius: 2,\n    },\n});\n\nexport default darkTheme;\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport Button from \"@material-ui/core/Button\";\n\n/*\n * A component that applies custom styling to Material UI's\n * default Button component. It passes all the props added\n * to it to the enclosed Button component.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    styledButton: {\n        \"&:disabled\": {\n            color: theme.palette.secondary.inactiveText,\n            backgroundColor: theme.palette.secondary.inactive,\n        },\n        \"&:hover\": {\n            backgroundColor: theme.palette.secondary.hover,\n        },\n    },\n}));\n\nexport default function StyledButton(props) {\n    const classes = useStyles();\n\n    /*\n     * Since the custom styling is applied by passing a class\n     * to the className prop, which only accepts one class,\n     * we use the classNames NPM package to merge the custom\n     * styling class with any classes passed by someone using\n     * the component who might want to further customise its\n     * display.\n     */\n    const allClasses = classNames(props.className, classes.styledButton);\n\n    return <Button {...props} className={allClasses} />;\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport Menu from \"@material-ui/core/Menu\";\n\n/*\n * Component that applies custom styling to Material UI's\n * Menu component. It passes all of its props to the\n * enclosed Menu component.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    menuList: {\n        border: `solid 1px ${theme.palette.primary.dark}`,\n    },\n}));\n\nexport default function StyledMenu(props) {\n    const classes = useStyles();\n\n    const menuClasses = {\n        paper: classes.menuList,\n    };\n\n    return <Menu classes={menuClasses} {...props} />;\n}\n","import dotenv from \"dotenv\";\n\ndotenv.config();\n\nexport const TWEET_LENGTH = 280;\nexport const SERVER =\n    process.env.NODE_ENV === \"development\"\n        ? \"http://localhost:5000\"\n        : \"https://threadder-app.herokuapp.com/\";\n","import axios from \"axios\";\nimport { SERVER } from \"../utils/generalConstants\";\n\nfunction sendAPIRequest(url, method, data = undefined) {\n    /*\n     * Utility function that makes a request to the backend\n     * sending along any data that is passed as an argument.\n     */\n\n    return axios({\n        url: url,\n        method: method,\n        withCredentials: true,\n        baseURL: SERVER,\n        data: data ? data : {},\n    });\n}\n\nexport function login() {\n    /*\n     * Call the login route\n     */\n\n    return sendAPIRequest(\"/request_token\", \"get\")\n        .then((response) => {\n            // Redirect to the authentication URL\n            document.location.href = response.data.redirect;\n        })\n        .catch((err) => console.log(err));\n}\n\nexport function logout() {\n    /*\n     * Call the logout route\n     */\n\n    return sendAPIRequest(\"/logout\", \"get\");\n}\n\nexport function publishThread(thread) {\n    /*\n     * Call the publish_thread route\n     */\n\n    return sendAPIRequest(\"/publish_thread\", \"post\", { tweets: thread });\n}\n","import { useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport StyledMenu from \"./StyledMenu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { logout } from \"../controllers/APICalls\";\n\n/*\n * The styles and implementation of the menu component that\n * is rendered when the user is logged in to their Twitter\n * account.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    menuList: {\n        border: `solid 1px ${theme.palette.primary.dark}`,\n    },\n    menuItem: {\n        color: theme.palette.primary.contrastText,\n        \"&:hover\": {\n            color: theme.palette.secondary.contrastText,\n            backgroundColor: theme.palette.secondary.main,\n        },\n    },\n}));\n\nexport default function LoggedInMenu(props) {\n    const classes = useStyles();\n\n    /* COMPONENT STATE */\n    // Generate the anchor element which will be used to trigger the menu\n    const [anchorEl, setAnchorEl] = useState(null);\n    /* END COMPONENT STATE */\n\n    const [cookie] = useCookies([\"user\"]);\n\n    /* EVENT HANDLERS */\n    const handleAvatarClick = (event) => {\n        /*\n         * This is used to set the Avatar as an anchor element for the\n         * menu. In effect, it expands the menu whenever the Avatar is\n         * clicked by the user.\n         */\n\n        // Use currentTarget instead of target to ensure that it grabs\n        // the parent div rather than any of the child elements\n        setAnchorEl(event.currentTarget);\n    };\n\n    const closeMenu = () => {\n        setAnchorEl(null);\n    };\n\n    const redirectToTwitter = () => {\n        /*\n         * Handles the click event for the Go to Twitter menu\n         * item, redirecting the logged-in user to their Twitter\n         * profile\n         */\n\n        closeMenu();\n\n        const screenName = cookie.user.screenName;\n\n        document.location.href = `https://twitter.com/${screenName}`;\n    };\n\n    const logOutHandler = () => {\n        /*\n         * Handles the click event for the Logout menu item\n         */\n\n        closeMenu();\n\n        logout()\n            .then(() => {\n                props.setLoggedOutState();\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n    /* END EVENT HANDLERS */\n\n    return (\n        <Box>\n            <IconButton size=\"small\" onClick={handleAvatarClick}>\n                <Avatar\n                    src={props.user.profileImage}\n                    alt={`${props.user.name} profile picture`}\n                />\n            </IconButton>\n\n            <StyledMenu\n                id=\"account-settings-menu\"\n                getContentAnchorEl={null}\n                anchorEl={anchorEl}\n                anchorReference=\"anchorEl\"\n                anchorOrigin={{ horizontal: \"center\", vertical: \"bottom\" }}\n                transformOrigin={{ horizontal: \"center\", vertical: \"top\" }}\n                open={Boolean(anchorEl)}\n                onClose={closeMenu}\n                autoFocus={false}\n            >\n                <MenuItem\n                    className={classes.menuItem}\n                    onClick={redirectToTwitter}\n                >\n                    Go to Twitter\n                </MenuItem>\n\n                <MenuItem className={classes.menuItem} onClick={logOutHandler}>\n                    Log out\n                </MenuItem>\n            </StyledMenu>\n        </Box>\n    );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport StyledButton from \"./StyledButton\";\nimport LoggedInMenu from \"./LoggedInMenu\";\nimport { login } from \"../controllers/APICalls\";\n\n/*\n * The styles and implementation of the app Header component.\n * It shows the app name, logo and a sign in button to allow\n * the user to log into their Twitter account.\n * When logged in, it replaces the sign in button with the\n * Twitter profile photo of the user and a menu that allows\n * them to navigate to their Twitter account directly from\n * the app or to log out.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    toolbar: {\n        height: \"1em\",\n        padding: \"1em 1.5em\",\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nexport default function Header(props) {\n    const classes = useStyles();\n\n    // The sign in StyledButton component\n    const logInBtn = (\n        <StyledButton variant=\"contained\" color=\"secondary\" onClick={login}>\n            Log in\n        </StyledButton>\n    );\n\n    return (\n        <AppBar position=\"relative\">\n            <Toolbar className={classes.toolbar}>\n                <Typography variant=\"h5\" className={classes.title}>\n                    Threadder\n                </Typography>\n                {props.loggedIn ? (\n                    <LoggedInMenu\n                        user={props.user}\n                        setLoggedOutState={props.setLoggedOutState}\n                    />\n                ) : (\n                    logInBtn\n                )}\n            </Toolbar>\n        </AppBar>\n    );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport StyledButton from \"./StyledButton\";\nimport Hidden from \"@material-ui/core/Hidden\";\n\n/*\n * The styles and implementation of the tweet input component.\n * This component is where the user will input the text they\n * want to split into a thread of tweets.\n * It also shows some stats about the character count of the\n * text and how many tweets are generated from it.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexFlow: \"column nowrap\",\n    },\n    fullHeight: {\n        height: \"100%\",\n    },\n    containerWithShadow: {\n        boxShadow: theme.shadows[4],\n    },\n    expandingFlexItem: {\n        flex: 1,\n    },\n    fixedSizeFlexItem: {\n        flex: 0,\n    },\n    textareaContainer: {\n        padding: \"1.5em\",\n        backgroundColor: theme.palette.primary.main,\n    },\n    threadTextarea: {\n        fontFamily: \"inherit\",\n        fontSize: \"inherit\",\n        resize: \"none\",\n        width: \"100%\",\n        padding: \"0.5em 0.75em\",\n        color: theme.palette.primary.contrastText,\n        backgroundColor: theme.palette.primary.main,\n        border: 0,\n        boxShadow: \"inset 0px 0px 5px 0px rgba(0, 0, 0, 0.4)\",\n        \"&:focus\": {\n            border: 0,\n            outline: 0,\n        },\n    },\n    statsContainer: {\n        padding: \"1em 1.5em\",\n        display: \"flex\",\n        flexFlow: \"row nowrap\",\n        justifyContent: \"space-between\",\n        backgroundColor: theme.palette.primary.dark,\n    },\n    statsText: {\n        color: theme.palette.primary.contrastText2,\n    },\n}));\n\nexport default function TweetInput(props) {\n    const classes = useStyles();\n\n    return (\n        <Grid\n            container\n            spacing={2}\n            className={classNames(classes.root, classes.fullHeight)}\n        >\n            {/* GRID ITEM 01: Tweet Input Textarea */}\n            <Grid\n                item\n                xs={12}\n                className={classNames(\n                    classes.expandingFlexItem,\n                    classes.fullHeight\n                )}\n            >\n                <Container\n                    className={classNames(\n                        classes.textareaContainer,\n                        classes.fullHeight,\n                        classes.containerWithShadow\n                    )}\n                >\n                    <textarea\n                        className={classNames(\n                            classes.threadTextarea,\n                            classes.fullHeight\n                        )}\n                        onChange={props.handleTweetInput}\n                        placeholder=\"Type your tweet here...\"\n                        value={props.tweetText}\n                    />\n                </Container>\n            </Grid>\n\n            {/* GRID ITEM 02: Status Bar */}\n            <Grid item xs={12} className={classes.fixedSizeFlexItem}>\n                <Container\n                    className={classNames(\n                        classes.statsContainer,\n                        classes.containerWithShadow\n                    )}\n                >\n                    <Typography\n                        variant=\"body2\"\n                        className={classes.statsText}\n                    >{`Characters: ${props.tweetText.length}`}</Typography>\n                    <Typography\n                        variant=\"body2\"\n                        className={classes.statsText}\n                    >{`Tweets: ${props.thread.length}`}</Typography>\n                </Container>\n            </Grid>\n\n            {/* GRID ITEM 03: View Thread Button\n            This button is hidden in the desktop view of the app */}\n            <Hidden mdUp>\n                <Grid item xs={12} className={classes.fixedSizeFlexItem}>\n                    <StyledButton\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        fullWidth\n                        onClick={props.viewThreadHandler}\n                    >\n                        View thread\n                    </StyledButton>\n                </Grid>\n            </Hidden>\n        </Grid>\n    );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\n/*\n * The style and implementation of the Tweet component which is used\n * by the ThreadViewer to display the split tweets in a format that\n * is familiar to a Twitter user.\n * It shows a picture of the logged in user, the user's name and\n * their Twitter handle, as well as the text for each of the tweets.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        /*\n         * Styles that apply to the main container of the Tweet component.\n         * It adds a margin to the bottom of the component if there are\n         * multiple tweets displayed. If the tweet is the last one, or the\n         * only one, in the thread, then no margin is added.\n         */\n        marginBottom: \"1.5em\",\n        flexFlow: \"row nowrap\",\n        \"&:last-child\": {\n            marginBottom: 0,\n        },\n    },\n    expandingFlexItem: {\n        flex: 1,\n    },\n    fixedSizeFlexItem: {\n        flex: 0,\n    },\n    verticalGrid: {\n        display: \"flex\",\n        flexFlow: \"column nowrap\",\n    },\n    centerVerticalGridItems: {\n        alignItems: \"center\",\n    },\n    threadLineContainer: {\n        padding: 0,\n    },\n    threadLine: {\n        /*\n         * A class that controls the appearance of the line that\n         * visually connects each tweet to the following one in\n         * the thread.\n         * This lines serves no functional purpose. It is just\n         * a visual cue, that is already used by Twitter, to\n         * indicate that these tweets belong together in the same\n         * thread.\n         */\n        width: \"2px\",\n\n        // Add the marginBottom value from the root to the height\n        height: \"calc(100% + 1.5em)\",\n\n        backgroundColor: theme.palette.background.default,\n    },\n    tweetContainer: {\n        marginLeft: \"1em\",\n    },\n    resetFont: {\n        /*\n         * A helper class to make sure that an element uses the parent's\n         * font family and font size\n         */\n        fontFamily: \"inherit\",\n        fontSize: \"inherit\",\n    },\n    defaultTextColor: {\n        color: theme.palette.primary.contrastText,\n    },\n    userName: {\n        fontWeight: \"bold\",\n    },\n    userHandle: {\n        color: theme.palette.primary.contrastText2,\n        marginLeft: \"0.5em\",\n    },\n    tweetText: {\n        padding: 0,\n        margin: 0,\n        marginTop: \"0.25em\",\n\n        /*\n         * This ensures that any line breaks or extra white spaces added\n         * by the user in the TweetInput component is not discarded when\n         * displayed in the Tweet component.\n         */\n        whiteSpace: \"pre-wrap\",\n\n        overflowWrap: \"break-word\",\n    },\n    hiddenOverflow: {\n        overflow: \"hidden\",\n    },\n}));\n\nexport default function Tweet(props) {\n    const classes = useStyles();\n\n    return (\n        <Grid container className={classes.root}>\n            <Grid\n                container\n                className={classNames(\n                    classes.fixedSizeFlexItem,\n                    classes.verticalGrid,\n                    classes.centerVerticalGridItems\n                )}\n            >\n                <Grid item>\n                    <Avatar\n                        src={props.user.profileImage}\n                        alt={`${props.user.name} profile picture`}\n                    />\n                </Grid>\n\n                {/* Render a line that connects all tweets similar to\n                 * what happens on Twitter when you write a thread.\n                 * This only render if the tweet is not the last one\n                 * which is determined based on the boolean prop\n                 * 'threadLine'.\n                 */}\n                {props.threadLine && (\n                    <Grid\n                        item\n                        className={classNames(\n                            classes.expandingFlexItem,\n                            classes.threadLineContainer\n                        )}\n                    >\n                        <div className={classes.threadLine} />\n                    </Grid>\n                )}\n            </Grid>\n\n            {/* Vertical grid that contains the user information\n             * as well as the text of the tweet.\n             */}\n            <Grid\n                container\n                className={classNames(\n                    classes.expandingFlexItem,\n                    classes.verticalGrid,\n                    classes.tweetContainer,\n                    classes.hiddenOverflow\n                )}\n            >\n                {/* Grid item that includes the user information\n                 * split over two spans, one for the name and\n                 * another for the Twitter handle.\n                 */}\n                <Grid item>\n                    <span\n                        className={classNames(\n                            classes.resetFont,\n                            classes.defaultTextColor,\n                            classes.userName\n                        )}\n                    >\n                        {props.user.name}\n                    </span>\n                    <span\n                        className={classNames(\n                            classes.resetFont,\n                            classes.userHandle\n                        )}\n                    >\n                        {`@${props.user.screenName}`}\n                    </span>\n                </Grid>\n\n                {/* Grid item that includes the tweet text */}\n                <Grid item>\n                    <p\n                        className={classNames(\n                            classes.resetFont,\n                            classes.defaultTextColor,\n                            classes.tweetText\n                        )}\n                    >\n                        {props.text}\n                    </p>\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport StyledButton from \"./StyledButton\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport Tweet from \"./Tweet\";\n\n/*\n * The styles and implementation of the Thread Viewer component.\n * This component will show the tweets passed from the App\n * component using the Tweet component.\n * It also has the Publish Thread button which activates when\n * there are at least 1 tweet added.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexFlow: \"column nowrap\",\n    },\n    fullHeight: {\n        height: \"100%\",\n    },\n    containerWithShadow: {\n        boxShadow: theme.shadows[4],\n    },\n    expandingFlexItem: {\n        flex: 1,\n    },\n    fixedSizeFlexItem: {\n        flex: 0,\n    },\n    autoOverflow: {\n        overflow: \"auto\",\n    },\n    hiddenOverflow: {\n        overflow: \"hidden\",\n    },\n    tweetsContainer: {\n        padding: \"1.5em\",\n        backgroundColor: theme.palette.primary.main,\n    },\n    buttonRowContainer: {\n        display: \"flex\",\n        flexFlow: \"row nowrap\",\n        justifyContent: \"space-between\",\n        gap: \"1em\",\n        margin: 0,\n        padding: 0,\n    },\n}));\n\nexport default function TweetInput(props) {\n    const classes = useStyles();\n\n    const tweets = props.thread.map((tweet, index, arr) => (\n        <Tweet\n            key={tweet}\n            user={props.user}\n            text={tweet}\n            threadLine={index + 1 < arr.length}\n        />\n    ));\n\n    return (\n        <Grid\n            container\n            spacing={2}\n            className={classNames(\n                classes.root,\n                classes.fullHeight,\n                classes.hiddenOverflow\n            )}\n        >\n            {/* GRID ITEM 01: Thread List */}\n            <Grid\n                item\n                xs={12}\n                className={classNames(\n                    classes.expandingFlexItem,\n                    classes.fullHeight,\n                    classes.hiddenOverflow\n                )}\n            >\n                <Container\n                    className={classNames(\n                        classes.tweetsContainer,\n                        classes.fullHeight,\n                        classes.containerWithShadow,\n                        classes.autoOverflow\n                    )}\n                >\n                    {tweets}\n                </Container>\n            </Grid>\n\n            {/* GRID ITEM 02: Button Bar\n            The Edit Thread button will be hidden in the desktop view of the app */}\n            <Grid item xs={12} className={classes.fixedSizeFlexItem}>\n                <Container\n                    className={classNames(\n                        classes.buttonRowContainer,\n                        classes.fullHeight\n                    )}\n                >\n                    <Hidden mdUp>\n                        <StyledButton\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            fullWidth\n                            onClick={props.editThreadHandler}\n                        >\n                            Edit thread\n                        </StyledButton>\n                    </Hidden>\n\n                    <StyledButton\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        onClick={props.publishHandler}\n                        disabled={!tweets.length > 0}\n                        fullWidth\n                    >\n                        Publish thread\n                    </StyledButton>\n                </Container>\n            </Grid>\n        </Grid>\n    );\n}\n","import { TWEET_LENGTH } from \"./generalConstants\";\n\nexport default function breakTextAtFullSentences(text) {\n    /*\n     * The main function of the module which will be used by\n     * the tweet splitter module.\n     */\n    const fullSentenceSplit = combineSentencesIntoTweets(\n        splitAtFullstops(text)\n    );\n\n    // Return early if all tweets are shorter than the maximum\n    // character count allowed for tweets\n    if (fullSentenceSplit.every((tweet) => tweet.length <= TWEET_LENGTH)) {\n        return fullSentenceSplit;\n    }\n\n    // If there are tweets that are still longer than the maxmium\n    // allowed character count, attempt to split these tweets\n    // at newline characters, since a newline character is\n    // usually an indication of a new sentence. However, make sure\n    // that sentences aren't split into extermely short tweets\n    // by recombining them\n    const newlineSplit = combineSentencesIntoTweets(\n        fullSentenceSplit\n            .map((tweet) => {\n                if (tweet.length <= TWEET_LENGTH) {\n                    return tweet;\n                }\n\n                return breakTweetAtNewlines(tweet);\n            })\n            .flat()\n            .map((tweet) => tweet.trim()),\n        \"\\n\"\n    );\n\n    return newlineSplit;\n}\n\nfunction trimTopAndTailSpaces(text) {\n    /*\n     * Removes any spaces or tab characters from the start and end of\n     * a string. It is similar to the built-in trim() String method,\n     * but it doesn't remove newline characters like the trim() method\n     * does.\n     */\n\n    const startPattern = /^[ \\t]*/;\n    const endPattern = /[ \\t]*$/;\n\n    return text.replace(startPattern, \"\").replace(endPattern, \"\");\n}\n\nfunction splitAtFullstops(text) {\n    /*\n     * Takes a string that has multiple sentences ending in full stops\n     * and splits it into an array of single sentences that each contain\n     * the full stop at the end.\n     *\n     * It works by checking for any full stops that are followed by\n     * a letter or a newline character because that would mean they are\n     * at the middle of the string. It then splits the string at these\n     * full stops, which removes them from the sentences, then rejoins\n     * the whole string with a full stop followed by a space.\n     *\n     * Next, it splits the string again at any space character that is\n     * preceded by a full stop. The result of this is that each sentence\n     * would end up keeping its full stop.\n     */\n\n    const removeFullstopPattern = /(?<=\\d*[a-zA-Z]\\w+)\\.(?=\\s*\\d*[a-zA-Z]\\w*\\n?)/g;\n    const removeSpacePattern = /(?<=\\d*[a-zA-Z]\\w+\\.)\\s/g;\n\n    return text\n        .split(removeFullstopPattern)\n        .filter((sentence) => sentence !== \"\")\n        .join(\". \")\n        .split(removeSpacePattern)\n        .map((sentence) => trimTopAndTailSpaces(sentence));\n}\n\nfunction combineSentencesIntoTweets(sentenceArray, combiningCharacter = \" \") {\n    /*\n     * Takes an array of sentences and iterates over it combining\n     * the sentences into tweets that aren't longer than 280\n     * characters. However, if one of the sentences is shorter than\n     * 70 (1/4th of 280), it will add the following sentence to it\n     * even if the combined length is longer than 280. This is to\n     * avoid having very short tweets unnecessarily. If the user\n     * wants to have short tweets, they can force a split.\n     *\n     * Any tweets longer than 280 will be handled by further functions\n     * that will eventually split them to fit the maximum character\n     * count on Twitter.\n     *\n     * It uses a combiningCharacter parameter to allow the user to\n     * define if they want a non-space character added between the\n     * two sentences. If the combiningCharacter isn't specified, it\n     * will just use a space.\n     */\n\n    // Return early if sentenceArray is empty\n    if (sentenceArray.length === 0) {\n        return [];\n    }\n\n    let outArray = [];\n\n    for (let i = 0; i < sentenceArray.length; i++) {\n        // Just add the first sentence to the output array\n        if (i === 0) {\n            outArray.push(sentenceArray[i]);\n\n            continue;\n        }\n\n        // Get the last sentence that was added to the output array\n        const lastSentenceIndex = outArray.length - 1;\n        let lastSentence = outArray[lastSentenceIndex];\n\n        const curSentence = sentenceArray[i];\n\n        if (\n            lastSentence.length <= TWEET_LENGTH / 4 ||\n            lastSentence.length + curSentence.length <= TWEET_LENGTH\n        ) {\n            // If the current sentence starts with a newline character\n            // we just concatenate it to the last sentence. Otherwise,\n            // we add the combiningCharacter after the last sentence\n            // then concatenate the current one\n            lastSentence += curSentence.startsWith(\"\\n\")\n                ? curSentence\n                : `${combiningCharacter}${curSentence}`;\n\n            outArray[lastSentenceIndex] = lastSentence;\n        } else {\n            outArray.push(sentenceArray[i]);\n        }\n    }\n\n    return outArray;\n}\n\nfunction breakTweetAtNewlines(tweet) {\n    /*\n     * Takes a text and splits it into an array of tweets at the\n     * newline characters\n     */\n\n    return tweet.split(\"\\n\").filter((tweet) => tweet !== \"\");\n}\n\n// Module functions exported mainly for testing purposes\nexport const fsSplitter = {\n    trimTopAndTailSpaces,\n    splitAtFullstops,\n    combineSentencesIntoTweets,\n    breakTweetAtNewlines,\n};\n","import { TWEET_LENGTH } from \"./generalConstants\";\n\nexport default function breakLongSentence(sentence) {\n    /*\n     * Takes a tweet that is longer than the maximum character\n     * count allowed by Twitter and breaks it into an array of tweets that are\n     * all less than or equal to the maximum character count.\n     */\n\n    if (sentence.length <= TWEET_LENGTH) {\n        return sentence;\n    }\n\n    // Define a tweet length that is 3 characters shorter than the maximum\n    // length allowed by Twitter because the function will add ellipsis \"...\"\n    // to the end of the tweet to indicate that this tweet is breaking a\n    // sentence in the middle\n    const localTweetLength = TWEET_LENGTH - 3;\n\n    // Split the tweet into separate words and remove any empty elements from\n    // the array\n    const splitWords = sentence.split(\" \").filter((word) => word.length !== 0);\n\n    // A variable that will be used to build a tweet of a length less than or\n    // equal to the localTweetLength. This tweet will then be pushed to the\n    // output array of the split tweets, and the variable will be cleared for\n    // the next tweet\n    let currentTweet = \"\";\n\n    // The output array\n    let splitTweets = [];\n\n    for (const word of splitWords) {\n        // Ensure that the word is clear of any extra spaces\n        const currentWord = word.trim();\n\n        // If we encounter a word that is longer than the tweet length so it\n        // needs to be broken into separate tweets, then we push any text in\n        // the currentTweet variable to the output array and clear the variable\n        if (currentWord.length > TWEET_LENGTH) {\n            if (currentTweet.length > 0) {\n                splitTweets.push(`${currentTweet}...`);\n                currentTweet = \"\";\n            }\n\n            splitTweets = [...splitTweets, ...breakVeryLongWord(currentWord)];\n\n            continue;\n        }\n\n        if (currentTweet.length === 0) {\n            // When there is no text in the currentTweet variable, don't add\n            // a space before adding the currentWord\n            currentTweet += currentWord;\n        } else if (\n            currentTweet.length + currentWord.length + 1 <\n            localTweetLength\n        ) {\n            currentTweet += ` ${currentWord}`;\n        } else {\n            splitTweets.push(`${currentTweet}...`);\n\n            currentTweet = currentWord;\n        }\n    }\n\n    // If there is any text left over in the currentTweet that hasn't been\n    // pushed yet to the output array, push it\n    if (currentTweet.length > 0) {\n        splitTweets.push(currentTweet);\n    }\n\n    // Remove ellipsis from the last tweet. The reason we remove the ellipsis\n    // from the last tweet is that this function acts on complete sentences,\n    // so the last tweet in the array is not part of any sentence that comes\n    // after it. It is part of the thread, but it is not part of a broken\n    // sentence, so it doesn't need the ellipsis\n    const lastTweetIndex = splitTweets.length - 1;\n    splitTweets[lastTweetIndex] = removeEllipsisFromTweet(\n        splitTweets[lastTweetIndex]\n    );\n\n    // Go over the tweets array and combine any two or more split tweets that\n    // could actually fit in one single tweet\n    splitTweets = recombineShortTweets(splitTweets);\n\n    return splitTweets;\n}\n\nfunction breakVeryLongWord(word) {\n    /*\n     * Takes any word longer than the maximum character\n     * count allowed for Twitter and splits it into several tweets.\n     * This allows the app to handle user input if the user decides to\n     * type long strings with no spaces in between.\n     */\n\n    if (word.length <= TWEET_LENGTH) {\n        return word;\n    }\n\n    // Define a tweet length that is 3 characters shorter than the maximum\n    // length allowed by Twitter because the function will add ellipsis \"...\"\n    // to the end of the tweet to indicate that this tweet is breaking a word\n    // in the middle\n    const localTweetLength = TWEET_LENGTH - 3;\n\n    // Get how many tweets are needed to include the entire word\n    const tweetCount = Math.ceil(word.length / localTweetLength);\n\n    let splitTweets = [];\n\n    for (let i = 0; i < tweetCount; i++) {\n        const sliceStart = i * localTweetLength;\n        const sliceEnd = (i + 1) * localTweetLength;\n\n        let outWord = word.slice(sliceStart, sliceEnd) + \"...\";\n\n        splitTweets.push(outWord);\n    }\n\n    return splitTweets;\n}\n\nfunction removeEllipsisFromTweet(tweet) {\n    /*\n     * Removes the ellipsis from the end of a tweet\n     */\n\n    const lastThreeCharacters = tweet.slice(tweet.length - 3);\n\n    if (lastThreeCharacters === \"...\") {\n        return tweet.slice(0, tweet.length - 3);\n    } else {\n        return tweet;\n    }\n}\n\nfunction recombineShortTweets(threadArray) {\n    /*\n     * Takes an array of tweets and iterates over it combining any\n     * consecutive tweets that can fit in a single tweet\n     */\n\n    // The output array\n    let combinedTweets = [];\n\n    for (let i = 0; i < threadArray.length; i++) {\n        const curTweet = threadArray[i];\n\n        if (i === 0) {\n            combinedTweets.push(curTweet);\n\n            continue;\n        }\n\n        const lastTweetIndex = combinedTweets.length - 1;\n\n        // Get the last tweet making sure to clean it from ellipsis\n        // if it has them at the end to prepare it for the following\n        // tweet to be added if they can fit together in a single tweet\n        const lastTweet = removeEllipsisFromTweet(\n            combinedTweets[lastTweetIndex]\n        );\n\n        if (lastTweet.length + curTweet.length + 1 <= TWEET_LENGTH) {\n            // Replace the last tweet with the combination of last tweet\n            // and the current tweet\n            combinedTweets[lastTweetIndex] = `${lastTweet} ${curTweet}`;\n        } else {\n            combinedTweets.push(curTweet);\n        }\n    }\n\n    return combinedTweets;\n}\n\n// Module functions exported mainly for testing purposes\nexport const msSplitter = {\n    breakVeryLongWord,\n    removeEllipsisFromTweet,\n    recombineShortTweets,\n};\n","import { TWEET_LENGTH } from \"../utils/generalConstants\";\nimport breakTextAtFullSentences from \"../utils/fullSentenceSplitter\";\nimport breakLongSentence from \"../utils/midSentenceSplitter\";\n\nexport default function splitTweet(thread) {\n    const cleanedThread = thread.trim();\n\n    // First, take care of user-defined splits\n    const userDefinedSplits = cleanedThread\n        .split(\"(---)\")\n        .map((tweet) => tweet.trim())\n        .filter((tweet) => tweet !== \"\");\n\n    // Return early if all tweets are shorter than the maximum allowed\n    // tweet length\n    if (allTweetsFitLength(userDefinedSplits)) {\n        return userDefinedSplits;\n    }\n\n    // Second, split the tweet at full sentences that fit within a tweet\n    const fullSentencesSplit = userDefinedSplits\n        .map((tweet) => {\n            if (tweet.length <= TWEET_LENGTH) {\n                return tweet;\n            }\n\n            return breakTextAtFullSentences(tweet);\n        })\n        .flat()\n        .map((tweet) => tweet.trim());\n\n    // Return early if all tweets are shorter than the maximum allowed\n    // tweet length\n    if (allTweetsFitLength(fullSentencesSplit)) {\n        return fullSentencesSplit;\n    }\n\n    // Last, split any tweets that are still longer than the maximum\n    // allowed tweet length\n    const output = fullSentencesSplit\n        .map((tweet) => {\n            if (tweet.length <= TWEET_LENGTH) {\n                return tweet;\n            }\n\n            return breakLongSentence(tweet);\n        })\n        .flat()\n        .map((tweet) => tweet.trim());\n\n    return output;\n}\n\nfunction allTweetsFitLength(threadArray) {\n    return threadArray.every((tweet) => tweet.length <= TWEET_LENGTH);\n}\n","export function setSesssionStorageItem(itemName, itemValue) {\n    /*\n     * A thin wrapper around the setItem method of the sessionStorage\n     * which converts any object passed to it in the itemValue argument\n     * to a string that can be saved in the storage.\n     */\n    sessionStorage.setItem(itemName, JSON.stringify(itemValue));\n}\n\nexport function getSesssionStorageItem(itemName) {\n    /*\n     * A thin wrapper around the getItem method of the sessionStorage\n     * which converts the string representation of the value stored in\n     * the item into a Javascript object.\n     */\n    return JSON.parse(sessionStorage.getItem(itemName));\n}\n","import { useState, useEffect } from \"react\";\nimport { makeStyles, ThemeProvider } from \"@material-ui/core/styles\";\nimport queryString from \"query-string\";\nimport classNames from \"classnames\";\nimport darkTheme from \"./themes/threadder-dark-theme\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport Header from \"./components/Header\";\nimport TweetInput from \"./components/TweetInput\";\nimport ThreadViewer from \"./components/ThreadViewer\";\nimport splitTweet from \"./controllers/tweetSplitter\";\nimport { isNotEmpty, containsAllKeys } from \"./utils/objectIntegrityCheckers\";\nimport { login, publishThread } from \"./controllers/APICalls\";\nimport {\n    setSesssionStorageItem,\n    getSesssionStorageItem,\n} from \"./controllers/sessionStorageWrappers\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        /*\n         * Styles that apply to the main Container component of the App\n         */\n        height: \"100vh\",\n        maxHeight: \"100vh\",\n    },\n    gridContainer: {\n        /*\n         * A class for the main grid layout of the App. It organises all\n         * the main elements of the App in a column layout.\n         */\n        flexFlow: \"column nowrap\",\n        height: \"100%\",\n    },\n    appHeader: {\n        flex: 0,\n    },\n    appView: {\n        flex: 1,\n        [theme.breakpoints.up(\"md\")]: {\n            display: \"flex\",\n            flexFlow: \"row nowrap\",\n            gap: theme.spacing(1.5),\n        },\n    },\n    mainArea: {\n        height: \"100%\",\n    },\n    hiddenOverflow: {\n        overflow: \"hidden\",\n    },\n}));\n\nexport default function App(props) {\n    const classes = useStyles();\n\n    /* APP STATE */\n    const [loggedIn, setLoggedIn] = useState(\n        getSesssionStorageItem(\"loggedIn\") || false\n    );\n    const [user, setUser] = useState(\n        getSesssionStorageItem(\"user\") || {\n            name: \"Untitled User\",\n            screenName: \"untitled_user\",\n            profileImage: \"\",\n        }\n    );\n    const [tweetText, setTweetText] = useState(\n        getSesssionStorageItem(\"tweetText\") || \"\"\n    );\n    const [thread, setThread] = useState([]);\n    const [editing, setEditing] = useState(true);\n    /* END APP STATE */\n\n    /* EVENT HANDLERS */\n    const updateTweet = (event) => {\n        /*\n         * Handles user input in the textarea where the user\n         * types the tweet they want to split into a thread.\n         */\n\n        const text = event.target.value;\n\n        setTweetText(text);\n    };\n    const toggleEditing = () => {\n        /*\n         * Handles switching between editing the tweet and\n         * viewing the thread when the app is used on mobile\n         * phones\n         */\n\n        setEditing(!editing);\n    };\n    const finaliseLogout = () => {\n        /*\n         * A convenience function that resets the loggedIn\n         * and user states to their initial values. It is\n         * used when the page reloads after the login process\n         * when the login fails. It is also passed to the\n         * Header component to be used as part of the click\n         * handler of the logout menu item.\n         */\n\n        setLoggedIn(false);\n        setUser({\n            name: \"Untitled User\",\n            screenName: \"untitled_user\",\n            profileImage: \"\",\n        });\n    };\n    const publishThreadHandler = () => {\n        /*\n         * Handles the click event of the Publish Thread button.\n         * If the user is already logged in, then it just publishes\n         * the thread. Otherwise, it sets the toPublish item in\n         * the sessionStorage to true and initiates the login\n         * process.\n         *\n         * The toPublish sessionStorage item determines whether\n         * the application needs to publish a thread when the\n         * page reloads or not.\n         */\n\n        if (loggedIn) {\n            publishThread(thread);\n        } else {\n            setSesssionStorageItem(\"toPublish\", true);\n\n            login();\n        }\n    };\n    /* END EVENT HANDLERS */\n\n    /* SIDE EFFECTS */\n    // On page load, check if the toPublish sessionStorage item\n    // is true. This would indicate that the page load happened\n    // because the user clicked the Publish Thread button without\n    // being logged in, which initiated the login process.\n    useEffect(() => {\n        if (getSesssionStorageItem(\"toPublish\")) {\n            setSesssionStorageItem(\"toPublish\", false);\n\n            const storedThread = getSesssionStorageItem(\"thread\");\n\n            publishThread(storedThread);\n        }\n    });\n\n    useEffect(() => {\n        if (document.location.search !== \"\") {\n            setLoggedIn(true);\n\n            const userObj = queryString.parse(document.location.search);\n            setUser(userObj);\n\n            document.location.search = \"\";\n        }\n    }, []);\n\n    useEffect(() => {\n        const userObj = getSesssionStorageItem(\"user\");\n\n        if (\n            userObj !== null &&\n            isNotEmpty(userObj) &&\n            containsAllKeys(userObj, [\"name\", \"screenName\", \"profileImage\"])\n        ) {\n            setLoggedIn(true);\n            setUser(getSesssionStorageItem(\"user\"));\n        }\n    }, []);\n\n    useEffect(() => {\n        setSesssionStorageItem(\"loggedIn\", loggedIn);\n    }, [loggedIn]);\n\n    useEffect(() => {\n        setSesssionStorageItem(\"user\", user);\n    }, [user]);\n\n    // When the tweetText is updated, update the thread state\n    // and store the tweetText in the sessionStorage to ensure\n    // it persists across reloads\n    useEffect(() => {\n        if (tweetText.length === 0) {\n            setThread([]);\n        } else {\n            setThread(splitTweet(tweetText));\n        }\n\n        setSesssionStorageItem(\"tweetText\", tweetText);\n    }, [tweetText]);\n\n    // When the thread is updated, store it in the sessionStorage\n    // to ensure it persists across reloads\n    useEffect(() => {\n        setSesssionStorageItem(\"thread\", thread);\n    }, [thread]);\n    /* END SIDE EFFECTS */\n\n    return (\n        <ThemeProvider theme={darkTheme}>\n            <CssBaseline>\n                <Container className={classes.root}>\n                    <Grid\n                        container\n                        spacing={3}\n                        className={classes.gridContainer}\n                    >\n                        {/* App Header grid item */}\n                        <Grid item xs={12} className={classes.appHeader}>\n                            <Header\n                                user={user}\n                                loggedIn={loggedIn}\n                                setLoggedOutState={finaliseLogout}\n                            />\n                        </Grid>\n\n                        {/* Grid item that holds both TweetInput and the ThreadViewer */}\n                        <Grid\n                            item\n                            xs={12}\n                            className={classNames(\n                                classes.appView,\n                                classes.hiddenOverflow\n                            )}\n                        >\n                            {/* TweetInput item which gets hidden in mobile views if not editing */}\n                            <Hidden smDown={!editing}>\n                                <Grid\n                                    item\n                                    xs={12}\n                                    md={7}\n                                    className={classNames(\n                                        classes.mainArea,\n                                        classes.hiddenOverflow\n                                    )}\n                                >\n                                    <TweetInput\n                                        tweetText={tweetText}\n                                        handleTweetInput={updateTweet}\n                                        thread={thread}\n                                        viewThreadHandler={toggleEditing}\n                                    />\n                                </Grid>\n                            </Hidden>\n\n                            {/* ThreadViewer item which gets hidden in mobile views when editing */}\n                            <Hidden smDown={editing}>\n                                <Grid\n                                    item\n                                    xs={12}\n                                    md={5}\n                                    className={classNames(\n                                        classes.mainArea,\n                                        classes.hiddenOverflow\n                                    )}\n                                >\n                                    <ThreadViewer\n                                        user={user}\n                                        thread={thread}\n                                        editThreadHandler={toggleEditing}\n                                        publishHandler={publishThreadHandler}\n                                    />\n                                </Grid>\n                            </Hidden>\n                        </Grid>\n                    </Grid>\n                </Container>\n            </CssBaseline>\n        </ThemeProvider>\n    );\n}\n","export function isNotEmpty(obj) {\n    return Object.entries(obj).length > 0;\n}\n\nexport function containsAllKeys(obj, keysArr) {\n    const objKeys = Object.keys(obj);\n\n    for (const key of keysArr) {\n        if (!objKeys.includes(key)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./styles/index.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}