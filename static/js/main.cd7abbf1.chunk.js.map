{"version":3,"sources":["themes/threadder-dark-theme.js","components/StyledButton.js","components/StyledMenu.js","components/LoggedInMenu.js","components/Header.js","components/InputToolbar.js","components/TweetInput.js","utils/generalConstants.js","components/Tweet.js","components/ThreadViewer.js","components/MessagesDialog.js","components/CustomAlert.js","utils/fullSentenceSplitter.js","utils/midSentenceSplitter.js","controllers/tweetSplitter.js","utils/objectIntegrityCheckers.js","controllers/APICalls.js","controllers/storageWrappers.js","App.js","controllers/textManip.js","index.js"],"names":["primaryPalette","main","light","dark","contrastText","contrastText2","backgroundPalette","paper","default","darkTheme","createMuiTheme","palette","primary","secondary","hover","inactive","inactiveText","background","spacing","shape","borderRadius","useStyles","makeStyles","theme","styledButton","color","backgroundColor","StyledButton","props","classes","allClasses","classNames","className","Button","menuList","border","StyledMenu","menuClasses","Menu","menuItem","LoggedInMenu","useState","anchorEl","setAnchorEl","closeMenu","Box","IconButton","size","onClick","event","currentTarget","Avatar","src","user","profileImage","alt","name","id","getContentAnchorEl","anchorReference","anchorOrigin","horizontal","vertical","transformOrigin","open","Boolean","onClose","autoFocus","MenuItem","screenName","window","logout","toolbar","height","padding","title","flexGrow","Header","logInBtn","variant","login","AppBar","position","Toolbar","Typography","loggedIn","root","marginTop","toolbarButton","marginRight","InputToolbar","pickerOpen","setPickerOpen","Hidden","smDown","ClickAwayListener","onClickAway","style","set","data","emoji","showPreview","perLine","onSelect","pickEmojiHandler","prevState","splitTweetHandler","clearTweetHandler","flexFlow","fullHeight","containerWithShadow","boxShadow","shadows","expandingFlexItem","flex","fixedSizeFlexItem","textareaContainer","display","paddingBottom","threadTextarea","fontFamily","fontSize","resize","width","outline","statsContainer","justifyContent","statsText","emojiPicker","TweetInput","React","forwardRef","ref","Grid","container","item","xs","Container","onChange","handleTweetInput","handleCursorPositionChange","placeholder","value","tweetText","length","thread","mdUp","fullWidth","viewThreadHandler","dotenv","config","TWEET_LENGTH","SERVER","UNTITLED_NAME","marginBottom","verticalGrid","centerVerticalGridItems","alignItems","threadLineContainer","threadLine","tweetContainer","marginLeft","resetFont","defaultTextColor","userName","fontWeight","userHandle","margin","whiteSpace","overflowWrap","tweetLength","textAlign","hiddenOverflow","overflow","Tweet","lengthVisibility","setLengthVisibility","onMouseOver","onMouseOut","text","autoOverflow","tweetsContainer","buttonRowContainer","gap","ThreadViewer","tweets","map","tweet","index","arr","editThreadHandler","publishHandler","disabled","dialogText","MessagesDialog","Dialog","DialogContent","DialogContentText","msg","zIndex","left","top","CustomAlert","Collapse","in","visible","Alert","severity","trimTopAndTailSpaces","replace","splitAtNewlines","split","filter","idx","splitAtFullstops","combineSentencesIntoTweets","sentenceArray","combiningCharacter","outArray","i","lastSentenceIndex","lastSentence","curSentence","startsWith","push","recombineShortTweets","threadArray","combinedTweets","curTweet","lastTweetIndex","lastTweet","removeEllipsisFromTweet","breakVeryLongWord","word","tweetCount","Math","ceil","splitTweets","sliceStart","sliceEnd","outWord","slice","splitTweet","userDefinedSplits","trim","allTweetsFitLength","fullSentencesSplit","newLineSplit","every","flat","breakTextAtFullSentences","sentence","splitWords","currentTweet","currentWord","breakLongSentence","checkUserObject","userObj","obj","Object","entries","keysArr","objKeys","keys","key","includes","containsAllKeys","sendAPIRequest","url","method","undefined","axios","withCredentials","baseURL","getStorage","localStorage","sessionStorage","setStorageItem","storeName","itemName","itemValue","storage","setItem","JSON","stringify","getStorageItem","parse","getItem","maxHeight","gridContainer","appHeader","appView","breakpoints","up","mainArea","loggedInSuccess","App","untitledUser","alertVisibility","setAlertVisibility","alertSeverity","setAlertSeverity","alertMessage","setAlertMessage","dialogOpen","setDialogOpen","dialogMessage","setDialogMessage","setLoggedIn","setUser","setTweetText","start","end","cursorPosition","setCursorPosition","setThread","editing","setEditing","tweetInputRef","createRef","insertTextAtCursor","cursorObj","textToAdd","insertIntoText","updatedText","newPos","toggleEditing","loginHandler","showDialog","then","response","document","location","href","redirect","catch","err","console","log","displayAlert","finally","closeDialog","publishTweets","useCallback","publishThread","postLogin","message","level","useEffect","search","queryString","current","selectionStart","selectionEnd","focus","closeAlertTimeout","clearTimeout","setTimeout","ThemeProvider","CssBaseline","md","target","native","ReactDOM","render","StrictMode","querySelector"],"mappings":"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","file":"static/js/main.cd7abbf1.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core/styles\";\n\n/*\n * Threadder's main theme\n */\n\nconst primaryPalette = {\n    main: \"#283845\",\n    light: \"#395164\",\n    dark: \"#22303c\",\n    contrastText: \"#ffffff\",\n    contrastText2: \"#e5e5e5\",\n};\n\nconst secondaryPalette = {\n    main: \"#ffc107\",\n    light: \"#ffd147\",\n    dark: \"#c97d02\",\n    hover: \"#ffa042\",\n    inactive: \"#432a01\",\n    contrastText: \"#14213d\",\n    inactiveText: \"#111111\",\n};\n\nconst backgroundPalette = {\n    paper: primaryPalette.light,\n    default: \"#202c39\",\n};\n\nconst darkTheme = createMuiTheme({\n    palette: {\n        primary: primaryPalette,\n        secondary: secondaryPalette,\n        background: backgroundPalette,\n    },\n    spacing: 4,\n    shape: {\n        borderRadius: 2,\n    },\n});\n\nexport default darkTheme;\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport Button from \"@material-ui/core/Button\";\n\n/**\n * A component that applies custom styling to Material UI's\n * default Button component. It passes all the props added\n * to it to the enclosed Button component.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    styledButton: {\n        \"&:disabled\": {\n            color: theme.palette.secondary.inactiveText,\n            backgroundColor: theme.palette.secondary.inactive,\n        },\n        \"&:hover\": {\n            backgroundColor: theme.palette.secondary.hover,\n        },\n    },\n}));\n\nexport default function StyledButton(props) {\n    const classes = useStyles();\n\n    /*\n     * Since the custom styling is applied by passing a class\n     * to the className prop, which only accepts one class,\n     * we use the classNames NPM package to merge the custom\n     * styling class with any classes passed by someone using\n     * the component who might want to further customise its\n     * display.\n     */\n    const allClasses = classNames(props.className, classes.styledButton);\n\n    return <Button {...props} className={allClasses} />;\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport Menu from \"@material-ui/core/Menu\";\n\n/**\n * Component that applies custom styling to Material UI's\n * Menu component. It passes all of its props to the\n * enclosed Menu component.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    menuList: {\n        border: `solid 1px ${theme.palette.primary.dark}`,\n    },\n}));\n\nexport default function StyledMenu(props) {\n    const classes = useStyles();\n\n    const menuClasses = {\n        paper: classes.menuList,\n    };\n\n    return <Menu classes={menuClasses} {...props} />;\n}\n","import { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport StyledMenu from \"./StyledMenu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\n/*\n * The styles and implementation of the menu component that\n * is rendered when the user is logged in to their Twitter\n * account.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    menuList: {\n        border: `solid 1px ${theme.palette.primary.dark}`,\n    },\n    menuItem: {\n        color: theme.palette.primary.contrastText,\n        \"&:hover\": {\n            color: theme.palette.secondary.contrastText,\n            backgroundColor: theme.palette.secondary.main,\n        },\n    },\n}));\n\nexport default function LoggedInMenu(props) {\n    const classes = useStyles();\n\n    /* COMPONENT STATE */\n    // Generate the anchor element which will be used to trigger the menu\n    const [anchorEl, setAnchorEl] = useState(null);\n    /* END COMPONENT STATE */\n\n    /* EVENT HANDLERS */\n    const handleAvatarClick = (event) => {\n        /**\n         * This is used to set the Avatar as an anchor element for the\n         * menu. In effect, it expands the menu whenever the Avatar is\n         * clicked by the user.\n         */\n\n        // Use currentTarget instead of target to ensure that it grabs\n        // the parent div rather than any of the child elements\n        setAnchorEl(event.currentTarget);\n    };\n\n    const closeMenu = () => {\n        setAnchorEl(null);\n    };\n\n    const redirectToTwitter = () => {\n        /**\n         * Handles the click event for the Go to Twitter menu\n         * item, redirecting the logged-in user to their Twitter\n         * profile\n         */\n\n        closeMenu();\n\n        const screenName = props.user.screenName;\n\n        window.open(`https://twitter.com/${screenName}`, \"_blank\");\n\n        // document.location.href = `https://twitter.com/${screenName}`;\n    };\n\n    const logOutHandler = () => {\n        /**\n         * Handles the click event for the Logout menu item\n         */\n\n        closeMenu();\n\n        props.logout();\n    };\n    /* END EVENT HANDLERS */\n\n    return (\n        <Box>\n            <IconButton size=\"small\" onClick={handleAvatarClick}>\n                <Avatar\n                    src={props.user.profileImage}\n                    alt={`${props.user.name} profile picture`}\n                />\n            </IconButton>\n\n            <StyledMenu\n                id=\"account-settings-menu\"\n                getContentAnchorEl={null}\n                anchorEl={anchorEl}\n                anchorReference=\"anchorEl\"\n                anchorOrigin={{ horizontal: \"center\", vertical: \"bottom\" }}\n                transformOrigin={{ horizontal: \"center\", vertical: \"top\" }}\n                open={Boolean(anchorEl)}\n                onClose={closeMenu}\n                autoFocus={false}\n            >\n                <MenuItem\n                    className={classes.menuItem}\n                    onClick={redirectToTwitter}\n                >\n                    Go to Twitter\n                </MenuItem>\n\n                <MenuItem className={classes.menuItem} onClick={logOutHandler}>\n                    Log out\n                </MenuItem>\n            </StyledMenu>\n        </Box>\n    );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport StyledButton from \"./StyledButton\";\nimport LoggedInMenu from \"./LoggedInMenu\";\n\n/*\n * The styles and implementation of the app Header component.\n * It shows the app name, logo and a sign in button to allow\n * the user to log into their Twitter account.\n * When logged in, it replaces the sign in button with the\n * Twitter profile photo of the user and a menu that allows\n * them to navigate to their Twitter account directly from\n * the app or to log out.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    toolbar: {\n        height: \"1em\",\n        padding: \"1em 1.5em\",\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nexport default function Header(props) {\n    const classes = useStyles();\n\n    // The sign in StyledButton component\n    const logInBtn = (\n        <StyledButton\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={props.login}\n        >\n            Log in\n        </StyledButton>\n    );\n\n    return (\n        <AppBar position=\"relative\">\n            <Toolbar className={classes.toolbar}>\n                <Typography variant=\"h5\" className={classes.title}>\n                    Threadder\n                </Typography>\n                {props.loggedIn ? (\n                    <LoggedInMenu user={props.user} logout={props.logout} />\n                ) : (\n                    logInBtn\n                )}\n            </Toolbar>\n        </AppBar>\n    );\n}\n","import { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport EmojiEmotionsIcon from \"@material-ui/icons/EmojiEmotions\";\nimport BackspaceIcon from \"@material-ui/icons/Backspace\";\nimport ViewAgendaIcon from \"@material-ui/icons/ViewAgenda\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport data from \"emoji-mart/data/twitter.json\";\nimport { NimblePicker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport \"./emojiPicker.css\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: 0,\n        marginTop: \"0.5em\",\n    },\n    toolbarButton: {\n        marginRight: \"0.45em\",\n        color: theme.palette.secondary.dark,\n        \"&:hover\": {\n            color: theme.palette.secondary.main,\n        },\n    },\n}));\n\nexport default function InputToolbar(props) {\n    const classes = useStyles();\n\n    const [pickerOpen, setPickerOpen] = useState(false);\n\n    const handlePickerClick = () => {\n        /**\n         * Handles the user click on the button the toggles\n         * the emoji picker.\n         */\n\n        setPickerOpen((prevState) => !prevState);\n    };\n\n    const handleClickAway = () => {\n        setPickerOpen(false);\n    };\n\n    return (\n        <div className={classes.root}>\n            <Hidden smDown>\n                <ClickAwayListener onClickAway={handleClickAway}>\n                    <span style={{ position: \"relative\" }}>\n                        {pickerOpen && (\n                            <NimblePicker\n                                set=\"twitter\"\n                                data={data}\n                                title=\"\"\n                                emoji=\"\"\n                                showPreview={false}\n                                perLine={8}\n                                onSelect={props.pickEmojiHandler}\n                            />\n                        )}\n                        <IconButton\n                            className={classes.toolbarButton}\n                            size=\"small\"\n                            onClick={handlePickerClick}\n                            title=\"Emoji\"\n                        >\n                            <EmojiEmotionsIcon />\n                        </IconButton>\n                    </span>\n                </ClickAwayListener>\n            </Hidden>\n            <IconButton\n                className={classes.toolbarButton}\n                size=\"small\"\n                onClick={props.splitTweetHandler}\n                title=\"Split\"\n            >\n                <ViewAgendaIcon />\n            </IconButton>\n            <IconButton\n                className={classes.toolbarButton}\n                size=\"small\"\n                onClick={props.clearTweetHandler}\n                title=\"Clear\"\n            >\n                <BackspaceIcon />\n            </IconButton>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport StyledButton from \"./StyledButton\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport InputToolbar from \"./InputToolbar\";\n\n/**\n * The styles and implementation of the tweet input component.\n * This component is where the user will input the text they\n * want to split into a thread of tweets.\n * It also shows some stats about the character count of the\n * text and how many tweets are generated from it.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexFlow: \"column nowrap\",\n    },\n    fullHeight: {\n        height: \"100%\",\n    },\n    containerWithShadow: {\n        boxShadow: theme.shadows[4],\n    },\n    expandingFlexItem: {\n        flex: 1,\n    },\n    fixedSizeFlexItem: {\n        flex: 0,\n    },\n    textareaContainer: {\n        display: \"flex\",\n        flexFlow: \"column nowrap\",\n        padding: \"1.5em\",\n        paddingBottom: \"0.55em\",\n        backgroundColor: theme.palette.primary.main,\n    },\n    threadTextarea: {\n        fontFamily: \"inherit\",\n        fontSize: \"inherit\",\n        resize: \"none\",\n        width: \"100%\",\n        padding: \"0.5em 0.75em\",\n        color: theme.palette.primary.contrastText,\n        backgroundColor: theme.palette.primary.main,\n        border: 0,\n        boxShadow: \"inset 0px 0px 5px 0px rgba(0, 0, 0, 0.4)\",\n        \"&:focus\": {\n            border: 0,\n            outline: 0,\n        },\n    },\n    statsContainer: {\n        padding: \"1em 1.5em\",\n        display: \"flex\",\n        flexFlow: \"row nowrap\",\n        justifyContent: \"space-between\",\n        backgroundColor: theme.palette.primary.dark,\n    },\n    statsText: {\n        color: theme.palette.primary.contrastText2,\n    },\n    emojiPicker: {\n        position: \"absolute\",\n    },\n}));\n\nconst TweetInput = React.forwardRef((props, ref) => {\n    const classes = useStyles();\n\n    return (\n        <Grid\n            container\n            spacing={2}\n            className={classNames(classes.root, classes.fullHeight)}\n        >\n            {/* GRID ITEM 01: Tweet Input Textarea and toolbar */}\n            <Grid\n                item\n                xs={12}\n                className={classNames(\n                    classes.expandingFlexItem,\n                    classes.fullHeight\n                )}\n            >\n                <Container\n                    className={classNames(\n                        classes.textareaContainer,\n                        classes.fullHeight,\n                        classes.containerWithShadow\n                    )}\n                >\n                    <textarea\n                        className={classNames(\n                            classes.threadTextarea,\n                            classes.fullHeight\n                        )}\n                        onChange={props.handleTweetInput}\n                        onSelect={props.handleCursorPositionChange}\n                        placeholder=\"Type your tweet here...\"\n                        value={props.tweetText}\n                        ref={ref}\n                    />\n\n                    <InputToolbar\n                        pickEmojiHandler={props.pickEmojiHandler}\n                        splitTweetHandler={props.splitTweetHandler}\n                        clearTweetHandler={props.clearTweetHandler}\n                    />\n                </Container>\n            </Grid>\n\n            {/* GRID ITEM 02: Status Bar */}\n            <Grid item xs={12} className={classes.fixedSizeFlexItem}>\n                <Container\n                    className={classNames(\n                        classes.statsContainer,\n                        classes.containerWithShadow\n                    )}\n                >\n                    <Typography\n                        variant=\"body2\"\n                        className={classes.statsText}\n                    >{`Characters: ${props.tweetText.length}`}</Typography>\n                    <Typography\n                        variant=\"body2\"\n                        className={classes.statsText}\n                    >{`Tweets: ${props.thread.length}`}</Typography>\n                </Container>\n            </Grid>\n\n            {/* GRID ITEM 03: View Thread Button\n            This button is hidden in the desktop view of the app */}\n            <Hidden mdUp>\n                <Grid item xs={12} className={classes.fixedSizeFlexItem}>\n                    <StyledButton\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        fullWidth\n                        onClick={props.viewThreadHandler}\n                    >\n                        View thread\n                    </StyledButton>\n                </Grid>\n            </Hidden>\n        </Grid>\n    );\n});\n\nexport default TweetInput;\n","import dotenv from \"dotenv\";\n\ndotenv.config();\n\nexport const TWEET_LENGTH = 280;\nexport const SERVER =\n    process.env.NODE_ENV === \"development\"\n        ? \"http://localhost:5000\"\n        : \"https://threadder-app.herokuapp.com/\";\nexport const UNTITLED_NAME = \"Untitled User\";\nexport const UNTITLED_SCREEN_NAME = \"untitled_user\";\nexport const UNTITLED_PROFILE_IMAGE = \"\";\n","import { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { TWEET_LENGTH } from \"../utils/generalConstants\";\n\n/*\n * The style and implementation of the Tweet component which is used\n * by the ThreadViewer to display the split tweets in a format that\n * is familiar to a Twitter user.\n * It shows a picture of the logged in user, the user's name and\n * their Twitter handle, as well as the text for each of the tweets.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        /*\n         * Styles that apply to the main container of the Tweet component.\n         * It adds a margin to the bottom of the component if there are\n         * multiple tweets displayed. If the tweet is the last one, or the\n         * only one, in the thread, then no margin is added.\n         */\n        marginBottom: \"1.5em\",\n        flexFlow: \"row nowrap\",\n        \"&:last-child\": {\n            marginBottom: 0,\n        },\n    },\n    expandingFlexItem: {\n        flex: 1,\n    },\n    fixedSizeFlexItem: {\n        flex: 0,\n    },\n    verticalGrid: {\n        display: \"flex\",\n        flexFlow: \"column nowrap\",\n    },\n    centerVerticalGridItems: {\n        alignItems: \"center\",\n    },\n    threadLineContainer: {\n        padding: 0,\n    },\n    threadLine: {\n        /*\n         * A class that controls the appearance of the line that\n         * visually connects each tweet to the following one in\n         * the thread.\n         * This lines serves no functional purpose. It is just\n         * a visual cue, that is already used by Twitter, to\n         * indicate that these tweets belong together in the same\n         * thread.\n         */\n        width: \"2px\",\n\n        // Add the marginBottom value from the root to the height\n        height: \"calc(100% + 1.5em)\",\n\n        backgroundColor: theme.palette.background.default,\n    },\n    tweetContainer: {\n        marginLeft: \"1em\",\n    },\n    resetFont: {\n        /*\n         * A helper class to make sure that an element uses the parent's\n         * font family and font size\n         */\n        fontFamily: \"inherit\",\n        fontSize: \"inherit\",\n    },\n    defaultTextColor: {\n        color: theme.palette.primary.contrastText,\n    },\n    userName: {\n        fontWeight: \"bold\",\n    },\n    userHandle: {\n        color: theme.palette.primary.contrastText2,\n        marginLeft: \"0.5em\",\n    },\n    tweetText: {\n        padding: 0,\n        margin: 0,\n        marginTop: \"0.25em\",\n\n        /**\n         * This ensures that any line breaks or extra white spaces added\n         * by the user in the TweetInput component is not discarded when\n         * displayed in the Tweet component.\n         */\n        whiteSpace: \"pre-wrap\",\n\n        overflowWrap: \"break-word\",\n    },\n    tweetLength: {\n        width: \"100%\",\n        textAlign: \"left\",\n        color: theme.palette.secondary.main,\n        margin: 0,\n        marginTop: \"0.5em\",\n    },\n    hiddenOverflow: {\n        overflow: \"hidden\",\n    },\n}));\n\nexport default function Tweet(props) {\n    const classes = useStyles();\n\n    const [lengthVisibility, setLengthVisibility] = useState(\"none\");\n\n    const mouseOverHandler = () => {\n        /**\n         * Event handler that shows the length of the\n         * current tweet when user hovers over it with\n         * the mouse\n         */\n\n        setLengthVisibility(\"block\");\n    };\n\n    const mouseOutHandler = () => {\n        /**\n         * Event handler that hides the length of the\n         * current tweet when mouse cursor leaves the\n         * tweet area\n         */\n\n        setLengthVisibility(\"none\");\n    };\n\n    return (\n        <Grid\n            container\n            className={classes.root}\n            onMouseOver={mouseOverHandler}\n            onMouseOut={mouseOutHandler}\n        >\n            <Grid\n                container\n                className={classNames(\n                    classes.fixedSizeFlexItem,\n                    classes.verticalGrid,\n                    classes.centerVerticalGridItems\n                )}\n            >\n                <Grid item>\n                    <Avatar\n                        src={props.user.profileImage}\n                        alt={`${props.user.name} profile picture`}\n                    />\n                </Grid>\n\n                {/* Render a line that connects all tweets similar to\n                 * what happens on Twitter when you write a thread.\n                 * This only render if the tweet is not the last one\n                 * which is determined based on the boolean prop\n                 * 'threadLine'.\n                 */}\n                {props.threadLine && (\n                    <Grid\n                        item\n                        className={classNames(\n                            classes.expandingFlexItem,\n                            classes.threadLineContainer\n                        )}\n                    >\n                        <div className={classes.threadLine} />\n                    </Grid>\n                )}\n            </Grid>\n\n            {/* Vertical grid that contains the user information\n             * as well as the text of the tweet.\n             */}\n            <Grid\n                container\n                className={classNames(\n                    classes.expandingFlexItem,\n                    classes.verticalGrid,\n                    classes.tweetContainer,\n                    classes.hiddenOverflow\n                )}\n            >\n                {/* Grid item that includes the user information\n                 * split over two spans, one for the name and\n                 * another for the Twitter handle.\n                 */}\n                <Grid item>\n                    <span\n                        className={classNames(\n                            classes.resetFont,\n                            classes.defaultTextColor,\n                            classes.userName\n                        )}\n                    >\n                        {props.user.name}\n                    </span>\n                    <span\n                        className={classNames(\n                            classes.resetFont,\n                            classes.userHandle\n                        )}\n                    >\n                        {`@${props.user.screenName}`}\n                    </span>\n                </Grid>\n\n                {/* Grid item that includes the tweet text */}\n                <Grid item>\n                    <p\n                        className={classNames(\n                            classes.resetFont,\n                            classes.defaultTextColor,\n                            classes.tweetText\n                        )}\n                    >\n                        {props.text}\n                    </p>\n                </Grid>\n                <Grid item style={{ display: lengthVisibility }}>\n                    <p\n                        className={classNames(\n                            classes.resetFont,\n                            classes.tweetLength\n                        )}\n                    >\n                        {`${props.text.length}/${TWEET_LENGTH}`}\n                    </p>\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport StyledButton from \"./StyledButton\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport Tweet from \"./Tweet\";\n\n/**\n * The styles and implementation of the Thread Viewer component.\n * This component will show the tweets passed from the App\n * component using the Tweet component.\n * It also has the Publish Thread button which activates when\n * there are at least 1 tweet added.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexFlow: \"column nowrap\",\n    },\n    fullHeight: {\n        height: \"100%\",\n    },\n    containerWithShadow: {\n        boxShadow: theme.shadows[4],\n    },\n    expandingFlexItem: {\n        flex: 1,\n    },\n    fixedSizeFlexItem: {\n        flex: 0,\n    },\n    autoOverflow: {\n        overflow: \"auto\",\n    },\n    hiddenOverflow: {\n        overflow: \"hidden\",\n    },\n    tweetsContainer: {\n        padding: \"1.5em\",\n        backgroundColor: theme.palette.primary.main,\n    },\n    buttonRowContainer: {\n        display: \"flex\",\n        flexFlow: \"row nowrap\",\n        justifyContent: \"space-between\",\n        gap: \"1em\",\n        margin: 0,\n        padding: 0,\n    },\n}));\n\nexport default function ThreadViewer(props) {\n    const classes = useStyles();\n\n    const tweets = props.thread.map((tweet, index, arr) => (\n        <Tweet\n            key={tweet}\n            user={props.user}\n            text={tweet}\n            threadLine={index + 1 < arr.length}\n        />\n    ));\n\n    return (\n        <Grid\n            container\n            spacing={2}\n            className={classNames(\n                classes.root,\n                classes.fullHeight,\n                classes.hiddenOverflow\n            )}\n        >\n            {/* GRID ITEM 01: Thread List */}\n            <Grid\n                item\n                xs={12}\n                className={classNames(\n                    classes.expandingFlexItem,\n                    classes.fullHeight,\n                    classes.hiddenOverflow\n                )}\n            >\n                <Container\n                    className={classNames(\n                        classes.tweetsContainer,\n                        classes.fullHeight,\n                        classes.containerWithShadow,\n                        classes.autoOverflow\n                    )}\n                >\n                    {tweets}\n                </Container>\n            </Grid>\n\n            {/* GRID ITEM 02: Button Bar\n            The Edit Thread button will be hidden in the desktop view of the app */}\n            <Grid item xs={12} className={classes.fixedSizeFlexItem}>\n                <Container\n                    className={classNames(\n                        classes.buttonRowContainer,\n                        classes.fullHeight\n                    )}\n                >\n                    <Hidden mdUp>\n                        <StyledButton\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            fullWidth\n                            onClick={props.editThreadHandler}\n                        >\n                            Edit thread\n                        </StyledButton>\n                    </Hidden>\n\n                    <StyledButton\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        onClick={props.publishHandler}\n                        disabled={!tweets.length > 0}\n                        fullWidth\n                    >\n                        Publish thread\n                    </StyledButton>\n                </Container>\n            </Grid>\n        </Grid>\n    );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\n\nconst useStyles = makeStyles((theme) => ({\n    dialogText: {\n        color: theme.palette.primary.contrastText,\n        textAlign: \"center\",\n    },\n}));\n\nexport default function MessagesDialog(props) {\n    const classes = useStyles();\n\n    return (\n        <Dialog open={props.open}>\n            <DialogContent>\n                <DialogContentText className={classes.dialogText}>\n                    {props.msg}\n                </DialogContentText>\n            </DialogContent>\n        </Dialog>\n    );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        position: \"absolute\",\n        width: \"30%\",\n        margin: 0,\n        zIndex: 10000,\n        left: \"35%\",\n        top: 0,\n    },\n}));\n\nexport default function CustomAlert(props) {\n    const classes = useStyles();\n\n    return (\n        <Collapse in={props.visible} className={classes.root}>\n            <Alert severity={props.severity}>{props.msg}</Alert>\n        </Collapse>\n    );\n}\n","import { TWEET_LENGTH } from \"./generalConstants\";\n\nexport default function breakTextAtFullSentences(text) {\n    /**\n     * The main function of the module which will be used by\n     * the tweet splitter module.\n     *\n     * It starts by splitting the text at newline characters,\n     * then splits any tweets that are still longer than the\n     * maximum tweet length at fullstops.\n     */\n\n    const newLineSplit = combineSentencesIntoTweets(\n        splitAtNewlines(text),\n        \"\\n\"\n    );\n\n    // Return early if all tweets are shorter than the maximum\n    // character count allowed for tweets\n    if (newLineSplit.every((tweet) => tweet.length <= TWEET_LENGTH)) {\n        return newLineSplit;\n    }\n\n    // If there are tweets that are still longer than the maxmium\n    // allowed character count, attempt to split these tweets\n    // at fullstops, since a fullstop is usually an indication of\n    // a new sentence. However, make sure that sentences aren't\n    // split into extermely short tweets by recombining them\n    const fullSentenceSplit = combineSentencesIntoTweets(\n        newLineSplit\n            .map((tweet) => {\n                if (tweet.length <= TWEET_LENGTH) {\n                    return tweet;\n                }\n\n                return splitAtFullstops(tweet);\n            })\n            .flat()\n            .map((tweet) => tweet.trim())\n    );\n\n    return fullSentenceSplit;\n}\n\nfunction trimTopAndTailSpaces(text) {\n    /**\n     * Removes any spaces or tab characters from the start and end of\n     * a string. It is similar to the built-in trim() String method,\n     * but it doesn't remove newline characters like the trim() method\n     * does.\n     */\n\n    const startPattern = /^[ \\t]*/;\n    const endPattern = /[ \\t]*$/;\n\n    return text.replace(startPattern, \"\").replace(endPattern, \"\");\n}\n\nfunction splitAtNewlines(tweet) {\n    /**\n     * Takes a text and splits it into an array of tweets at the\n     * newline characters\n     */\n\n    return tweet.split(/(\\n)/).filter((tweet, idx, arr) => {\n        // This filters double newline characters keeping only\n        // one of them\n        return tweet !== \"\\n\" || (tweet === \"\\n\" && arr[idx] !== \"\\n\");\n    });\n}\n\nfunction splitAtFullstops(text) {\n    /**\n     * Takes a string that has multiple sentences ending in full stops\n     * and splits it into an array of single sentences that each contain\n     * the full stop at the end.\n     *\n     * It works by checking for any full stops that are followed by\n     * a letter or a newline character because that would mean they are\n     * at the middle of the string. It then splits the string at these\n     * full stops, which removes them from the sentences, then rejoins\n     * the whole string with a full stop followed by a space.\n     *\n     * Next, it splits the string again at any space character that is\n     * preceded by a full stop. The result of this is that each sentence\n     * would end up keeping its full stop.\n     */\n\n    /**\n     * Let's break this regex pattern down to clarify what it does exactly.\n     *\n     * The pattern is actually 2 patterns combined as alternatives.\n     *\n     * The first one is this:\n     * (?<!\\svs?)(?<=\\s\\w+[a-zA-Z]+)\\.(?=\\s*[a-zA-Z]+\\w*)\n     *\n     * (?<!\\svs?)\n     * It starts with a negative lookbehind that ensures the full stop\n     * is not preceded by the abbreviations 'v' or 'vs' for versus. This\n     * is to avoid splitting the sentence at the abbreviation since it\n     * almost always comes mid-sentence.\n     *\n     * (?<=\\s\\w+[a-zA-Z]+)\n     * Then, we have a positive lookbehind that makes sure the full stop\n     * is preceded by a string of text that is made of at least 1 alphabetical\n     * character and 1 word character (a-zA-Z0-9_). This is to avoid splitting\n     * sentences when initials are encountered. For instance, Abdelrahman\n     * M. Said shouldn't be split after the M. It also ensure that the last\n     * character before the full stop is alphabetical. This is to avoid\n     * splitting at points that separate currencies which have no symbol,\n     * and uses alphabetical letters instead. For example, EGP4.5M, won't be\n     * split, because the last character before the full stop is a digit.\n     *\n     * \\.\n     * Next, we have the pattern that matches the full stop character.\n     *\n     * (?=\\s*[a-zA-Z]+\\w*)\n     * And lastly, for the first pattern, we have a positive lookahead which\n     * ensures that the full stop is succeeded by at least 1 alphabetical\n     * character that comes immediately after it. It will also match any\n     * length of word or non-word characters that follow the alphabetical\n     * one.\n     *\n     *\n     * The second alternative is this:\n     * (?<=\\d+[\\s./-]\\d+|\\s\\d+)\\.(?=\\s*\\W*[a-zA-Z]+\\w*\\W*)\n     *\n     * (?<=\\d+[\\s./-]\\d+|\\s\\d+)\n     * This one starts with a positive lookbehind that looks for either\n     * a string of digits that is at least 1 digit long and that is preceded\n     * by a space or a sequence of digits separated by some of the separator\n     * used with dates or IP addresses such as ., -, and /.\n     *\n     * This is combined with a similar positive lookahead to the one in the\n     * previous pattern. This ensures that a sequence of digits at the end\n     * of a sentence will be captured correctly (lorem ipsum 2019.)\n     *\n     * If the sentence ends with something like an IP address (127.0.0.1.),\n     * then the pattern will only match the last full stop.\n     *\n     *\n     * The last alternative is the simplest:\n     * \\.$\n     *\n     * It matches the full stop at the end of the provided text.\n     */\n\n    const removeFullstopPattern =\n        /((?<!\\svs?)(?<=\\s\\w+[a-zA-Z]+)\\.(?=\\s*[a-zA-Z]+\\w*)|(?<=\\d+[\\s./-]\\d+|\\s\\d+)\\.(?=\\s*\\W*[a-zA-Z]+\\w*\\W*)|\\.$)/g;\n\n    return text\n        .split(removeFullstopPattern)\n        .map((tweet, idx, arr) => {\n            if (arr[idx + 1] === \".\") {\n                return `${tweet}.`;\n            } else if (tweet === \".\") {\n                return \"\";\n            } else {\n                return tweet;\n            }\n        })\n        .filter((tweet) => tweet !== \"\")\n        .map((tweet) => trimTopAndTailSpaces(tweet));\n}\n\nfunction combineSentencesIntoTweets(sentenceArray, combiningCharacter = \" \") {\n    /**\n     * Takes an array of sentences and iterates over it combining\n     * the sentences into tweets that aren't longer than 280\n     * characters. However, if one of the sentences is shorter than\n     * 70 (1/4th of 280), it will add the following sentence to it\n     * even if the combined length is longer than 280. This is to\n     * avoid having very short tweets unnecessarily. If the user\n     * wants to have short tweets, they can force a split.\n     *\n     * Any tweets longer than 280 will be handled by further functions\n     * that will eventually split them to fit the maximum character\n     * count on Twitter.\n     *\n     * It uses a combiningCharacter parameter to allow the user to\n     * define if they want a non-space character added between the\n     * two sentences. If the combiningCharacter isn't specified, it\n     * will just use a space.\n     */\n\n    // Return early if sentenceArray is empty\n    if (sentenceArray.length === 0) {\n        return [];\n    }\n\n    let outArray = [];\n\n    for (let i = 0; i < sentenceArray.length; i++) {\n        // Just add the first sentence to the output array\n        if (i === 0) {\n            outArray.push(sentenceArray[i]);\n\n            continue;\n        }\n\n        // Get the last sentence that was added to the output array\n        const lastSentenceIndex = outArray.length - 1;\n        let lastSentence = outArray[lastSentenceIndex];\n\n        const curSentence = sentenceArray[i];\n\n        if (\n            lastSentence.length <= TWEET_LENGTH / 4 ||\n            lastSentence.length + curSentence.length <= TWEET_LENGTH\n        ) {\n            // If the current sentence starts with a newline character\n            // we just concatenate it to the last sentence. Otherwise,\n            // we add the combiningCharacter after the last sentence\n            // then concatenate the current one\n            lastSentence += curSentence.startsWith(\"\\n\")\n                ? curSentence\n                : `${combiningCharacter}${curSentence}`;\n\n            outArray[lastSentenceIndex] = lastSentence;\n        } else {\n            outArray.push(sentenceArray[i]);\n        }\n    }\n\n    return outArray;\n}\n\n// Module functions exported mainly for testing purposes\nexport const fsSplitter = {\n    trimTopAndTailSpaces,\n    splitAtFullstops,\n    combineSentencesIntoTweets,\n    splitAtNewlines,\n};\n","import { TWEET_LENGTH } from \"./generalConstants\";\n\nexport function breakLongSentence(sentence) {\n    /**\n     * Takes a tweet that is longer than the maximum character\n     * count allowed by Twitter and breaks it into an array of tweets that are\n     * all less than or equal to the maximum character count.\n     */\n\n    if (sentence.length <= TWEET_LENGTH) {\n        return sentence;\n    }\n\n    // Define a tweet length that is 3 characters shorter than the maximum\n    // length allowed by Twitter because the function will add ellipsis \"...\"\n    // to the end of the tweet to indicate that this tweet is breaking a\n    // sentence in the middle\n    const localTweetLength = TWEET_LENGTH - 3;\n\n    // Split the tweet into separate words and remove any empty elements from\n    // the array\n    const splitWords = sentence.split(\" \").filter((word) => word.length !== 0);\n\n    // A variable that will be used to build a tweet of a length less than or\n    // equal to the localTweetLength. This tweet will then be pushed to the\n    // output array of the split tweets, and the variable will be cleared for\n    // the next tweet\n    let currentTweet = \"\";\n\n    // The output array\n    let splitTweets = [];\n\n    for (const word of splitWords) {\n        // Ensure that the word is clear of any extra spaces\n        const currentWord = word.trim();\n\n        // If we encounter a word that is longer than the tweet length so it\n        // needs to be broken into separate tweets, then we push any text in\n        // the currentTweet variable to the output array and clear the variable\n        if (currentWord.length > TWEET_LENGTH) {\n            if (currentTweet.length > 0) {\n                splitTweets.push(`${currentTweet}...`);\n                currentTweet = \"\";\n            }\n\n            splitTweets = [...splitTweets, ...breakVeryLongWord(currentWord)];\n\n            continue;\n        }\n\n        if (currentTweet.length === 0) {\n            // When there is no text in the currentTweet variable, don't add\n            // a space before adding the currentWord\n            currentTweet += currentWord;\n        } else if (\n            currentTweet.length + currentWord.length + 1 <\n            localTweetLength\n        ) {\n            currentTweet += ` ${currentWord}`;\n        } else {\n            splitTweets.push(`${currentTweet}...`);\n\n            currentTweet = currentWord;\n        }\n    }\n\n    // If there is any text left over in the currentTweet that hasn't been\n    // pushed yet to the output array, push it\n    if (currentTweet.length > 0) {\n        splitTweets.push(currentTweet);\n    }\n\n    // Remove ellipsis from the last tweet. The reason we remove the ellipsis\n    // from the last tweet is that this function acts on complete sentences,\n    // so the last tweet in the array is not part of any sentence that comes\n    // after it. It is part of the thread, but it is not part of a broken\n    // sentence, so it doesn't need the ellipsis\n    const lastTweetIndex = splitTweets.length - 1;\n    splitTweets[lastTweetIndex] = removeEllipsisFromTweet(\n        splitTweets[lastTweetIndex]\n    );\n\n    return splitTweets;\n}\n\nexport function recombineShortTweets(threadArray) {\n    /**\n     * Takes an array of tweets and iterates over it combining any\n     * consecutive tweets that can fit in a single tweet\n     */\n\n    // The output array\n    let combinedTweets = [];\n\n    for (let i = 0; i < threadArray.length; i++) {\n        const curTweet = threadArray[i];\n\n        if (i === 0) {\n            combinedTweets.push(curTweet);\n\n            continue;\n        }\n\n        const lastTweetIndex = combinedTweets.length - 1;\n\n        // Get the last tweet making sure to clean it from ellipsis\n        // if it has them at the end to prepare it for the following\n        // tweet to be added if they can fit together in a single tweet\n        const lastTweet = removeEllipsisFromTweet(\n            combinedTweets[lastTweetIndex]\n        );\n\n        if (lastTweet.length + curTweet.length + 1 <= TWEET_LENGTH) {\n            // Replace the last tweet with the combination of last tweet\n            // and the current tweet\n            combinedTweets[lastTweetIndex] = `${lastTweet} ${curTweet}`;\n        } else {\n            combinedTweets.push(curTweet);\n        }\n    }\n\n    return combinedTweets;\n}\n\nfunction breakVeryLongWord(word) {\n    /**\n     * Takes any word longer than the maximum character\n     * count allowed for Twitter and splits it into several tweets.\n     * This allows the app to handle user input if the user decides to\n     * type long strings with no spaces in between.\n     */\n\n    if (word.length <= TWEET_LENGTH) {\n        return word;\n    }\n\n    // Define a tweet length that is 3 characters shorter than the maximum\n    // length allowed by Twitter because the function will add ellipsis \"...\"\n    // to the end of the tweet to indicate that this tweet is breaking a word\n    // in the middle\n    const localTweetLength = TWEET_LENGTH - 3;\n\n    // Get how many tweets are needed to include the entire word\n    const tweetCount = Math.ceil(word.length / localTweetLength);\n\n    let splitTweets = [];\n\n    for (let i = 0; i < tweetCount; i++) {\n        const sliceStart = i * localTweetLength;\n        const sliceEnd = (i + 1) * localTweetLength;\n\n        let outWord = word.slice(sliceStart, sliceEnd) + \"...\";\n\n        splitTweets.push(outWord);\n    }\n\n    return splitTweets;\n}\n\nfunction removeEllipsisFromTweet(tweet) {\n    /**\n     * Removes the ellipsis from the end of a tweet\n     */\n\n    const lastThreeCharacters = tweet.slice(tweet.length - 3);\n\n    if (lastThreeCharacters === \"...\") {\n        return tweet.slice(0, tweet.length - 3);\n    } else {\n        return tweet;\n    }\n}\n\n// Module functions exported mainly for testing purposes\nexport const msSplitter = {\n    breakVeryLongWord,\n    removeEllipsisFromTweet,\n    recombineShortTweets,\n};\n","import { TWEET_LENGTH } from \"../utils/generalConstants\";\nimport breakTextAtFullSentences from \"../utils/fullSentenceSplitter\";\nimport {\n    breakLongSentence,\n    recombineShortTweets,\n} from \"../utils/midSentenceSplitter\";\n\nexport default function splitTweet(thread) {\n    const cleanedThread = thread.trim();\n\n    // First, take care of user-defined splits\n    const userDefinedSplits = cleanedThread\n        .split(\"(---)\")\n        .map((tweet) => tweet.trim())\n        .filter((tweet) => tweet !== \"\");\n\n    // Return early if all tweets are shorter than the maximum allowed\n    // tweet length\n    if (allTweetsFitLength(userDefinedSplits)) {\n        return userDefinedSplits;\n    }\n\n    // Third, split the tweet at full sentences if the tweet is longer\n    // than the maximum length allowed\n    const fullSentencesSplit = userDefinedSplits\n        .map((tweet) => {\n            if (tweet.length <= TWEET_LENGTH) {\n                return tweet;\n            }\n\n            return breakTextAtFullSentences(tweet);\n        })\n        .flat()\n        .map((tweet) => tweet.trim());\n\n    // Return early if all tweets are shorter than the maximum allowed\n    // tweet length\n    if (allTweetsFitLength(fullSentencesSplit)) {\n        return fullSentencesSplit;\n    }\n\n    // Next, split any tweets that are still longer than the maximum\n    // allowed tweet length\n    const midSentenceSplit = fullSentencesSplit\n        .map((tweet) => {\n            if (tweet.length <= TWEET_LENGTH) {\n                return tweet;\n            }\n\n            return breakLongSentence(tweet);\n        })\n        .flat()\n        .map((tweet) => tweet.trim());\n\n    // Last, do a final pass going over the thread recombining any\n    // tweets that are too short\n    const output = recombineShortTweets(midSentenceSplit)\n        .flat()\n        .map((tweet) => tweet.trim());\n\n    return output;\n}\n\nfunction allTweetsFitLength(threadArray) {\n    /**\n     * Utility function that makes sure that the length of every tweet\n     * in an array is less than or equal to the defined tweet length\n     */\n\n    return threadArray.every((tweet) => tweet.length <= TWEET_LENGTH);\n}\n","import { UNTITLED_NAME } from \"./generalConstants\";\n\nexport function checkUserObject(userObj) {\n    return (\n        userObj !== null &&\n        isNotEmpty(userObj) &&\n        containsAllKeys(userObj, [\"name\", \"screenName\", \"profileImage\"]) &&\n        userObj.name !== UNTITLED_NAME\n    );\n}\n\nexport function isNotEmpty(obj) {\n    return Object.entries(obj).length > 0;\n}\n\nexport function containsAllKeys(obj, keysArr) {\n    const objKeys = Object.keys(obj);\n\n    for (const key of keysArr) {\n        if (!objKeys.includes(key)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import axios from \"axios\";\nimport { SERVER } from \"../utils/generalConstants\";\n\nfunction sendAPIRequest(url, method, data = undefined) {\n    /*\n     * Utility function that makes a request to the backend\n     * sending along any data that is passed as an argument.\n     */\n\n    return axios({\n        url: url,\n        method: method,\n        withCredentials: true,\n        baseURL: SERVER,\n        data: data ? data : {},\n    });\n}\n\nexport function login() {\n    /**\n     * Call the login route\n     */\n\n    return sendAPIRequest(\"/request_token\", \"get\");\n}\n\nexport function logout() {\n    /**\n     * Call the logout route\n     */\n\n    return sendAPIRequest(\"/logout\", \"get\");\n}\n\nexport function publishThread(thread) {\n    /**\n     * Call the publish_thread route\n     */\n\n    return sendAPIRequest(\"/publish_thread\", \"post\", { tweets: thread });\n}\n","function getStorage(name) {\n    /**\n     * Returns either the window's localStorage or sessionStorage\n     * depending on the name passed by the user.\n     *\n     * If the name is invalid, then it returns undefined.\n     */\n\n    if (name === \"local\") {\n        return localStorage;\n    } else if (name === \"session\") {\n        return sessionStorage;\n    } else {\n        return undefined;\n    }\n}\n\nexport function setStorageItem(storeName, itemName, itemValue) {\n    /**\n     * A thin wrapper around the setItem method which converts any\n     * object passed to it in the itemValue argument to a string\n     * that can be saved in the storage.\n     */\n\n    const storage = getStorage(storeName);\n\n    if (storage) {\n        storage.setItem(itemName, JSON.stringify(itemValue));\n    }\n}\n\nexport function getStorageItem(storeName, itemName) {\n    /**\n     * A thin wrapper around the setItem method which converts the\n     * string representation of the value stored in the item into\n     * a Javascript object.\n     */\n\n    const storage = getStorage(storeName);\n\n    if (storage) {\n        return JSON.parse(storage.getItem(itemName));\n    }\n}\n","import { useState, useEffect, useCallback, createRef } from \"react\";\nimport { makeStyles, ThemeProvider } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport queryString from \"query-string\";\nimport darkTheme from \"./themes/threadder-dark-theme\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport Header from \"./components/Header\";\nimport TweetInput from \"./components/TweetInput\";\nimport ThreadViewer from \"./components/ThreadViewer\";\nimport MessagesDialog from \"./components/MessagesDialog\";\nimport CustomAlert from \"./components/CustomAlert\";\nimport splitTweet from \"./controllers/tweetSplitter\";\nimport { checkUserObject } from \"./utils/objectIntegrityCheckers\";\nimport { login, logout, publishThread } from \"./controllers/APICalls\";\nimport { setStorageItem, getStorageItem } from \"./controllers/storageWrappers\";\nimport { insertIntoText } from \"./controllers/textManip\";\nimport {\n    UNTITLED_NAME,\n    UNTITLED_SCREEN_NAME,\n    UNTITLED_PROFILE_IMAGE,\n} from \"./utils/generalConstants\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        /**\n         * Styles that apply to the main Container component of the App\n         */\n        height: \"100vh\",\n        maxHeight: \"100vh\",\n    },\n    gridContainer: {\n        /**\n         * A class for the main grid layout of the App. It organises all\n         * the main elements of the App in a column layout.\n         */\n        flexFlow: \"column nowrap\",\n        height: \"100%\",\n    },\n    appHeader: {\n        flex: 0,\n    },\n    appView: {\n        flex: 1,\n        [theme.breakpoints.up(\"md\")]: {\n            display: \"flex\",\n            flexFlow: \"row nowrap\",\n            gap: theme.spacing(1.5),\n        },\n    },\n    mainArea: {\n        height: \"100%\",\n    },\n    hiddenOverflow: {\n        overflow: \"hidden\",\n    },\n    loggedInSuccess: {\n        color: theme.palette.primary.contrastText,\n        textAlign: \"center\",\n        fontWeight: \"normal\",\n    },\n}));\n\nexport default function App(props) {\n    const classes = useStyles();\n\n    const untitledUser = {\n        name: UNTITLED_NAME,\n        screenName: UNTITLED_SCREEN_NAME,\n        profileImage: UNTITLED_PROFILE_IMAGE,\n    };\n\n    /* APP STATE */\n    const [alertVisibility, setAlertVisibility] = useState(false);\n    const [alertSeverity, setAlertSeverity] = useState(\"error\");\n    const [alertMessage, setAlertMessage] = useState(\"\");\n\n    // Feedback dialog states\n    const [dialogOpen, setDialogOpen] = useState(false);\n    const [dialogMessage, setDialogMessage] = useState(\n        \"This is an empty dialog\"\n    );\n\n    const [loggedIn, setLoggedIn] = useState(\n        getStorageItem(\"session\", \"loggedIn\") || false\n    );\n    const [user, setUser] = useState(\n        getStorageItem(\"session\", \"user\") || untitledUser\n    );\n    const [tweetText, setTweetText] = useState(\n        getStorageItem(\"session\", \"tweetText\") || \"\"\n    );\n    const [cursorPosition, setCursorPosition] = useState({\n        start: tweetText.length,\n        end: tweetText.length,\n    });\n    const [thread, setThread] = useState([]);\n    const [editing, setEditing] = useState(true);\n    /* END APP STATE */\n\n    /* COMPONENT REFS */\n    // createRef is used rather than useRef because the ref is\n    // being forwarded, and useRef doesn't seem to allow for\n    // ref forwarding.\n    const tweetInputRef = createRef();\n    /* END COMPONENT REFS */\n\n    /* EVENT HANDLERS AND FUNCTIONS */\n    const updateTweet = (event) => {\n        /**\n         * Handles user input in the textarea where the user\n         * types the tweet they want to split into a thread.\n         */\n\n        const text = event.target.value;\n\n        setTweetText(text);\n\n        setCursorPosition({\n            start: event.target.selectionStart,\n            end: event.target.selectionEnd,\n        });\n    };\n    const updateCursorPosition = (event) => {\n        const start = event.target.selectionStart;\n        const end = event.target.selectionEnd;\n\n        setCursorPosition({ start, end });\n    };\n    const insertTextAtCursor = (text) => {\n        const [updatedText, newPos] = insertIntoText(\n            tweetText,\n            cursorPosition,\n            text\n        );\n\n        setCursorPosition({ start: newPos, end: newPos });\n\n        setTweetText(updatedText);\n    };\n    const insertEmoji = (emoji) => {\n        insertTextAtCursor(emoji.native);\n    };\n    const addSplit = () => {\n        insertTextAtCursor(\"\\n(---)\\n\");\n    };\n    const clearTweet = () => {\n        setTweetText(\"\");\n    };\n    const toggleEditing = () => {\n        /**\n         * Handles switching between editing the tweet and\n         * viewing the thread when the app is used on mobile\n         * phones\n         */\n\n        setEditing(!editing);\n    };\n    const loginHandler = () => {\n        showDialog(\"Please wait while we try to log you into your account\");\n\n        login()\n            .then((response) => {\n                document.location.href = response.data.redirect;\n            })\n            .catch((err) => {\n                console.log(err);\n\n                const errorMessage =\n                    typeof err === \"string\" ? err : \"Login failed\";\n\n                displayAlert(\"error\", errorMessage);\n            })\n            .finally(closeDialog);\n    };\n    const logoutHandler = () => {\n        /**\n         * Calls the logout API endpoint and resets the loggedIn\n         * and user states to their initial values.\n         */\n\n        logout()\n            .then(() => {\n                displayAlert(\"success\", \"You are now logged out\");\n\n                setLoggedIn(false);\n                setUser(untitledUser);\n            })\n            .catch((err) => {\n                console.log(err);\n\n                const errorMessage =\n                    typeof err === \"string\" ? err : \"Logout failed\";\n\n                displayAlert(\"error\", errorMessage);\n            });\n    };\n    const publishTweets = useCallback(() => {\n        /**\n         * A helper function that handles calling the function\n         * that sends the thread to the backend and clears the\n         * tweet input textarea if the thread was published\n         * successfully.\n         */\n\n        showDialog(\"Hold tight while we publish your thread\");\n\n        publishThread(thread)\n            .then(() => {\n                displayAlert(\"success\", \"Thread published successfully\");\n\n                setTweetText(\"\");\n            })\n            .catch((err) => {\n                console.log(err);\n\n                const errorMessage =\n                    typeof err === \"string\"\n                        ? err\n                        : \"Failed to publish your thread\";\n\n                displayAlert(\"error\", errorMessage);\n            })\n            .finally(closeDialog);\n    }, [thread]);\n    const postLogin = useCallback(() => {\n        /**\n         * Checks if the thread needs to be published once\n         * the login is successful. If it does, then it\n         * publishes it.\n         *\n         * This happens when the user clicks the Publish\n         * Thread button without logging in, which would\n         * start the login sequence.\n         */\n        if (getStorageItem(\"session\", \"publishAfterLogin\")) {\n            setStorageItem(\"session\", \"publishAfterLogin\", false);\n\n            publishTweets();\n        }\n    }, [publishTweets]);\n    const showDialog = (message) => {\n        /**\n         * Opens the modal dialog with the specified message.\n         */\n\n        setDialogMessage(message);\n        setDialogOpen(true);\n    };\n    const closeDialog = () => {\n        /**\n         * Closes the modal dialog.\n         */\n\n        setDialogOpen(false);\n    };\n    const publishThreadHandler = () => {\n        /**\n         * Handles the click event of the Publish Thread button.\n         * If the user is already logged in, then it just publishes\n         * the thread. Otherwise, it sets the publishAfterLogin\n         * item in the sessionStorage to true and initiates the\n         * login process.\n         *\n         * The publishAfterLogin sessionStorage item determines\n         * whether the application needs to publish a thread after\n         * the user logs in successfully.\n         */\n\n        if (loggedIn) {\n            publishTweets();\n        } else {\n            setStorageItem(\"session\", \"publishAfterLogin\", true);\n\n            loginHandler();\n        }\n    };\n    const displayAlert = (level, message) => {\n        setAlertVisibility(true);\n\n        setAlertSeverity(level);\n\n        setAlertMessage(message);\n    };\n    /* END EVENT HANDLERS AND FUNCTIONS */\n\n    /* SIDE EFFECTS */\n    // Once a login attempt is complete and the app reloads, check\n    // the session store to display the appropriate alert depending\n    // on whether the attempt was successful or not\n    useEffect(() => {\n        if (getStorageItem(\"session\", \"loginSuccessMessage\")) {\n            setStorageItem(\"session\", \"loginSuccessMessage\", false);\n\n            displayAlert(\"success\", \"You are now logged in\");\n        } else if (getStorageItem(\"session\", \"loginFailMessage\")) {\n            setStorageItem(\"session\", \"loginFailMessage\", false);\n\n            displayAlert(\"error\", \"Login failed\");\n        }\n    }, []);\n\n    // When the backend redirects to the app, set the user to logged\n    // in if the process was successful. It also sets some values in\n    // the session storage for the alerts that will need to be displayed\n    // in the UI once the login attempt is complete\n    useEffect(() => {\n        if (document.location.search !== \"\") {\n            const user = queryString.parse(document.location.search);\n\n            document.location.search = \"\";\n\n            if (checkUserObject(user)) {\n                setLoggedIn(true);\n                setUser(user);\n\n                setStorageItem(\"session\", \"loginSuccessMessage\", true);\n            } else {\n                setStorageItem(\"session\", \"loginFailMessage\", true);\n            }\n        }\n    }, [postLogin]);\n\n    // On every update, make sure that the TweetInput area has its\n    // cursor in the correct place. This is to ensure that, when the\n    // user adds an emoji in the middle of any text that already\n    // exists, the cursor doesn't jump to the end\n    useEffect(() => {\n        if (tweetInputRef.current) {\n            tweetInputRef.current.selectionStart = cursorPosition.start;\n            tweetInputRef.current.selectionEnd = cursorPosition.end;\n        }\n    });\n\n    // Give focus to the tweet input area on page load and whenever\n    // the tweet input is re-rendered\n    useEffect(() => {\n        if (tweetInputRef.current) {\n            tweetInputRef.current.focus();\n        }\n    }, [tweetInputRef]);\n\n    // Update the session storage when the logged in state changes\n    useEffect(() => {\n        setStorageItem(\"session\", \"loggedIn\", loggedIn);\n    }, [loggedIn]);\n\n    // Update the session storage when the user state changes\n    useEffect(() => {\n        setStorageItem(\"session\", \"user\", user);\n    }, [user]);\n\n    // When the tweetText is updated, update the thread state\n    // and store the tweetText in the sessionStorage to ensure\n    // it persists across reloads\n    useEffect(() => {\n        if (tweetText.length === 0) {\n            setThread([]);\n        } else {\n            setThread(splitTweet(tweetText));\n        }\n\n        setStorageItem(\"session\", \"tweetText\", tweetText);\n    }, [tweetText]);\n\n    // When the thread is updated, store it in the sessionStorage\n    // to ensure it persists across reloads\n    useEffect(() => {\n        setStorageItem(\"session\", \"thread\", thread);\n    }, [thread]);\n\n    useEffect(() => {\n        if (alertVisibility) {\n            let closeAlertTimeout;\n\n            if (closeAlertTimeout) {\n                clearTimeout(closeAlertTimeout);\n            }\n\n            closeAlertTimeout = setTimeout(() => {\n                setAlertVisibility(false);\n            }, 3000);\n\n            return () => clearTimeout(closeAlertTimeout);\n        }\n    }, [alertVisibility]);\n    /* END SIDE EFFECTS */\n\n    return (\n        <ThemeProvider theme={darkTheme}>\n            <CssBaseline>\n                <CustomAlert\n                    visible={alertVisibility}\n                    severity={alertSeverity}\n                    msg={alertMessage}\n                />\n\n                <MessagesDialog open={dialogOpen} msg={dialogMessage} />\n\n                <Container className={classes.root}>\n                    <Grid\n                        container\n                        spacing={3}\n                        className={classes.gridContainer}\n                    >\n                        {/* App Header grid item */}\n                        <Grid item xs={12} className={classes.appHeader}>\n                            <Header\n                                user={user}\n                                loggedIn={loggedIn}\n                                login={loginHandler}\n                                logout={logoutHandler}\n                            />\n                        </Grid>\n\n                        {/* Grid item that holds both TweetInput and the ThreadViewer */}\n                        <Grid\n                            item\n                            xs={12}\n                            className={classNames(\n                                classes.appView,\n                                classes.hiddenOverflow\n                            )}\n                        >\n                            {/* TweetInput item which gets hidden in mobile views if not editing */}\n                            <Hidden smDown={!editing}>\n                                <Grid\n                                    item\n                                    xs={12}\n                                    md={7}\n                                    className={classNames(\n                                        classes.mainArea,\n                                        classes.hiddenOverflow\n                                    )}\n                                >\n                                    <TweetInput\n                                        tweetText={tweetText}\n                                        handleTweetInput={updateTweet}\n                                        handleCursorPositionChange={\n                                            updateCursorPosition\n                                        }\n                                        pickEmojiHandler={insertEmoji}\n                                        splitTweetHandler={addSplit}\n                                        clearTweetHandler={clearTweet}\n                                        thread={thread}\n                                        viewThreadHandler={toggleEditing}\n                                        ref={tweetInputRef}\n                                    />\n                                </Grid>\n                            </Hidden>\n\n                            {/* ThreadViewer item which gets hidden in mobile views when editing */}\n                            <Hidden smDown={editing}>\n                                <Grid\n                                    item\n                                    xs={12}\n                                    md={5}\n                                    className={classNames(\n                                        classes.mainArea,\n                                        classes.hiddenOverflow\n                                    )}\n                                >\n                                    <ThreadViewer\n                                        user={user}\n                                        thread={thread}\n                                        editThreadHandler={toggleEditing}\n                                        publishHandler={publishThreadHandler}\n                                    />\n                                </Grid>\n                            </Hidden>\n                        </Grid>\n                    </Grid>\n                </Container>\n            </CssBaseline>\n        </ThemeProvider>\n    );\n}\n","export function insertIntoText(text, cursorObj, textToAdd) {\n    const before = text.slice(0, cursorObj.start);\n    const after = text.slice(cursorObj.end);\n\n    const updatedText = before + textToAdd + after;\n\n    const newPos = cursorObj.start + textToAdd.length;\n\n    return [updatedText, newPos];\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./styles/index.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}