{"version":3,"sources":["themes/threadder-dark-theme.js","components/StyledButton.js","components/StyledMenu.js","components/LoggedInMenu.js","components/Header.js","components/InputToolbar.js","components/TweetInput.js","components/Tweet.js","components/ThreadViewer.js","components/MessagesDialog.js","components/CustomAlert.js","utils/generalConstants.js","utils/fullSentenceSplitter.js","utils/midSentenceSplitter.js","controllers/tweetSplitter.js","utils/objectIntegrityCheckers.js","controllers/APICalls.js","controllers/storageWrappers.js","App.js","index.js"],"names":["primaryPalette","main","light","dark","contrastText","contrastText2","backgroundPalette","paper","default","darkTheme","createMuiTheme","palette","primary","secondary","hover","inactive","inactiveText","background","spacing","shape","borderRadius","useStyles","makeStyles","theme","styledButton","color","backgroundColor","StyledButton","props","classes","allClasses","classNames","className","Button","menuList","border","StyledMenu","menuClasses","Menu","menuItem","LoggedInMenu","useState","anchorEl","setAnchorEl","closeMenu","Box","IconButton","size","onClick","event","currentTarget","Avatar","src","user","profileImage","alt","name","id","getContentAnchorEl","anchorReference","anchorOrigin","horizontal","vertical","transformOrigin","open","Boolean","onClose","autoFocus","MenuItem","screenName","window","logout","toolbar","height","padding","title","flexGrow","Header","logInBtn","variant","login","AppBar","position","Toolbar","Typography","loggedIn","root","marginTop","InputToolbar","emojiPickerHandler","flexFlow","fullHeight","containerWithShadow","boxShadow","shadows","expandingFlexItem","flex","fixedSizeFlexItem","textareaContainer","display","paddingBottom","threadTextarea","fontFamily","fontSize","resize","width","outline","statsContainer","justifyContent","statsText","emojiPicker","TweetInput","React","forwardRef","ref","pickerOpen","setPickerOpen","handleClickAway","target","Grid","container","item","xs","Container","onChange","handleTweetInput","onSelect","handleCursorPositionChange","placeholder","value","tweetText","ClickAwayListener","onClickAway","style","set","data","emoji","showPreview","perLine","handleEmojiPicking","stopPropagation","prevState","length","thread","Hidden","mdUp","fullWidth","viewThreadHandler","marginBottom","verticalGrid","centerVerticalGridItems","alignItems","threadLineContainer","threadLine","tweetContainer","marginLeft","resetFont","defaultTextColor","userName","fontWeight","userHandle","margin","whiteSpace","overflowWrap","hiddenOverflow","overflow","Tweet","text","autoOverflow","tweetsContainer","buttonRowContainer","gap","ThreadViewer","tweets","map","tweet","index","arr","editThreadHandler","publishHandler","disabled","dialogText","textAlign","MessagesDialog","Dialog","DialogContent","DialogContentText","msg","zIndex","left","top","CustomAlert","Collapse","in","visible","Alert","severity","dotenv","config","TWEET_LENGTH","SERVER","UNTITLED_NAME","trimTopAndTailSpaces","replace","splitAtNewlines","split","filter","idx","splitAtFullstops","combineSentencesIntoTweets","sentenceArray","combiningCharacter","outArray","i","lastSentenceIndex","lastSentence","curSentence","startsWith","push","recombineShortTweets","threadArray","combinedTweets","curTweet","lastTweetIndex","lastTweet","removeEllipsisFromTweet","breakVeryLongWord","word","tweetCount","Math","ceil","splitTweets","sliceStart","sliceEnd","outWord","slice","splitTweet","userDefinedSplits","trim","allTweetsFitLength","fullSentencesSplit","newLineSplit","every","flat","breakTextAtFullSentences","sentence","splitWords","currentTweet","currentWord","breakLongSentence","checkUserObject","userObj","obj","Object","entries","keysArr","objKeys","keys","key","includes","containsAllKeys","sendAPIRequest","url","method","undefined","axios","withCredentials","baseURL","getStorage","localStorage","sessionStorage","setStorageItem","storeName","itemName","itemValue","storage","setItem","JSON","stringify","getStorageItem","parse","getItem","maxHeight","breakpoints","down","gridContainer","appHeader","appView","up","mainArea","loggedInSuccess","App","untitledUser","alertVisibility","setAlertVisibility","alertSeverity","setAlertSeverity","alertMessage","setAlertMessage","dialogOpen","setDialogOpen","dialogMessage","setDialogMessage","setLoggedIn","setUser","setTweetText","start","end","cursorPosition","setCursorPosition","setThread","editing","setEditing","tweetInputRef","createRef","toggleEditing","loginHandler","showDialog","then","response","document","location","href","redirect","catch","err","console","log","displayAlert","finally","closeDialog","publishTweets","useCallback","publishThread","postLogin","message","level","useEffect","search","queryString","current","setSelectionRange","focus","closeAlertTimeout","clearTimeout","setTimeout","ThemeProvider","CssBaseline","smDown","md","selectionStart","selectionEnd","beforeEmoji","afterEmoji","updatedText","native","newPos","ReactDOM","render","StrictMode","querySelector"],"mappings":"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","file":"static/js/main.e35abb68.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core/styles\";\n\n/*\n * Threadder's main theme\n */\n\nconst primaryPalette = {\n    main: \"#283845\",\n    light: \"#395164\",\n    dark: \"#22303c\",\n    contrastText: \"#ffffff\",\n    contrastText2: \"#e5e5e5\",\n};\n\nconst secondaryPalette = {\n    main: \"#ffc107\",\n    light: \"#ffd147\",\n    dark: \"#c97d02\",\n    hover: \"#ffa042\",\n    inactive: \"#432a01\",\n    contrastText: \"#14213d\",\n    inactiveText: \"#111111\",\n};\n\nconst backgroundPalette = {\n    paper: primaryPalette.light,\n    default: \"#202c39\",\n};\n\nconst darkTheme = createMuiTheme({\n    palette: {\n        primary: primaryPalette,\n        secondary: secondaryPalette,\n        background: backgroundPalette,\n    },\n    spacing: 4,\n    shape: {\n        borderRadius: 2,\n    },\n});\n\nexport default darkTheme;\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport Button from \"@material-ui/core/Button\";\n\n/*\n * A component that applies custom styling to Material UI's\n * default Button component. It passes all the props added\n * to it to the enclosed Button component.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    styledButton: {\n        \"&:disabled\": {\n            color: theme.palette.secondary.inactiveText,\n            backgroundColor: theme.palette.secondary.inactive,\n        },\n        \"&:hover\": {\n            backgroundColor: theme.palette.secondary.hover,\n        },\n    },\n}));\n\nexport default function StyledButton(props) {\n    const classes = useStyles();\n\n    /*\n     * Since the custom styling is applied by passing a class\n     * to the className prop, which only accepts one class,\n     * we use the classNames NPM package to merge the custom\n     * styling class with any classes passed by someone using\n     * the component who might want to further customise its\n     * display.\n     */\n    const allClasses = classNames(props.className, classes.styledButton);\n\n    return <Button {...props} className={allClasses} />;\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport Menu from \"@material-ui/core/Menu\";\n\n/*\n * Component that applies custom styling to Material UI's\n * Menu component. It passes all of its props to the\n * enclosed Menu component.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    menuList: {\n        border: `solid 1px ${theme.palette.primary.dark}`,\n    },\n}));\n\nexport default function StyledMenu(props) {\n    const classes = useStyles();\n\n    const menuClasses = {\n        paper: classes.menuList,\n    };\n\n    return <Menu classes={menuClasses} {...props} />;\n}\n","import { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport StyledMenu from \"./StyledMenu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\n/*\n * The styles and implementation of the menu component that\n * is rendered when the user is logged in to their Twitter\n * account.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    menuList: {\n        border: `solid 1px ${theme.palette.primary.dark}`,\n    },\n    menuItem: {\n        color: theme.palette.primary.contrastText,\n        \"&:hover\": {\n            color: theme.palette.secondary.contrastText,\n            backgroundColor: theme.palette.secondary.main,\n        },\n    },\n}));\n\nexport default function LoggedInMenu(props) {\n    const classes = useStyles();\n\n    /* COMPONENT STATE */\n    // Generate the anchor element which will be used to trigger the menu\n    const [anchorEl, setAnchorEl] = useState(null);\n    /* END COMPONENT STATE */\n\n    /* EVENT HANDLERS */\n    const handleAvatarClick = (event) => {\n        /**\n         * This is used to set the Avatar as an anchor element for the\n         * menu. In effect, it expands the menu whenever the Avatar is\n         * clicked by the user.\n         */\n\n        // Use currentTarget instead of target to ensure that it grabs\n        // the parent div rather than any of the child elements\n        setAnchorEl(event.currentTarget);\n    };\n\n    const closeMenu = () => {\n        setAnchorEl(null);\n    };\n\n    const redirectToTwitter = () => {\n        /**\n         * Handles the click event for the Go to Twitter menu\n         * item, redirecting the logged-in user to their Twitter\n         * profile\n         */\n\n        closeMenu();\n\n        const screenName = props.user.screenName;\n\n        window.open(`https://twitter.com/${screenName}`, \"_blank\");\n\n        // document.location.href = `https://twitter.com/${screenName}`;\n    };\n\n    const logOutHandler = () => {\n        /**\n         * Handles the click event for the Logout menu item\n         */\n\n        closeMenu();\n\n        props.logout();\n    };\n    /* END EVENT HANDLERS */\n\n    return (\n        <Box>\n            <IconButton size=\"small\" onClick={handleAvatarClick}>\n                <Avatar\n                    src={props.user.profileImage}\n                    alt={`${props.user.name} profile picture`}\n                />\n            </IconButton>\n\n            <StyledMenu\n                id=\"account-settings-menu\"\n                getContentAnchorEl={null}\n                anchorEl={anchorEl}\n                anchorReference=\"anchorEl\"\n                anchorOrigin={{ horizontal: \"center\", vertical: \"bottom\" }}\n                transformOrigin={{ horizontal: \"center\", vertical: \"top\" }}\n                open={Boolean(anchorEl)}\n                onClose={closeMenu}\n                autoFocus={false}\n            >\n                <MenuItem\n                    className={classes.menuItem}\n                    onClick={redirectToTwitter}\n                >\n                    Go to Twitter\n                </MenuItem>\n\n                <MenuItem className={classes.menuItem} onClick={logOutHandler}>\n                    Log out\n                </MenuItem>\n            </StyledMenu>\n        </Box>\n    );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport StyledButton from \"./StyledButton\";\nimport LoggedInMenu from \"./LoggedInMenu\";\n\n/*\n * The styles and implementation of the app Header component.\n * It shows the app name, logo and a sign in button to allow\n * the user to log into their Twitter account.\n * When logged in, it replaces the sign in button with the\n * Twitter profile photo of the user and a menu that allows\n * them to navigate to their Twitter account directly from\n * the app or to log out.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    toolbar: {\n        height: \"1em\",\n        padding: \"1em 1.5em\",\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nexport default function Header(props) {\n    const classes = useStyles();\n\n    // The sign in StyledButton component\n    const logInBtn = (\n        <StyledButton\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={props.login}\n        >\n            Log in\n        </StyledButton>\n    );\n\n    return (\n        <AppBar position=\"relative\">\n            <Toolbar className={classes.toolbar}>\n                <Typography variant=\"h5\" className={classes.title}>\n                    Threadder\n                </Typography>\n                {props.loggedIn ? (\n                    <LoggedInMenu user={props.user} logout={props.logout} />\n                ) : (\n                    logInBtn\n                )}\n            </Toolbar>\n        </AppBar>\n    );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport EmojiEmotionsIcon from \"@material-ui/icons/EmojiEmotions\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: 0,\n        marginTop: \"0.5em\",\n    },\n}));\n\nexport default function InputToolbar(props) {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root} onClick={props.onClick}>\n            <IconButton\n                color=\"secondary\"\n                size=\"small\"\n                onClick={props.emojiPickerHandler}\n            >\n                <EmojiEmotionsIcon />\n            </IconButton>\n        </div>\n    );\n}\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport StyledButton from \"./StyledButton\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport \"./emojiPicker.css\";\nimport data from \"emoji-mart/data/twitter.json\";\nimport { NimblePicker } from \"emoji-mart\";\nimport InputToolbar from \"./InputToolbar\";\n\n/*\n * The styles and implementation of the tweet input component.\n * This component is where the user will input the text they\n * want to split into a thread of tweets.\n * It also shows some stats about the character count of the\n * text and how many tweets are generated from it.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexFlow: \"column nowrap\",\n    },\n    fullHeight: {\n        height: \"100%\",\n    },\n    containerWithShadow: {\n        boxShadow: theme.shadows[4],\n    },\n    expandingFlexItem: {\n        flex: 1,\n    },\n    fixedSizeFlexItem: {\n        flex: 0,\n    },\n    textareaContainer: {\n        display: \"flex\",\n        flexFlow: \"column nowrap\",\n        padding: \"1.5em\",\n        paddingBottom: \"0.55em\",\n        backgroundColor: theme.palette.primary.main,\n    },\n    threadTextarea: {\n        fontFamily: \"inherit\",\n        fontSize: \"inherit\",\n        resize: \"none\",\n        width: \"100%\",\n        padding: \"0.5em 0.75em\",\n        color: theme.palette.primary.contrastText,\n        backgroundColor: theme.palette.primary.main,\n        border: 0,\n        boxShadow: \"inset 0px 0px 5px 0px rgba(0, 0, 0, 0.4)\",\n        \"&:focus\": {\n            border: 0,\n            outline: 0,\n        },\n    },\n    statsContainer: {\n        padding: \"1em 1.5em\",\n        display: \"flex\",\n        flexFlow: \"row nowrap\",\n        justifyContent: \"space-between\",\n        backgroundColor: theme.palette.primary.dark,\n    },\n    statsText: {\n        color: theme.palette.primary.contrastText2,\n    },\n    emojiPicker: {\n        position: \"absolute\",\n    },\n}));\n\nconst TweetInput = React.forwardRef((props, ref) => {\n    const classes = useStyles();\n\n    const [pickerOpen, setPickerOpen] = useState(false);\n\n    const handlePickerClick = (event) => {\n        /**\n         * Handles the user click on the button the toggles\n         * the emoji picker.\n         */\n\n        // Because the span that contains the button and the\n        // picker has an onClick handler that closes the\n        // picker, we have to stop the event propagation\n        // to stop the click event from being passed from\n        // the button to the its parent. Otherwise, the picker\n        // won't open at all\n        event.stopPropagation();\n\n        setPickerOpen((prevState) => !prevState);\n    };\n\n    const handleClickAway = (event) => {\n        if (event.target === event.currentTarget) {\n            setPickerOpen(false);\n        }\n    };\n\n    return (\n        <Grid\n            container\n            spacing={2}\n            className={classNames(classes.root, classes.fullHeight)}\n        >\n            {/* GRID ITEM 01: Tweet Input Textarea and toolbar */}\n            <Grid\n                item\n                xs={12}\n                className={classNames(\n                    classes.expandingFlexItem,\n                    classes.fullHeight\n                )}\n            >\n                <Container\n                    className={classNames(\n                        classes.textareaContainer,\n                        classes.fullHeight,\n                        classes.containerWithShadow\n                    )}\n                >\n                    <textarea\n                        // autoFocus\n                        className={classNames(\n                            classes.threadTextarea,\n                            classes.fullHeight\n                        )}\n                        onChange={props.handleTweetInput}\n                        onSelect={props.handleCursorPositionChange}\n                        placeholder=\"Type your tweet here...\"\n                        value={props.tweetText}\n                        ref={ref}\n                    />\n\n                    <ClickAwayListener onClickAway={handleClickAway}>\n                        <span\n                            style={{ position: \"relative\" }}\n                            onClick={handleClickAway}\n                            id=\"input-toolbar\"\n                        >\n                            {pickerOpen && (\n                                <NimblePicker\n                                    set=\"twitter\"\n                                    data={data}\n                                    title=\"\"\n                                    emoji=\"\"\n                                    showPreview={false}\n                                    perLine={8}\n                                    onSelect={props.handleEmojiPicking}\n                                />\n                            )}\n                            <InputToolbar\n                                onClick={handleClickAway}\n                                emojiPickerHandler={handlePickerClick}\n                            />\n                        </span>\n                    </ClickAwayListener>\n                </Container>\n            </Grid>\n\n            {/* GRID ITEM 02: Status Bar */}\n            <Grid item xs={12} className={classes.fixedSizeFlexItem}>\n                <Container\n                    className={classNames(\n                        classes.statsContainer,\n                        classes.containerWithShadow\n                    )}\n                >\n                    <Typography\n                        variant=\"body2\"\n                        className={classes.statsText}\n                    >{`Characters: ${props.tweetText.length}`}</Typography>\n                    <Typography\n                        variant=\"body2\"\n                        className={classes.statsText}\n                    >{`Tweets: ${props.thread.length}`}</Typography>\n                </Container>\n            </Grid>\n\n            {/* GRID ITEM 03: View Thread Button\n            This button is hidden in the desktop view of the app */}\n            <Hidden mdUp>\n                <Grid item xs={12} className={classes.fixedSizeFlexItem}>\n                    <StyledButton\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        fullWidth\n                        onClick={props.viewThreadHandler}\n                    >\n                        View thread\n                    </StyledButton>\n                </Grid>\n            </Hidden>\n        </Grid>\n    );\n});\n\nexport default TweetInput;\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\n/*\n * The style and implementation of the Tweet component which is used\n * by the ThreadViewer to display the split tweets in a format that\n * is familiar to a Twitter user.\n * It shows a picture of the logged in user, the user's name and\n * their Twitter handle, as well as the text for each of the tweets.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        /*\n         * Styles that apply to the main container of the Tweet component.\n         * It adds a margin to the bottom of the component if there are\n         * multiple tweets displayed. If the tweet is the last one, or the\n         * only one, in the thread, then no margin is added.\n         */\n        marginBottom: \"1.5em\",\n        flexFlow: \"row nowrap\",\n        \"&:last-child\": {\n            marginBottom: 0,\n        },\n    },\n    expandingFlexItem: {\n        flex: 1,\n    },\n    fixedSizeFlexItem: {\n        flex: 0,\n    },\n    verticalGrid: {\n        display: \"flex\",\n        flexFlow: \"column nowrap\",\n    },\n    centerVerticalGridItems: {\n        alignItems: \"center\",\n    },\n    threadLineContainer: {\n        padding: 0,\n    },\n    threadLine: {\n        /*\n         * A class that controls the appearance of the line that\n         * visually connects each tweet to the following one in\n         * the thread.\n         * This lines serves no functional purpose. It is just\n         * a visual cue, that is already used by Twitter, to\n         * indicate that these tweets belong together in the same\n         * thread.\n         */\n        width: \"2px\",\n\n        // Add the marginBottom value from the root to the height\n        height: \"calc(100% + 1.5em)\",\n\n        backgroundColor: theme.palette.background.default,\n    },\n    tweetContainer: {\n        marginLeft: \"1em\",\n    },\n    resetFont: {\n        /*\n         * A helper class to make sure that an element uses the parent's\n         * font family and font size\n         */\n        fontFamily: \"inherit\",\n        fontSize: \"inherit\",\n    },\n    defaultTextColor: {\n        color: theme.palette.primary.contrastText,\n    },\n    userName: {\n        fontWeight: \"bold\",\n    },\n    userHandle: {\n        color: theme.palette.primary.contrastText2,\n        marginLeft: \"0.5em\",\n    },\n    tweetText: {\n        padding: 0,\n        margin: 0,\n        marginTop: \"0.25em\",\n\n        /*\n         * This ensures that any line breaks or extra white spaces added\n         * by the user in the TweetInput component is not discarded when\n         * displayed in the Tweet component.\n         */\n        whiteSpace: \"pre-wrap\",\n\n        overflowWrap: \"break-word\",\n    },\n    hiddenOverflow: {\n        overflow: \"hidden\",\n    },\n}));\n\nexport default function Tweet(props) {\n    const classes = useStyles();\n\n    return (\n        <Grid container className={classes.root}>\n            <Grid\n                container\n                className={classNames(\n                    classes.fixedSizeFlexItem,\n                    classes.verticalGrid,\n                    classes.centerVerticalGridItems\n                )}\n            >\n                <Grid item>\n                    <Avatar\n                        src={props.user.profileImage}\n                        alt={`${props.user.name} profile picture`}\n                    />\n                </Grid>\n\n                {/* Render a line that connects all tweets similar to\n                 * what happens on Twitter when you write a thread.\n                 * This only render if the tweet is not the last one\n                 * which is determined based on the boolean prop\n                 * 'threadLine'.\n                 */}\n                {props.threadLine && (\n                    <Grid\n                        item\n                        className={classNames(\n                            classes.expandingFlexItem,\n                            classes.threadLineContainer\n                        )}\n                    >\n                        <div className={classes.threadLine} />\n                    </Grid>\n                )}\n            </Grid>\n\n            {/* Vertical grid that contains the user information\n             * as well as the text of the tweet.\n             */}\n            <Grid\n                container\n                className={classNames(\n                    classes.expandingFlexItem,\n                    classes.verticalGrid,\n                    classes.tweetContainer,\n                    classes.hiddenOverflow\n                )}\n            >\n                {/* Grid item that includes the user information\n                 * split over two spans, one for the name and\n                 * another for the Twitter handle.\n                 */}\n                <Grid item>\n                    <span\n                        className={classNames(\n                            classes.resetFont,\n                            classes.defaultTextColor,\n                            classes.userName\n                        )}\n                    >\n                        {props.user.name}\n                    </span>\n                    <span\n                        className={classNames(\n                            classes.resetFont,\n                            classes.userHandle\n                        )}\n                    >\n                        {`@${props.user.screenName}`}\n                    </span>\n                </Grid>\n\n                {/* Grid item that includes the tweet text */}\n                <Grid item>\n                    <p\n                        className={classNames(\n                            classes.resetFont,\n                            classes.defaultTextColor,\n                            classes.tweetText\n                        )}\n                    >\n                        {props.text}\n                    </p>\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport StyledButton from \"./StyledButton\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport Tweet from \"./Tweet\";\n\n/*\n * The styles and implementation of the Thread Viewer component.\n * This component will show the tweets passed from the App\n * component using the Tweet component.\n * It also has the Publish Thread button which activates when\n * there are at least 1 tweet added.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexFlow: \"column nowrap\",\n    },\n    fullHeight: {\n        height: \"100%\",\n    },\n    containerWithShadow: {\n        boxShadow: theme.shadows[4],\n    },\n    expandingFlexItem: {\n        flex: 1,\n    },\n    fixedSizeFlexItem: {\n        flex: 0,\n    },\n    autoOverflow: {\n        overflow: \"auto\",\n    },\n    hiddenOverflow: {\n        overflow: \"hidden\",\n    },\n    tweetsContainer: {\n        padding: \"1.5em\",\n        backgroundColor: theme.palette.primary.main,\n    },\n    buttonRowContainer: {\n        display: \"flex\",\n        flexFlow: \"row nowrap\",\n        justifyContent: \"space-between\",\n        gap: \"1em\",\n        margin: 0,\n        padding: 0,\n    },\n}));\n\nexport default function ThreadViewer(props) {\n    const classes = useStyles();\n\n    const tweets = props.thread.map((tweet, index, arr) => (\n        <Tweet\n            key={tweet}\n            user={props.user}\n            text={tweet}\n            threadLine={index + 1 < arr.length}\n        />\n    ));\n\n    return (\n        <Grid\n            container\n            spacing={2}\n            className={classNames(\n                classes.root,\n                classes.fullHeight,\n                classes.hiddenOverflow\n            )}\n        >\n            {/* GRID ITEM 01: Thread List */}\n            <Grid\n                item\n                xs={12}\n                className={classNames(\n                    classes.expandingFlexItem,\n                    classes.fullHeight,\n                    classes.hiddenOverflow\n                )}\n            >\n                <Container\n                    className={classNames(\n                        classes.tweetsContainer,\n                        classes.fullHeight,\n                        classes.containerWithShadow,\n                        classes.autoOverflow\n                    )}\n                >\n                    {tweets}\n                </Container>\n            </Grid>\n\n            {/* GRID ITEM 02: Button Bar\n            The Edit Thread button will be hidden in the desktop view of the app */}\n            <Grid item xs={12} className={classes.fixedSizeFlexItem}>\n                <Container\n                    className={classNames(\n                        classes.buttonRowContainer,\n                        classes.fullHeight\n                    )}\n                >\n                    <Hidden mdUp>\n                        <StyledButton\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            fullWidth\n                            onClick={props.editThreadHandler}\n                        >\n                            Edit thread\n                        </StyledButton>\n                    </Hidden>\n\n                    <StyledButton\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        onClick={props.publishHandler}\n                        disabled={!tweets.length > 0}\n                        fullWidth\n                    >\n                        Publish thread\n                    </StyledButton>\n                </Container>\n            </Grid>\n        </Grid>\n    );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\n\nconst useStyles = makeStyles((theme) => ({\n    dialogText: {\n        color: theme.palette.primary.contrastText,\n        textAlign: \"center\",\n    },\n}));\n\nexport default function MessagesDialog(props) {\n    const classes = useStyles();\n\n    return (\n        <Dialog open={props.open}>\n            <DialogContent>\n                <DialogContentText className={classes.dialogText}>\n                    {props.msg}\n                </DialogContentText>\n            </DialogContent>\n        </Dialog>\n    );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        position: \"absolute\",\n        width: \"30%\",\n        margin: 0,\n        zIndex: 10000,\n        left: \"35%\",\n        top: 0,\n    },\n}));\n\nexport default function CustomAlert(props) {\n    const classes = useStyles();\n\n    return (\n        <Collapse in={props.visible} className={classes.root}>\n            <Alert severity={props.severity}>{props.msg}</Alert>\n        </Collapse>\n    );\n}\n","import dotenv from \"dotenv\";\n\ndotenv.config();\n\nexport const TWEET_LENGTH = 280;\nexport const SERVER =\n    process.env.NODE_ENV === \"development\"\n        ? \"http://localhost:5000\"\n        : \"https://threadder-app.herokuapp.com/\";\nexport const UNTITLED_NAME = \"Untitled User\";\nexport const UNTITLED_SCREEN_NAME = \"untitled_user\";\nexport const UNTITLED_PROFILE_IMAGE = \"\";\n","import { TWEET_LENGTH } from \"./generalConstants\";\n\nexport default function breakTextAtFullSentences(text) {\n    /**\n     * The main function of the module which will be used by\n     * the tweet splitter module.\n     *\n     * It starts by splitting the text at newline characters,\n     * then splits any tweets that are still longer than the\n     * maximum tweet length at fullstops.\n     */\n\n    const newLineSplit = combineSentencesIntoTweets(\n        splitAtNewlines(text),\n        \"\\n\"\n    );\n\n    // Return early if all tweets are shorter than the maximum\n    // character count allowed for tweets\n    if (newLineSplit.every((tweet) => tweet.length <= TWEET_LENGTH)) {\n        return newLineSplit;\n    }\n\n    // If there are tweets that are still longer than the maxmium\n    // allowed character count, attempt to split these tweets\n    // at fullstops, since a fullstop is usually an indication of\n    // a new sentence. However, make sure that sentences aren't\n    // split into extermely short tweets by recombining them\n    const fullSentenceSplit = combineSentencesIntoTweets(\n        newLineSplit\n            .map((tweet) => {\n                if (tweet.length <= TWEET_LENGTH) {\n                    return tweet;\n                }\n\n                return splitAtFullstops(tweet);\n            })\n            .flat()\n            .map((tweet) => tweet.trim())\n    );\n\n    return fullSentenceSplit;\n}\n\nfunction trimTopAndTailSpaces(text) {\n    /**\n     * Removes any spaces or tab characters from the start and end of\n     * a string. It is similar to the built-in trim() String method,\n     * but it doesn't remove newline characters like the trim() method\n     * does.\n     */\n\n    const startPattern = /^[ \\t]*/;\n    const endPattern = /[ \\t]*$/;\n\n    return text.replace(startPattern, \"\").replace(endPattern, \"\");\n}\n\nfunction splitAtNewlines(tweet) {\n    /**\n     * Takes a text and splits it into an array of tweets at the\n     * newline characters\n     */\n\n    return tweet.split(/(\\n)/).filter((tweet, idx, arr) => {\n        // This filters double newline characters keeping only\n        // one of them\n        return tweet !== \"\\n\" || (tweet === \"\\n\" && arr[idx] !== \"\\n\");\n    });\n}\n\nfunction splitAtFullstops(text) {\n    /**\n     * Takes a string that has multiple sentences ending in full stops\n     * and splits it into an array of single sentences that each contain\n     * the full stop at the end.\n     *\n     * It works by checking for any full stops that are followed by\n     * a letter or a newline character because that would mean they are\n     * at the middle of the string. It then splits the string at these\n     * full stops, which removes them from the sentences, then rejoins\n     * the whole string with a full stop followed by a space.\n     *\n     * Next, it splits the string again at any space character that is\n     * preceded by a full stop. The result of this is that each sentence\n     * would end up keeping its full stop.\n     */\n\n    /**\n     * Let's break this regex pattern down to clarify what it does exactly.\n     *\n     * The pattern is actually 2 patterns combined as alternatives.\n     *\n     * The first one is this:\n     * (?<!\\svs?)(?<=\\s\\w+[a-zA-Z]+)\\.(?=\\s*[a-zA-Z]+\\w*)\n     *\n     * (?<!\\svs?)\n     * It starts with a negative lookbehind that ensures the full stop\n     * is not preceded by the abbreviations 'v' or 'vs' for versus. This\n     * is to avoid splitting the sentence at the abbreviation since it\n     * almost always comes mid-sentence.\n     *\n     * (?<=\\s\\w+[a-zA-Z]+)\n     * Then, we have a positive lookbehind that makes sure the full stop\n     * is preceded by a string of text that is made of at least 1 alphabetical\n     * character and 1 word character (a-zA-Z0-9_). This is to avoid splitting\n     * sentences when initials are encountered. For instance, Abdelrahman\n     * M. Said shouldn't be split after the M. It also ensure that the last\n     * character before the full stop is alphabetical. This is to avoid\n     * splitting at points that separate currencies which have no symbol,\n     * and uses alphabetical letters instead. For example, EGP4.5M, won't be\n     * split, because the last character before the full stop is a digit.\n     *\n     * \\.\n     * Next, we have the pattern that matches the full stop character.\n     *\n     * (?=\\s*[a-zA-Z]+\\w*)\n     * And lastly, for the first pattern, we have a positive lookahead which\n     * ensures that the full stop is succeeded by at least 1 alphabetical\n     * character that comes immediately after it. It will also match any\n     * length of word or non-word characters that follow the alphabetical\n     * one.\n     *\n     *\n     * The second alternative is this:\n     * (?<=\\d+[\\s./-]\\d+|\\s\\d+)\\.(?=\\s*\\W*[a-zA-Z]+\\w*\\W*)\n     *\n     * (?<=\\d+[\\s./-]\\d+|\\s\\d+)\n     * This one starts with a positive lookbehind that looks for either\n     * a string of digits that is at least 1 digit long and that is preceded\n     * by a space or a sequence of digits separated by some of the separator\n     * used with dates or IP addresses such as ., -, and /.\n     *\n     * This is combined with a similar positive lookahead to the one in the\n     * previous pattern. This ensures that a sequence of digits at the end\n     * of a sentence will be captured correctly (lorem ipsum 2019.)\n     *\n     * If the sentence ends with something like an IP address (127.0.0.1.),\n     * then the pattern will only match the last full stop.\n     *\n     *\n     * The last alternative is the simplest:\n     * \\.$\n     *\n     * It matches the full stop at the end of the provided text.\n     */\n\n    const removeFullstopPattern =\n        /((?<!\\svs?)(?<=\\s\\w+[a-zA-Z]+)\\.(?=\\s*[a-zA-Z]+\\w*)|(?<=\\d+[\\s./-]\\d+|\\s\\d+)\\.(?=\\s*\\W*[a-zA-Z]+\\w*\\W*)|\\.$)/g;\n\n    return text\n        .split(removeFullstopPattern)\n        .map((tweet, idx, arr) => {\n            if (arr[idx + 1] === \".\") {\n                return `${tweet}.`;\n            } else if (tweet === \".\") {\n                return \"\";\n            } else {\n                return tweet;\n            }\n        })\n        .filter((tweet) => tweet !== \"\")\n        .map((tweet) => trimTopAndTailSpaces(tweet));\n}\n\nfunction combineSentencesIntoTweets(sentenceArray, combiningCharacter = \" \") {\n    /**\n     * Takes an array of sentences and iterates over it combining\n     * the sentences into tweets that aren't longer than 280\n     * characters. However, if one of the sentences is shorter than\n     * 70 (1/4th of 280), it will add the following sentence to it\n     * even if the combined length is longer than 280. This is to\n     * avoid having very short tweets unnecessarily. If the user\n     * wants to have short tweets, they can force a split.\n     *\n     * Any tweets longer than 280 will be handled by further functions\n     * that will eventually split them to fit the maximum character\n     * count on Twitter.\n     *\n     * It uses a combiningCharacter parameter to allow the user to\n     * define if they want a non-space character added between the\n     * two sentences. If the combiningCharacter isn't specified, it\n     * will just use a space.\n     */\n\n    // Return early if sentenceArray is empty\n    if (sentenceArray.length === 0) {\n        return [];\n    }\n\n    let outArray = [];\n\n    for (let i = 0; i < sentenceArray.length; i++) {\n        // Just add the first sentence to the output array\n        if (i === 0) {\n            outArray.push(sentenceArray[i]);\n\n            continue;\n        }\n\n        // Get the last sentence that was added to the output array\n        const lastSentenceIndex = outArray.length - 1;\n        let lastSentence = outArray[lastSentenceIndex];\n\n        const curSentence = sentenceArray[i];\n\n        if (\n            lastSentence.length <= TWEET_LENGTH / 4 ||\n            lastSentence.length + curSentence.length <= TWEET_LENGTH\n        ) {\n            // If the current sentence starts with a newline character\n            // we just concatenate it to the last sentence. Otherwise,\n            // we add the combiningCharacter after the last sentence\n            // then concatenate the current one\n            lastSentence += curSentence.startsWith(\"\\n\")\n                ? curSentence\n                : `${combiningCharacter}${curSentence}`;\n\n            outArray[lastSentenceIndex] = lastSentence;\n        } else {\n            outArray.push(sentenceArray[i]);\n        }\n    }\n\n    return outArray;\n}\n\n// Module functions exported mainly for testing purposes\nexport const fsSplitter = {\n    trimTopAndTailSpaces,\n    splitAtFullstops,\n    combineSentencesIntoTweets,\n    splitAtNewlines,\n};\n","import { TWEET_LENGTH } from \"./generalConstants\";\n\nexport function breakLongSentence(sentence) {\n    /**\n     * Takes a tweet that is longer than the maximum character\n     * count allowed by Twitter and breaks it into an array of tweets that are\n     * all less than or equal to the maximum character count.\n     */\n\n    if (sentence.length <= TWEET_LENGTH) {\n        return sentence;\n    }\n\n    // Define a tweet length that is 3 characters shorter than the maximum\n    // length allowed by Twitter because the function will add ellipsis \"...\"\n    // to the end of the tweet to indicate that this tweet is breaking a\n    // sentence in the middle\n    const localTweetLength = TWEET_LENGTH - 3;\n\n    // Split the tweet into separate words and remove any empty elements from\n    // the array\n    const splitWords = sentence.split(\" \").filter((word) => word.length !== 0);\n\n    // A variable that will be used to build a tweet of a length less than or\n    // equal to the localTweetLength. This tweet will then be pushed to the\n    // output array of the split tweets, and the variable will be cleared for\n    // the next tweet\n    let currentTweet = \"\";\n\n    // The output array\n    let splitTweets = [];\n\n    for (const word of splitWords) {\n        // Ensure that the word is clear of any extra spaces\n        const currentWord = word.trim();\n\n        // If we encounter a word that is longer than the tweet length so it\n        // needs to be broken into separate tweets, then we push any text in\n        // the currentTweet variable to the output array and clear the variable\n        if (currentWord.length > TWEET_LENGTH) {\n            if (currentTweet.length > 0) {\n                splitTweets.push(`${currentTweet}...`);\n                currentTweet = \"\";\n            }\n\n            splitTweets = [...splitTweets, ...breakVeryLongWord(currentWord)];\n\n            continue;\n        }\n\n        if (currentTweet.length === 0) {\n            // When there is no text in the currentTweet variable, don't add\n            // a space before adding the currentWord\n            currentTweet += currentWord;\n        } else if (\n            currentTweet.length + currentWord.length + 1 <\n            localTweetLength\n        ) {\n            currentTweet += ` ${currentWord}`;\n        } else {\n            splitTweets.push(`${currentTweet}...`);\n\n            currentTweet = currentWord;\n        }\n    }\n\n    // If there is any text left over in the currentTweet that hasn't been\n    // pushed yet to the output array, push it\n    if (currentTweet.length > 0) {\n        splitTweets.push(currentTweet);\n    }\n\n    // Remove ellipsis from the last tweet. The reason we remove the ellipsis\n    // from the last tweet is that this function acts on complete sentences,\n    // so the last tweet in the array is not part of any sentence that comes\n    // after it. It is part of the thread, but it is not part of a broken\n    // sentence, so it doesn't need the ellipsis\n    const lastTweetIndex = splitTweets.length - 1;\n    splitTweets[lastTweetIndex] = removeEllipsisFromTweet(\n        splitTweets[lastTweetIndex]\n    );\n\n    return splitTweets;\n}\n\nexport function recombineShortTweets(threadArray) {\n    /**\n     * Takes an array of tweets and iterates over it combining any\n     * consecutive tweets that can fit in a single tweet\n     */\n\n    // The output array\n    let combinedTweets = [];\n\n    for (let i = 0; i < threadArray.length; i++) {\n        const curTweet = threadArray[i];\n\n        if (i === 0) {\n            combinedTweets.push(curTweet);\n\n            continue;\n        }\n\n        const lastTweetIndex = combinedTweets.length - 1;\n\n        // Get the last tweet making sure to clean it from ellipsis\n        // if it has them at the end to prepare it for the following\n        // tweet to be added if they can fit together in a single tweet\n        const lastTweet = removeEllipsisFromTweet(\n            combinedTweets[lastTweetIndex]\n        );\n\n        if (lastTweet.length + curTweet.length + 1 <= TWEET_LENGTH) {\n            // Replace the last tweet with the combination of last tweet\n            // and the current tweet\n            combinedTweets[lastTweetIndex] = `${lastTweet} ${curTweet}`;\n        } else {\n            combinedTweets.push(curTweet);\n        }\n    }\n\n    return combinedTweets;\n}\n\nfunction breakVeryLongWord(word) {\n    /**\n     * Takes any word longer than the maximum character\n     * count allowed for Twitter and splits it into several tweets.\n     * This allows the app to handle user input if the user decides to\n     * type long strings with no spaces in between.\n     */\n\n    if (word.length <= TWEET_LENGTH) {\n        return word;\n    }\n\n    // Define a tweet length that is 3 characters shorter than the maximum\n    // length allowed by Twitter because the function will add ellipsis \"...\"\n    // to the end of the tweet to indicate that this tweet is breaking a word\n    // in the middle\n    const localTweetLength = TWEET_LENGTH - 3;\n\n    // Get how many tweets are needed to include the entire word\n    const tweetCount = Math.ceil(word.length / localTweetLength);\n\n    let splitTweets = [];\n\n    for (let i = 0; i < tweetCount; i++) {\n        const sliceStart = i * localTweetLength;\n        const sliceEnd = (i + 1) * localTweetLength;\n\n        let outWord = word.slice(sliceStart, sliceEnd) + \"...\";\n\n        splitTweets.push(outWord);\n    }\n\n    return splitTweets;\n}\n\nfunction removeEllipsisFromTweet(tweet) {\n    /**\n     * Removes the ellipsis from the end of a tweet\n     */\n\n    const lastThreeCharacters = tweet.slice(tweet.length - 3);\n\n    if (lastThreeCharacters === \"...\") {\n        return tweet.slice(0, tweet.length - 3);\n    } else {\n        return tweet;\n    }\n}\n\n// Module functions exported mainly for testing purposes\nexport const msSplitter = {\n    breakVeryLongWord,\n    removeEllipsisFromTweet,\n    recombineShortTweets,\n};\n","import { TWEET_LENGTH } from \"../utils/generalConstants\";\nimport breakTextAtFullSentences from \"../utils/fullSentenceSplitter\";\nimport {\n    breakLongSentence,\n    recombineShortTweets,\n} from \"../utils/midSentenceSplitter\";\n\nexport default function splitTweet(thread) {\n    const cleanedThread = thread.trim();\n\n    // First, take care of user-defined splits\n    const userDefinedSplits = cleanedThread\n        .split(\"(---)\")\n        .map((tweet) => tweet.trim())\n        .filter((tweet) => tweet !== \"\");\n\n    // Return early if all tweets are shorter than the maximum allowed\n    // tweet length\n    if (allTweetsFitLength(userDefinedSplits)) {\n        return userDefinedSplits;\n    }\n\n    // Third, split the tweet at full sentences if the tweet is longer\n    // than the maximum length allowed\n    const fullSentencesSplit = userDefinedSplits\n        .map((tweet) => {\n            if (tweet.length <= TWEET_LENGTH) {\n                return tweet;\n            }\n\n            return breakTextAtFullSentences(tweet);\n        })\n        .flat()\n        .map((tweet) => tweet.trim());\n\n    // Return early if all tweets are shorter than the maximum allowed\n    // tweet length\n    if (allTweetsFitLength(fullSentencesSplit)) {\n        return fullSentencesSplit;\n    }\n\n    // Next, split any tweets that are still longer than the maximum\n    // allowed tweet length\n    const midSentenceSplit = fullSentencesSplit\n        .map((tweet) => {\n            if (tweet.length <= TWEET_LENGTH) {\n                return tweet;\n            }\n\n            return breakLongSentence(tweet);\n        })\n        .flat()\n        .map((tweet) => tweet.trim());\n\n    // Last, do a final pass going over the thread recombining any\n    // tweets that are too short\n    const output = recombineShortTweets(midSentenceSplit)\n        .flat()\n        .map((tweet) => tweet.trim());\n\n    return output;\n}\n\nfunction allTweetsFitLength(threadArray) {\n    /**\n     * Utility function that makes sure that the length of every tweet\n     * in an array is less than or equal to the defined tweet length\n     */\n\n    return threadArray.every((tweet) => tweet.length <= TWEET_LENGTH);\n}\n","import { UNTITLED_NAME } from \"./generalConstants\";\n\nexport function checkUserObject(userObj) {\n    return (\n        userObj !== null &&\n        isNotEmpty(userObj) &&\n        containsAllKeys(userObj, [\"name\", \"screenName\", \"profileImage\"]) &&\n        userObj.name !== UNTITLED_NAME\n    );\n}\n\nexport function isNotEmpty(obj) {\n    return Object.entries(obj).length > 0;\n}\n\nexport function containsAllKeys(obj, keysArr) {\n    const objKeys = Object.keys(obj);\n\n    for (const key of keysArr) {\n        if (!objKeys.includes(key)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import axios from \"axios\";\nimport { SERVER } from \"../utils/generalConstants\";\n\nfunction sendAPIRequest(url, method, data = undefined) {\n    /*\n     * Utility function that makes a request to the backend\n     * sending along any data that is passed as an argument.\n     */\n\n    return axios({\n        url: url,\n        method: method,\n        withCredentials: true,\n        baseURL: SERVER,\n        data: data ? data : {},\n    });\n}\n\nexport function login() {\n    /**\n     * Call the login route\n     */\n\n    return sendAPIRequest(\"/request_token\", \"get\");\n}\n\nexport function logout() {\n    /**\n     * Call the logout route\n     */\n\n    return sendAPIRequest(\"/logout\", \"get\");\n}\n\nexport function publishThread(thread) {\n    /**\n     * Call the publish_thread route\n     */\n\n    return sendAPIRequest(\"/publish_thread\", \"post\", { tweets: thread });\n}\n","function getStorage(name) {\n    /**\n     * Returns either the window's localStorage or sessionStorage\n     * depending on the name passed by the user.\n     *\n     * If the name is invalid, then it returns undefined.\n     */\n\n    if (name === \"local\") {\n        return localStorage;\n    } else if (name === \"session\") {\n        return sessionStorage;\n    } else {\n        return undefined;\n    }\n}\n\nexport function setStorageItem(storeName, itemName, itemValue) {\n    /**\n     * A thin wrapper around the setItem method which converts any\n     * object passed to it in the itemValue argument to a string\n     * that can be saved in the storage.\n     */\n\n    const storage = getStorage(storeName);\n\n    if (storage) {\n        storage.setItem(itemName, JSON.stringify(itemValue));\n    }\n}\n\nexport function getStorageItem(storeName, itemName) {\n    /**\n     * A thin wrapper around the setItem method which converts the\n     * string representation of the value stored in the item into\n     * a Javascript object.\n     */\n\n    const storage = getStorage(storeName);\n\n    if (storage) {\n        return JSON.parse(storage.getItem(itemName));\n    }\n}\n","import { useState, useEffect, useCallback, createRef } from \"react\";\nimport { makeStyles, ThemeProvider } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport queryString from \"query-string\";\nimport darkTheme from \"./themes/threadder-dark-theme\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport Header from \"./components/Header\";\nimport TweetInput from \"./components/TweetInput\";\nimport ThreadViewer from \"./components/ThreadViewer\";\nimport MessagesDialog from \"./components/MessagesDialog\";\nimport CustomAlert from \"./components/CustomAlert\";\nimport splitTweet from \"./controllers/tweetSplitter\";\nimport { checkUserObject } from \"./utils/objectIntegrityCheckers\";\nimport { login, logout, publishThread } from \"./controllers/APICalls\";\nimport { setStorageItem, getStorageItem } from \"./controllers/storageWrappers\";\nimport {\n    UNTITLED_NAME,\n    UNTITLED_SCREEN_NAME,\n    UNTITLED_PROFILE_IMAGE,\n} from \"./utils/generalConstants\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        /**\n         * Styles that apply to the main Container component of the App\n         */\n        height: \"100vh\",\n        maxHeight: \"100vh\",\n        [theme.breakpoints.down(\"sm\")]: {\n            height: \"93vh\",\n            maxHeight: \"93vh\",\n        },\n    },\n    gridContainer: {\n        /**\n         * A class for the main grid layout of the App. It organises all\n         * the main elements of the App in a column layout.\n         */\n        flexFlow: \"column nowrap\",\n        height: \"100%\",\n    },\n    appHeader: {\n        flex: 0,\n    },\n    appView: {\n        flex: 1,\n        [theme.breakpoints.up(\"md\")]: {\n            display: \"flex\",\n            flexFlow: \"row nowrap\",\n            gap: theme.spacing(1.5),\n        },\n    },\n    mainArea: {\n        height: \"100%\",\n    },\n    hiddenOverflow: {\n        overflow: \"hidden\",\n    },\n    loggedInSuccess: {\n        color: theme.palette.primary.contrastText,\n        textAlign: \"center\",\n        fontWeight: \"normal\",\n    },\n}));\n\nexport default function App(props) {\n    const classes = useStyles();\n\n    const untitledUser = {\n        name: UNTITLED_NAME,\n        screenName: UNTITLED_SCREEN_NAME,\n        profileImage: UNTITLED_PROFILE_IMAGE,\n    };\n\n    /* APP STATE */\n    const [alertVisibility, setAlertVisibility] = useState(false);\n    const [alertSeverity, setAlertSeverity] = useState(\"error\");\n    const [alertMessage, setAlertMessage] = useState(\"\");\n\n    // Feedback dialog states\n    const [dialogOpen, setDialogOpen] = useState(false);\n    const [dialogMessage, setDialogMessage] = useState(\n        \"This is an empty dialog\"\n    );\n\n    const [loggedIn, setLoggedIn] = useState(\n        getStorageItem(\"session\", \"loggedIn\") || false\n    );\n    const [user, setUser] = useState(\n        getStorageItem(\"session\", \"user\") || untitledUser\n    );\n    const [tweetText, setTweetText] = useState(\n        getStorageItem(\"session\", \"tweetText\") || \"\"\n    );\n    const [cursorPosition, setCursorPosition] = useState({\n        start: tweetText.length,\n        end: tweetText.length,\n    });\n    const [thread, setThread] = useState([]);\n    const [editing, setEditing] = useState(true);\n    /* END APP STATE */\n\n    /* COMPONENT REFS */\n    // createRef is used rather than useRef because the ref is\n    // being forwarded, and useRef doesn't seem to allow for\n    // ref forwarding.\n    const tweetInputRef = createRef();\n    /* END COMPONENT REFS */\n\n    /* EVENT HANDLERS AND FUNCTIONS */\n    const updateTweet = (event) => {\n        /**\n         * Handles user input in the textarea where the user\n         * types the tweet they want to split into a thread.\n         */\n\n        const text = event.target.value;\n\n        setTweetText(text);\n\n        setCursorPosition({\n            start: event.target.selectionStart,\n            end: event.target.selectionEnd,\n        });\n    };\n    const updateCursorPosition = (event) => {\n        const start = event.target.selectionStart;\n        const end = event.target.selectionEnd;\n\n        setCursorPosition({ start, end });\n    };\n    const insertEmoji = (emoji) => {\n        const beforeEmoji = tweetText.slice(0, cursorPosition.start);\n        const afterEmoji = tweetText.slice(cursorPosition.end);\n\n        const updatedText = beforeEmoji + emoji.native + afterEmoji;\n\n        const newPos = cursorPosition.start + emoji.native.length;\n\n        setCursorPosition({ start: newPos, end: newPos });\n\n        setTweetText(updatedText);\n    };\n    const toggleEditing = () => {\n        /**\n         * Handles switching between editing the tweet and\n         * viewing the thread when the app is used on mobile\n         * phones\n         */\n\n        setEditing(!editing);\n    };\n    const loginHandler = () => {\n        showDialog(\"Please wait while we try to log you into your account\");\n\n        login()\n            .then((response) => {\n                document.location.href = response.data.redirect;\n            })\n            .catch((err) => {\n                console.log(err);\n\n                const errorMessage =\n                    typeof err === \"string\" ? err : \"Login failed\";\n\n                displayAlert(\"error\", errorMessage);\n            })\n            .finally(closeDialog);\n    };\n    const logoutHandler = () => {\n        /**\n         * Calls the logout API endpoint and resets the loggedIn\n         * and user states to their initial values.\n         */\n\n        logout()\n            .then(() => {\n                displayAlert(\"success\", \"You are now logged out\");\n\n                setLoggedIn(false);\n                setUser(untitledUser);\n            })\n            .catch((err) => {\n                console.log(err);\n\n                const errorMessage =\n                    typeof err === \"string\" ? err : \"Logout failed\";\n\n                displayAlert(\"error\", errorMessage);\n            });\n    };\n    const publishTweets = useCallback(() => {\n        /**\n         * A helper function that handles calling the function\n         * that sends the thread to the backend and clears the\n         * tweet input textarea if the thread was published\n         * successfully.\n         */\n\n        showDialog(\"Hold tight while we publish your thread\");\n\n        publishThread(thread)\n            .then(() => {\n                displayAlert(\"success\", \"Thread published successfully\");\n\n                setTweetText(\"\");\n            })\n            .catch((err) => {\n                console.log(err);\n\n                const errorMessage =\n                    typeof err === \"string\"\n                        ? err\n                        : \"Failed to publish your thread\";\n\n                displayAlert(\"error\", errorMessage);\n            })\n            .finally(closeDialog);\n    }, [thread]);\n    const postLogin = useCallback(() => {\n        /**\n         * Checks if the thread needs to be published once\n         * the login is successful. If it does, then it\n         * publishes it.\n         *\n         * This happens when the user clicks the Publish\n         * Thread button without logging in, which would\n         * start the login sequence.\n         */\n        if (getStorageItem(\"session\", \"publishAfterLogin\")) {\n            setStorageItem(\"session\", \"publishAfterLogin\", false);\n\n            publishTweets();\n        }\n    }, [publishTweets]);\n    const showDialog = (message) => {\n        /**\n         * Opens the modal dialog with the specified message.\n         */\n\n        setDialogMessage(message);\n        setDialogOpen(true);\n    };\n    const closeDialog = () => {\n        /**\n         * Closes the modal dialog.\n         */\n\n        setDialogOpen(false);\n    };\n    const publishThreadHandler = () => {\n        /**\n         * Handles the click event of the Publish Thread button.\n         * If the user is already logged in, then it just publishes\n         * the thread. Otherwise, it sets the publishAfterLogin\n         * item in the sessionStorage to true and initiates the\n         * login process.\n         *\n         * The publishAfterLogin sessionStorage item determines\n         * whether the application needs to publish a thread after\n         * the user logs in successfully.\n         */\n\n        if (loggedIn) {\n            publishTweets();\n        } else {\n            setStorageItem(\"session\", \"publishAfterLogin\", true);\n\n            loginHandler();\n        }\n    };\n    const displayAlert = (level, message) => {\n        setAlertVisibility(true);\n\n        setAlertSeverity(level);\n\n        setAlertMessage(message);\n    };\n    /* END EVENT HANDLERS AND FUNCTIONS */\n\n    /* SIDE EFFECTS */\n    // Once a login attempt is complete and the app reloads, check\n    // the session store to display the appropriate alert depending\n    // on whether the attempt was successful or not\n    useEffect(() => {\n        if (getStorageItem(\"session\", \"loginSuccessMessage\")) {\n            setStorageItem(\"session\", \"loginSuccessMessage\", false);\n\n            displayAlert(\"success\", \"You are now logged in\");\n        } else if (getStorageItem(\"session\", \"loginFailMessage\")) {\n            setStorageItem(\"session\", \"loginFailMessage\", false);\n\n            displayAlert(\"error\", \"Login failed\");\n        }\n    }, []);\n\n    // When the backend redirects to the app, set the user to logged\n    // in if the process was successful. It also sets some values in\n    // the session storage for the alerts that will need to be displayed\n    // in the UI once the login attempt is complete\n    useEffect(() => {\n        if (document.location.search !== \"\") {\n            const user = queryString.parse(document.location.search);\n\n            document.location.search = \"\";\n\n            if (checkUserObject(user)) {\n                setLoggedIn(true);\n                setUser(user);\n\n                setStorageItem(\"session\", \"loginSuccessMessage\", true);\n            } else {\n                setStorageItem(\"session\", \"loginFailMessage\", true);\n            }\n        }\n    }, [postLogin]);\n\n    // On every update, make sure that the TweetInput area has its\n    // cursor in the correct place. This is to ensure that, when the\n    // user adds an emoji in the middle of any text that already\n    // exists, the cursor doesn't jump to the end\n    useEffect(() => {\n        if (tweetInputRef.current) {\n            tweetInputRef.current.setSelectionRange(\n                cursorPosition.start,\n                cursorPosition.end\n            );\n        }\n    });\n\n    // Give focus to the tweet input area on page load and whenever\n    // the tweet input is re-rendered\n    useEffect(() => {\n        if (tweetInputRef.current) {\n            tweetInputRef.current.focus();\n        }\n    }, [tweetInputRef]);\n\n    // Update the session storage when the logged in state changes\n    useEffect(() => {\n        setStorageItem(\"session\", \"loggedIn\", loggedIn);\n    }, [loggedIn]);\n\n    // Update the session storage when the user state changes\n    useEffect(() => {\n        setStorageItem(\"session\", \"user\", user);\n    }, [user]);\n\n    // When the tweetText is updated, update the thread state\n    // and store the tweetText in the sessionStorage to ensure\n    // it persists across reloads\n    useEffect(() => {\n        if (tweetText.length === 0) {\n            setThread([]);\n        } else {\n            setThread(splitTweet(tweetText));\n        }\n\n        setStorageItem(\"session\", \"tweetText\", tweetText);\n    }, [tweetText]);\n\n    // When the thread is updated, store it in the sessionStorage\n    // to ensure it persists across reloads\n    useEffect(() => {\n        setStorageItem(\"session\", \"thread\", thread);\n    }, [thread]);\n\n    useEffect(() => {\n        if (alertVisibility) {\n            let closeAlertTimeout;\n\n            if (closeAlertTimeout) {\n                clearTimeout(closeAlertTimeout);\n            }\n\n            closeAlertTimeout = setTimeout(() => {\n                setAlertVisibility(false);\n            }, 3000);\n\n            return () => clearTimeout(closeAlertTimeout);\n        }\n    }, [alertVisibility]);\n    /* END SIDE EFFECTS */\n\n    return (\n        <ThemeProvider theme={darkTheme}>\n            <CssBaseline>\n                <CustomAlert\n                    visible={alertVisibility}\n                    severity={alertSeverity}\n                    msg={alertMessage}\n                />\n\n                <MessagesDialog open={dialogOpen} msg={dialogMessage} />\n\n                <Container className={classes.root}>\n                    <Grid\n                        container\n                        spacing={3}\n                        className={classes.gridContainer}\n                    >\n                        {/* App Header grid item */}\n                        <Grid item xs={12} className={classes.appHeader}>\n                            <Header\n                                user={user}\n                                loggedIn={loggedIn}\n                                login={loginHandler}\n                                logout={logoutHandler}\n                            />\n                        </Grid>\n\n                        {/* Grid item that holds both TweetInput and the ThreadViewer */}\n                        <Grid\n                            item\n                            xs={12}\n                            className={classNames(\n                                classes.appView,\n                                classes.hiddenOverflow\n                            )}\n                        >\n                            {/* TweetInput item which gets hidden in mobile views if not editing */}\n                            <Hidden smDown={!editing}>\n                                <Grid\n                                    item\n                                    xs={12}\n                                    md={7}\n                                    className={classNames(\n                                        classes.mainArea,\n                                        classes.hiddenOverflow\n                                    )}\n                                >\n                                    <TweetInput\n                                        tweetText={tweetText}\n                                        handleTweetInput={updateTweet}\n                                        handleCursorPositionChange={\n                                            updateCursorPosition\n                                        }\n                                        handleEmojiPicking={insertEmoji}\n                                        thread={thread}\n                                        viewThreadHandler={toggleEditing}\n                                        ref={tweetInputRef}\n                                    />\n                                </Grid>\n                            </Hidden>\n\n                            {/* ThreadViewer item which gets hidden in mobile views when editing */}\n                            <Hidden smDown={editing}>\n                                <Grid\n                                    item\n                                    xs={12}\n                                    md={5}\n                                    className={classNames(\n                                        classes.mainArea,\n                                        classes.hiddenOverflow\n                                    )}\n                                >\n                                    <ThreadViewer\n                                        user={user}\n                                        thread={thread}\n                                        editThreadHandler={toggleEditing}\n                                        publishHandler={publishThreadHandler}\n                                    />\n                                </Grid>\n                            </Hidden>\n                        </Grid>\n                    </Grid>\n                </Container>\n            </CssBaseline>\n        </ThemeProvider>\n    );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./styles/index.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}