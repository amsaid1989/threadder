{"version":3,"sources":["themes/threadder-dark-theme.js","components/StyledButton.js","components/StyledMenu.js","components/LoggedInMenu.js","components/Header.js","components/TweetInput.js","components/Tweet.js","components/ThreadViewer.js","utils/generalConstants.js","utils/fullSentenceHandler.js","controllers/tweetSplitter.js","App.js","index.js"],"names":["primaryPalette","main","light","dark","contrastText","contrastText2","backgroundPalette","paper","default","darkTheme","createMuiTheme","palette","primary","secondary","hover","inactive","inactiveText","background","spacing","shape","borderRadius","useStyles","makeStyles","theme","styledButton","color","backgroundColor","StyledButton","props","classes","allClasses","classNames","className","Button","menuList","border","StyledMenu","menuClasses","Menu","menuItem","LoggedInMenu","useState","anchorEl","setAnchorEl","closeMenu","Box","IconButton","size","onClick","event","currentTarget","Avatar","id","getContentAnchorEl","anchorReference","anchorOrigin","horizontal","vertical","transformOrigin","open","Boolean","onClose","autoFocus","MenuItem","console","log","toolbar","padding","title","flexGrow","Header","logInBtn","variant","disabled","AppBar","position","Toolbar","Typography","loggedIn","root","flexFlow","fullHeight","height","containerWithShadow","boxShadow","shadows","expandingFlexItem","flex","fixedSizeFlexItem","textareaContainer","threadTextarea","fontFamily","fontSize","resize","width","outline","statsContainer","display","justifyContent","statsText","TweetInput","Grid","container","item","xs","Container","onChange","handleTweetInput","placeholder","value","tweetText","length","thread","Hidden","mdUp","fullWidth","viewThreadHandler","marginBottom","verticalGrid","centerVerticalGridItems","alignItems","threadLineContainer","threadLine","tweetContainer","marginLeft","resetFont","defaultTextColor","userName","fontWeight","userHandle","margin","marginTop","whiteSpace","overflowWrap","hiddenOverflow","overflow","Tweet","user","name","handle","text","autoOverflow","tweetsContainer","buttonRowContainer","gap","tweets","map","tweet","index","arr","editThreadHandler","TWEET_LENGTH","trimTopAndTailSpaces","replace","splitAtFullstops","split","filter","sentence","join","combineSentencesIntoTweets","sentenceArray","outArray","i","lastSentence","curSentence","push","breakTweetAtNewlines","splitTweet","cleanedThread","trim","userDefinedSplits","flat","every","fullSentencesSplit","fullSentenceSplit","breakTextAtFullSentences","splitWords","currentTweet","splitTweets","localTweetLength","currentWord","breakVeryLongWord","lastTweetIndex","lastTweet","slice","breakLongTweet","word","tweetCount","Math","ceil","sliceStart","sliceEnd","outWord","maxHeight","gridContainer","appHeader","appView","breakpoints","up","mainArea","App","setTweetText","setThread","editing","setEditing","toggleEditing","ThemeProvider","CssBaseline","smDown","md","target","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.b9d542bd.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core/styles\";\n\n/*\n * Threadder's main theme\n */\n\nconst primaryPalette = {\n    main: \"#283845\",\n    light: \"#395164\",\n    dark: \"#22303c\",\n    contrastText: \"#ffffff\",\n    contrastText2: \"#e5e5e5\",\n};\n\nconst secondaryPalette = {\n    main: \"#ffc107\",\n    light: \"#ffd147\",\n    dark: \"#c97d02\",\n    hover: \"#ffa042\",\n    inactive: \"#432a01\",\n    contrastText: \"#14213d\",\n    inactiveText: \"#111111\",\n};\n\nconst backgroundPalette = {\n    paper: primaryPalette.light,\n    default: \"#202c39\",\n};\n\nconst darkTheme = createMuiTheme({\n    palette: {\n        primary: primaryPalette,\n        secondary: secondaryPalette,\n        background: backgroundPalette,\n    },\n    spacing: 4,\n    shape: {\n        borderRadius: 2,\n    },\n});\n\nexport default darkTheme;\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport Button from \"@material-ui/core/Button\";\n\n/*\n * A component that applies custom styling to Material UI's\n * default Button component. It passes all the props added\n * to it to the enclosed Button component.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    styledButton: {\n        \"&:disabled\": {\n            color: theme.palette.secondary.inactiveText,\n            backgroundColor: theme.palette.secondary.inactive,\n        },\n        \"&:hover\": {\n            backgroundColor: theme.palette.secondary.hover,\n        },\n    },\n}));\n\nexport default function StyledButton(props) {\n    const classes = useStyles();\n\n    /*\n     * Since the custom styling is applied by passing a class\n     * to the className prop, which only accepts one class,\n     * we use the classNames NPM package to merge the custom\n     * styling class with any classes passed by someone using\n     * the component who might want to further customise its\n     * display.\n     */\n    const allClasses = classNames(props.className, classes.styledButton);\n\n    return <Button {...props} className={allClasses} />;\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport Menu from \"@material-ui/core/Menu\";\n\n/*\n * Component that applies custom styling to Material UI's\n * Menu component. It passes all of its props to the\n * enclosed Menu component.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    menuList: {\n        border: `solid 1px ${theme.palette.primary.dark}`,\n    },\n}));\n\nexport default function StyledMenu(props) {\n    const classes = useStyles();\n\n    const menuClasses = {\n        paper: classes.menuList,\n    };\n\n    return <Menu classes={menuClasses} {...props} />;\n}\n","import { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport StyledMenu from \"./StyledMenu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\n/*\n * The styles and implementation of the menu component that\n * is rendered when the user is logged in to their Twitter\n * account.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    menuList: {\n        border: `solid 1px ${theme.palette.primary.dark}`,\n    },\n    menuItem: {\n        color: theme.palette.primary.contrastText,\n        \"&:hover\": {\n            color: theme.palette.secondary.contrastText,\n            backgroundColor: theme.palette.secondary.main,\n        },\n    },\n}));\n\nexport default function LoggedInMenu(props) {\n    const classes = useStyles();\n\n    /* COMPONENT STATE */\n    // Generate the anchor element which will be used to trigger the menu\n    const [anchorEl, setAnchorEl] = useState(null);\n    /* END COMPONENT STATE */\n\n    /* EVENT HANDLERS */\n    const handleAvatarClick = (event) => {\n        /*\n         * This is used to set the Avatar as an anchor element for the\n         * menu. In effect, it expands the menu whenever the Avatar is\n         * clicked by the user.\n         */\n\n        // Use currentTarget instead of target to ensure that it grabs\n        // the parent div rather than any of the child elements\n        setAnchorEl(event.currentTarget);\n    };\n\n    const closeMenu = () => {\n        setAnchorEl(null);\n    };\n\n    const redirectToTwitter = () => {\n        closeMenu();\n\n        // TODO: Implement\n        console.log(\"redirecting to twitter\");\n    };\n\n    const logOut = () => {\n        closeMenu();\n\n        // TODO: Implement\n        console.log(\"logging out\");\n    };\n    /* END EVENT HANDLERS */\n\n    return (\n        <Box>\n            <IconButton size=\"small\" onClick={handleAvatarClick}>\n                <Avatar />\n            </IconButton>\n\n            <StyledMenu\n                id=\"account-settings-menu\"\n                getContentAnchorEl={null}\n                anchorEl={anchorEl}\n                anchorReference=\"anchorEl\"\n                anchorOrigin={{ horizontal: \"center\", vertical: \"bottom\" }}\n                transformOrigin={{ horizontal: \"center\", vertical: \"top\" }}\n                open={Boolean(anchorEl)}\n                onClose={closeMenu}\n                autoFocus={false}\n            >\n                <MenuItem\n                    className={classes.menuItem}\n                    onClick={redirectToTwitter}\n                >\n                    Go to Twitter\n                </MenuItem>\n\n                <MenuItem className={classes.menuItem} onClick={logOut}>\n                    Log out\n                </MenuItem>\n            </StyledMenu>\n        </Box>\n    );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport StyledButton from \"./StyledButton\";\nimport LoggedInMenu from \"./LoggedInMenu\";\n\n/*\n * The styles and implementation of the app Header component.\n * It shows the app name, logo and a sign in button to allow\n * the user to log into their Twitter account.\n * When logged in, it replaces the sign in button with the\n * Twitter profile photo of the user and a menu that allows\n * them to navigate to their Twitter account directly from\n * the app or to log out.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    toolbar: {\n        padding: \"1em 1.5em\",\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nexport default function Header(props) {\n    const classes = useStyles();\n\n    const logIn = () => {\n        // TODO: Implement\n        console.log(\"logging in\");\n    };\n\n    // The sign in StyledButton component\n    const logInBtn = (\n        <StyledButton\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={logIn}\n            disabled // Disable the button until login is implemented\n        >\n            Log in\n        </StyledButton>\n    );\n\n    return (\n        <AppBar position=\"relative\">\n            <Toolbar className={classes.toolbar}>\n                <Typography variant=\"h5\" className={classes.title}>\n                    Threadder\n                </Typography>\n                {props.loggedIn ? <LoggedInMenu /> : logInBtn}\n            </Toolbar>\n        </AppBar>\n    );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport StyledButton from \"./StyledButton\";\nimport Hidden from \"@material-ui/core/Hidden\";\n\n/*\n * The styles and implementation of the tweet input component.\n * This component is where the user will input the text they\n * want to split into a thread of tweets.\n * It also shows some stats about the character count of the\n * text and how many tweets are generated from it.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexFlow: \"column nowrap\",\n    },\n    fullHeight: {\n        height: \"100%\",\n    },\n    containerWithShadow: {\n        boxShadow: theme.shadows[4],\n    },\n    expandingFlexItem: {\n        flex: 1,\n    },\n    fixedSizeFlexItem: {\n        flex: 0,\n    },\n    textareaContainer: {\n        padding: \"1.5em\",\n        backgroundColor: theme.palette.primary.main,\n    },\n    threadTextarea: {\n        fontFamily: \"inherit\",\n        fontSize: \"inherit\",\n        resize: \"none\",\n        width: \"100%\",\n        padding: \"0.5em 0.75em\",\n        color: theme.palette.primary.contrastText,\n        backgroundColor: theme.palette.primary.main,\n        border: 0,\n        boxShadow: \"inset 0px 0px 5px 0px rgba(0, 0, 0, 0.4)\",\n        \"&:focus\": {\n            border: 0,\n            outline: 0,\n        },\n    },\n    statsContainer: {\n        padding: \"1em 1.5em\",\n        display: \"flex\",\n        flexFlow: \"row nowrap\",\n        justifyContent: \"space-between\",\n        backgroundColor: theme.palette.primary.dark,\n    },\n    statsText: {\n        color: theme.palette.primary.contrastText2,\n    },\n}));\n\nexport default function TweetInput(props) {\n    const classes = useStyles();\n\n    return (\n        <Grid\n            container\n            spacing={2}\n            className={classNames(classes.root, classes.fullHeight)}\n        >\n            {/* GRID ITEM 01: Tweet Input Textarea */}\n            <Grid\n                item\n                xs={12}\n                className={classNames(\n                    classes.expandingFlexItem,\n                    classes.fullHeight\n                )}\n            >\n                <Container\n                    className={classNames(\n                        classes.textareaContainer,\n                        classes.fullHeight,\n                        classes.containerWithShadow\n                    )}\n                >\n                    <textarea\n                        className={classNames(\n                            classes.threadTextarea,\n                            classes.fullHeight\n                        )}\n                        onChange={props.handleTweetInput}\n                        placeholder=\"Type your tweet here...\"\n                        value={props.tweetText}\n                    />\n                </Container>\n            </Grid>\n\n            {/* GRID ITEM 02: Status Bar */}\n            <Grid item xs={12} className={classes.fixedSizeFlexItem}>\n                <Container\n                    className={classNames(\n                        classes.statsContainer,\n                        classes.containerWithShadow\n                    )}\n                >\n                    <Typography\n                        variant=\"body2\"\n                        className={classes.statsText}\n                    >{`Characters: ${props.tweetText.length}`}</Typography>\n                    <Typography\n                        variant=\"body2\"\n                        className={classes.statsText}\n                    >{`Tweets: ${props.thread.length}`}</Typography>\n                </Container>\n            </Grid>\n\n            {/* GRID ITEM 03: View Thread Button\n            This button is hidden in the desktop view of the app */}\n            <Hidden mdUp>\n                <Grid item xs={12} className={classes.fixedSizeFlexItem}>\n                    <StyledButton\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        fullWidth\n                        onClick={props.viewThreadHandler}\n                    >\n                        View thread\n                    </StyledButton>\n                </Grid>\n            </Hidden>\n        </Grid>\n    );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\n/*\n * The style and implementation of the Tweet component which is used\n * by the ThreadViewer to display the split tweets in a format that\n * is familiar to a Twitter user.\n * It shows a picture of the logged in user, the user's name and\n * their Twitter handle, as well as the text for each of the tweets.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        /*\n         * Styles that apply to the main container of the Tweet component.\n         * It adds a margin to the bottom of the component if there are\n         * multiple tweets displayed. If the tweet is the last one, or the\n         * only one, in the thread, then no margin is added.\n         */\n        marginBottom: \"1em\",\n        flexFlow: \"row nowrap\",\n        \"&:last-child\": {\n            marginBottom: 0,\n        },\n    },\n    expandingFlexItem: {\n        flex: 1,\n    },\n    fixedSizeFlexItem: {\n        flex: 0,\n    },\n    verticalGrid: {\n        display: \"flex\",\n        flexFlow: \"column nowrap\",\n    },\n    centerVerticalGridItems: {\n        alignItems: \"center\",\n    },\n    threadLineContainer: {\n        padding: \"0.4em\",\n    },\n    threadLine: {\n        /*\n         * A class that controls the appearance of the line that\n         * visually connects each tweet to the following one in\n         * the thread.\n         * This lines serves no functional purpose. It is just\n         * a visual cue, that is already used by Twitter, to\n         * indicate that these tweets belong together in the same\n         * thread.\n         */\n        width: \"2px\",\n\n        // Add the marginBottom value from the root to the height\n        height: \"calc(100% + 1em)\",\n\n        backgroundColor: theme.palette.background.default,\n    },\n    tweetContainer: {\n        marginLeft: \"1em\",\n    },\n    resetFont: {\n        /*\n         * A helper class to make sure that an element uses the parent's\n         * font family and font size\n         */\n        fontFamily: \"inherit\",\n        fontSize: \"inherit\",\n    },\n    defaultTextColor: {\n        color: theme.palette.primary.contrastText,\n    },\n    userName: {\n        fontWeight: \"bold\",\n    },\n    userHandle: {\n        color: theme.palette.primary.contrastText2,\n        marginLeft: \"0.5em\",\n    },\n    tweetText: {\n        padding: 0,\n        margin: 0,\n        marginTop: \"0.25em\",\n\n        /*\n         * This ensures that any line breaks or extra white spaces added\n         * by the user in the TweetInput component is not discarded when\n         * displayed in the Tweet component.\n         */\n        whiteSpace: \"pre-wrap\",\n\n        overflowWrap: \"break-word\",\n    },\n    hiddenOverflow: {\n        overflow: \"hidden\",\n    },\n}));\n\nexport default function Tweet(props) {\n    const classes = useStyles();\n\n    return (\n        <Grid container className={classes.root}>\n            <Grid\n                container\n                className={classNames(\n                    classes.fixedSizeFlexItem,\n                    classes.verticalGrid,\n                    classes.centerVerticalGridItems\n                )}\n            >\n                <Grid item>\n                    <Avatar />\n                </Grid>\n\n                {/* Render a line that connects all tweets similar to\n                 * what happens on Twitter when you write a thread.\n                 * This only render if the tweet is not the last one\n                 * which is determined based on the boolean prop\n                 * 'threadLine'.\n                 */}\n                {props.threadLine && (\n                    <Grid\n                        item\n                        className={classNames(\n                            classes.expandingFlexItem,\n                            classes.threadLineContainer\n                        )}\n                    >\n                        <div className={classes.threadLine} />\n                    </Grid>\n                )}\n            </Grid>\n\n            {/* Vertical grid that contains the user information\n             * as well as the text of the tweet.\n             */}\n            <Grid\n                container\n                className={classNames(\n                    classes.expandingFlexItem,\n                    classes.verticalGrid,\n                    classes.tweetContainer,\n                    classes.hiddenOverflow\n                )}\n            >\n                {/* Grid item that includes the user information\n                 * split over two spans, one for the name and\n                 * another for the Twitter handle.\n                 */}\n                <Grid item>\n                    <span\n                        className={classNames(\n                            classes.resetFont,\n                            classes.defaultTextColor,\n                            classes.userName\n                        )}\n                    >\n                        {props.user.name}\n                    </span>\n                    <span\n                        className={classNames(\n                            classes.resetFont,\n                            classes.userHandle\n                        )}\n                    >\n                        {`@${props.user.handle}`}\n                    </span>\n                </Grid>\n\n                {/* Grid item that includes the tweet text */}\n                <Grid item>\n                    <p\n                        className={classNames(\n                            classes.resetFont,\n                            classes.defaultTextColor,\n                            classes.tweetText\n                        )}\n                    >\n                        {props.text}\n                    </p>\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport StyledButton from \"./StyledButton\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport Tweet from \"./Tweet\";\n\n/*\n * The styles and implementation of the Thread Viewer component.\n * This component will show the tweets passed from the App\n * component using the Tweet component.\n * It also has the Publish Thread button which activates when\n * there are at least 1 tweet added.\n */\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexFlow: \"column nowrap\",\n    },\n    fullHeight: {\n        height: \"100%\",\n    },\n    containerWithShadow: {\n        boxShadow: theme.shadows[4],\n    },\n    expandingFlexItem: {\n        flex: 1,\n    },\n    fixedSizeFlexItem: {\n        flex: 0,\n    },\n    autoOverflow: {\n        overflow: \"auto\",\n    },\n    hiddenOverflow: {\n        overflow: \"hidden\",\n    },\n    tweetsContainer: {\n        padding: \"1.5em\",\n        backgroundColor: theme.palette.primary.main,\n    },\n    buttonRowContainer: {\n        display: \"flex\",\n        flexFlow: \"row nowrap\",\n        justifyContent: \"space-between\",\n        gap: \"1em\",\n        margin: 0,\n        padding: 0,\n    },\n}));\n\nexport default function TweetInput(props) {\n    const classes = useStyles();\n\n    const tweets = props.thread.map((tweet, index, arr) => (\n        <Tweet\n            key={tweet}\n            user={props.user}\n            text={tweet}\n            threadLine={index + 1 < arr.length}\n        />\n    ));\n\n    return (\n        <Grid\n            container\n            spacing={2}\n            className={classNames(\n                classes.root,\n                classes.fullHeight,\n                classes.hiddenOverflow\n            )}\n        >\n            {/* GRID ITEM 01: Thread List */}\n            <Grid\n                item\n                xs={12}\n                className={classNames(\n                    classes.expandingFlexItem,\n                    classes.fullHeight,\n                    classes.hiddenOverflow\n                )}\n            >\n                <Container\n                    className={classNames(\n                        classes.tweetsContainer,\n                        classes.fullHeight,\n                        classes.containerWithShadow,\n                        classes.autoOverflow\n                    )}\n                >\n                    {tweets}\n                </Container>\n            </Grid>\n\n            {/* GRID ITEM 02: Button Bar\n            The Edit Thread button will be hidden in the desktop view of the app */}\n            <Grid item xs={12} className={classes.fixedSizeFlexItem}>\n                <Container\n                    className={classNames(\n                        classes.buttonRowContainer,\n                        classes.fullHeight\n                    )}\n                >\n                    <Hidden mdUp>\n                        <StyledButton\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            fullWidth\n                            onClick={props.editThreadHandler}\n                        >\n                            Edit thread\n                        </StyledButton>\n                    </Hidden>\n\n                    <StyledButton\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        disabled={!tweets.length > 0}\n                        fullWidth\n                    >\n                        Publish thread\n                    </StyledButton>\n                </Container>\n            </Grid>\n        </Grid>\n    );\n}\n","export const TWEET_LENGTH = 280;\n","import { TWEET_LENGTH } from \"./generalConstants\";\n\nexport default function breakTextAtFullSentences(text) {\n    /*\n     * The main function of the module which will be used by\n     * the tweet splitter module.\n     */\n    const fullSentenceSplit = combineSentencesIntoTweets(splitAtFullstops(text))\n        .flat()\n        .map((tweet) => tweet.trim());\n\n    // Return early if all tweets are shorter than the maximum\n    // character count allowed for tweets\n    if (fullSentenceSplit.every((tweet) => tweet.length <= TWEET_LENGTH)) {\n        return fullSentenceSplit;\n    }\n\n    // If there are tweets that are still longer than the maxmium\n    // allowed character count, attempt to split these tweets\n    // at newline characters, since a newline character is\n    // usually an indication of a new sentence\n    const newlineSplit = fullSentenceSplit\n        .map((tweet) => {\n            if (tweet.length <= TWEET_LENGTH) {\n                return tweet;\n            }\n\n            return breakTweetAtNewlines(tweet);\n        })\n        .flat()\n        .map((tweet) => tweet.trim());\n\n    return newlineSplit;\n}\n\nfunction trimTopAndTailSpaces(text) {\n    /*\n     * Removes any spaces or tab characters from the start and end of\n     * a string. It is similar to the built-in trim() String method,\n     * but it doesn't remove newline characters like the trim() method\n     * does.\n     */\n\n    const startPattern = /^[ \\t]*/;\n    const endPattern = /[ \\t]*$/;\n\n    return text.replace(startPattern, \"\").replace(endPattern, \"\");\n}\n\nfunction splitAtFullstops(text) {\n    /*\n     * Takes a string that has multiple sentences ending in full stops\n     * and splits it into an array of single sentences that each contain\n     * the full stop at the end.\n     *\n     * It works by checking for any full stops that are followed by\n     * a letter or a newline character because that would mean they are\n     * at the middle of the string. It then splits the string at these\n     * full stops, which removes them from the sentences, then rejoins\n     * the whole string with a full stop followed by a space.\n     *\n     * Next, it splits the string again at any space character that is\n     * preceded by a full stop. The result of this is that each sentence\n     * would end up keeping its full stop.\n     */\n\n    const removeFullstopPattern = /\\.(?=\\s?[\\w\\n]+)/g;\n    const removeSpacePattern = /(?<=\\.)\\s/g;\n\n    return text\n        .split(removeFullstopPattern)\n        .filter((sentence) => sentence !== \"\")\n        .join(\". \")\n        .split(removeSpacePattern)\n        .map((sentence) => trimTopAndTailSpaces(sentence));\n}\n\nfunction combineSentencesIntoTweets(sentenceArray) {\n    /*\n     * Takes an array of sentences and iterates over it combining\n     * the sentences into tweets that aren't longer than 280\n     * characters. However, if one of the sentences is shorter than\n     * 70 (1/4th of 280), it will add the following sentence to it\n     * even if the combined length is longer than 280. This is to\n     * avoid having very short tweets unnecessarily. If the user\n     * wants to have short tweets, they can force a split.\n     *\n     * Any tweets longer than 280 will be handled by further functions\n     * that will eventually split them to fit the maximum character\n     * count on Twitter.\n     */\n\n    // Return early if sentenceArray is empty\n    if (sentenceArray.length === 0) {\n        return [];\n    }\n\n    let outArray = [];\n\n    for (let i = 0; i < sentenceArray.length; i++) {\n        // Just add the first sentence to the output array\n        if (i === 0) {\n            outArray.push(sentenceArray[i]);\n\n            continue;\n        }\n\n        // Get the last sentence that was added to the output array\n        let lastSentence = outArray[outArray.length - 1];\n\n        const curSentence = sentenceArray[i];\n\n        if (\n            lastSentence.length <= TWEET_LENGTH / 4 ||\n            lastSentence.length + curSentence.length <= TWEET_LENGTH\n        ) {\n            lastSentence += ` ${curSentence}`;\n\n            outArray[outArray.length - 1] = lastSentence;\n        } else {\n            outArray.push(sentenceArray[i]);\n        }\n    }\n\n    return outArray;\n}\n\nfunction breakTweetAtNewlines(tweet) {\n    /*\n     * Takes a text and splits it into an array of tweets at the\n     * newline characters\n     */\n\n    return tweet.split(\"\\n\").filter((tweet) => tweet !== \"\");\n}\n\n// Module functions exported mainly for testing purposes\nexport const fsHandler = {\n    trimTopAndTailSpaces,\n    splitAtFullstops,\n    combineSentencesIntoTweets,\n    breakTweetAtNewlines,\n};\n","import { TWEET_LENGTH } from \"../utils/generalConstants\";\nimport breakTextAtFullSentences from \"../utils/fullSentenceHandler\";\n\nexport default function splitTweet(thread) {\n    const cleanedThread = thread.trim();\n\n    if (cleanedThread.length <= TWEET_LENGTH) {\n        return [cleanedThread];\n    }\n\n    // First, take care of user-defined splits\n    const userDefinedSplits = cleanedThread\n        .split(\"(---)\")\n        .flat()\n        .map((tweet) => tweet.trim());\n\n    // Return early if all tweets are shorter than the maximum allowed\n    // tweet length\n    if (userDefinedSplits.every((tweet) => tweet.length <= TWEET_LENGTH)) {\n        // Make sure all tweets don't have any extra spaces at the start\n        // or at the end\n        return userDefinedSplits;\n    }\n\n    // Second, split the tweet at full sentences that fit within a tweet\n    const fullSentencesSplit = userDefinedSplits\n        .map((tweet) => {\n            if (tweet.length <= TWEET_LENGTH) {\n                return tweet;\n            }\n\n            return breakTextAtFullSentences(tweet);\n        })\n        .flat()\n        .map((tweet) => tweet.trim());\n\n    // Return early if all tweets are shorter than the maximum allowed\n    // tweet length\n    if (fullSentencesSplit.every((tweet) => tweet.length <= TWEET_LENGTH)) {\n        return fullSentencesSplit;\n    }\n\n    // Last, split any tweets that are still longer than the maximum\n    // allowed tweet length\n    const output = fullSentencesSplit\n        .map((tweet) => {\n            if (tweet.length <= TWEET_LENGTH) {\n                return tweet;\n            }\n\n            return breakLongTweet(tweet);\n        })\n        .flat()\n        .map((tweet) => tweet.trim());\n\n    return output;\n}\n\nfunction breakVeryLongWord(word) {\n    /*\n     * Function that takes any word longer than the maximum character\n     * count allowed for Twitter and splits it into several tweets.\n     * This allows the app to handle user input if the user decides to\n     * type long strings with no spaces in between.\n     */\n\n    // Define a tweet length that is 3 characters shorter than the maximum\n    // length allowed by Twitter because the function will add ellipsis (...)\n    // to the end of the tweet to indicate that this tweet is breaking a word\n    // in the middle\n    const localTweetLength = TWEET_LENGTH - 3;\n\n    // Get how many tweets are needed to include the entire word\n    const tweetCount = Math.ceil(word.length / localTweetLength);\n\n    let splitTweets = [];\n\n    for (let i = 0; i < tweetCount; i++) {\n        const sliceStart = i * localTweetLength;\n        const sliceEnd = (i + 1) * localTweetLength;\n\n        let outWord = word.slice(sliceStart, sliceEnd);\n\n        // If the sliced word is not at the end of the input word,\n        // add ellipsis (...)\n        if (i + 1 !== tweetCount) {\n            outWord += \"...\";\n        }\n\n        splitTweets.push(outWord);\n    }\n\n    return splitTweets;\n}\n\nfunction breakLongTweet(tweet) {\n    /*\n     * A function that takes a tweet that is longer than the maximum character\n     * count allowed by Twitter and breaks it into an array of tweets that are\n     * all less than or equal to the maximum character count.\n     */\n\n    // Split the tweet into separate words\n    const splitWords = tweet.split(\" \");\n\n    // A variable that will be used to build a tweet of a length less than or\n    // equal to the maximum character count allowed by Twitter. This tweet will\n    // then be pushed to the output array of the split tweets, and the variable\n    // will be cleared for the next tweet\n    let currentTweet = \"\";\n\n    // The output array\n    let splitTweets = [];\n\n    const localTweetLength = TWEET_LENGTH - 3;\n\n    for (const word of splitWords) {\n        // Ensure that the word is clear of any extra spaces\n        const currentWord = word.trim();\n\n        if (currentWord.length === 0) {\n            continue;\n        } else if (currentWord.length > TWEET_LENGTH) {\n            if (currentTweet.length > 0) {\n                // If we encounter a word that needs to be broken into separate\n                // tweets, then we push any text in the currentTweet variable to\n                // the output array and clear the variable\n                splitTweets.push(currentTweet);\n                currentTweet = \"\";\n            }\n\n            splitTweets = [...splitTweets, ...breakVeryLongWord(currentWord)];\n\n            continue;\n        }\n\n        if (currentTweet.length === 0) {\n            // When there is no text in the currentTweet variable, don't add\n            // a space before adding the currentWord\n            currentTweet += currentWord;\n        } else if (\n            currentTweet.length + currentWord.length + 1 <\n            localTweetLength\n        ) {\n            currentTweet += ` ${currentWord}`;\n        } else {\n            splitTweets.push(`${currentTweet}...`);\n\n            currentTweet = currentWord;\n        }\n    }\n\n    // If there is any text left over in the currentTweet that hasn't been\n    // pushed yet to the output array, push it\n    if (currentTweet.length > 0) {\n        splitTweets.push(`${currentTweet}...`);\n    }\n\n    const lastTweetIndex = splitTweets.length - 1;\n    const lastTweet = splitTweets[lastTweetIndex];\n    const lastThreeCharacters = lastTweet.slice(lastTweet.length - 3);\n\n    if (lastThreeCharacters === \"...\") {\n        splitTweets[lastTweetIndex] = lastTweet.slice(0, lastTweet.length - 3);\n    }\n\n    return splitTweets;\n}\n","import { useState } from \"react\";\nimport { makeStyles, ThemeProvider } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport darkTheme from \"./themes/threadder-dark-theme\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport Header from \"./components/Header\";\nimport TweetInput from \"./components/TweetInput\";\nimport ThreadViewer from \"./components/ThreadViewer\";\nimport splitTweet from \"./controllers/tweetSplitter\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        /*\n         * Styles that apply to the main Container component of the App\n         */\n        height: \"100vh\",\n        maxHeight: \"100vh\",\n    },\n    gridContainer: {\n        /*\n         * A class for the main grid layout of the App. It organises all\n         * the main elements of the App in a column layout.\n         */\n        flexFlow: \"column nowrap\",\n        height: \"100%\",\n    },\n    appHeader: {\n        flex: 0,\n    },\n    appView: {\n        flex: 1,\n        [theme.breakpoints.up(\"md\")]: {\n            display: \"flex\",\n            flexFlow: \"row nowrap\",\n            gap: theme.spacing(1.5),\n        },\n    },\n    mainArea: {\n        height: \"100%\",\n    },\n    hiddenOverflow: {\n        overflow: \"hidden\",\n    },\n}));\n\nexport default function App(props) {\n    const classes = useStyles();\n\n    /* APP STATE */\n    const [loggedIn, setLoggedIn] = useState(false);\n    const [user, setUser] = useState({\n        name: \"Untitled User\",\n        handle: \"untitled_user\",\n    });\n    const [tweetText, setTweetText] = useState(\"\");\n    const [thread, setThread] = useState([]);\n    const [editing, setEditing] = useState(true);\n    /* END APP STATE */\n\n    /* EVENT HANDLERS */\n    const updateTweet = (event) => {\n        /*\n         * Handles user input in the textarea where the user\n         * types the tweet they want to split into a thread.\n         */\n\n        const text = event.target.value;\n\n        setTweetText(text);\n\n        if (text.length === 0) {\n            setThread([]);\n        } else {\n            setThread(splitTweet(event.target.value));\n        }\n    };\n    const toggleEditing = () => {\n        /*\n         * Handles switching between editing the tweet and\n         * viewing the thread when the app is used on mobile\n         * phones\n         */\n\n        setEditing(!editing);\n    };\n    /* END EVENT HANDLERS */\n\n    return (\n        <ThemeProvider theme={darkTheme}>\n            <CssBaseline>\n                <Container className={classes.root}>\n                    <Grid\n                        container\n                        spacing={3}\n                        className={classes.gridContainer}\n                    >\n                        <Grid item xs={12} className={classes.appHeader}>\n                            <Header loggedIn={loggedIn} />\n                        </Grid>\n\n                        <Grid\n                            item\n                            xs={12}\n                            className={classNames(\n                                classes.appView,\n                                classes.hiddenOverflow\n                            )}\n                        >\n                            <Hidden smDown={!editing}>\n                                <Grid\n                                    item\n                                    xs={12}\n                                    md={7}\n                                    className={classNames(\n                                        classes.mainArea,\n                                        classes.hiddenOverflow\n                                    )}\n                                >\n                                    <TweetInput\n                                        tweetText={tweetText}\n                                        handleTweetInput={updateTweet}\n                                        thread={thread}\n                                        viewThreadHandler={toggleEditing}\n                                    />\n                                </Grid>\n                            </Hidden>\n\n                            <Hidden smDown={editing}>\n                                <Grid\n                                    item\n                                    xs={12}\n                                    md={5}\n                                    className={classNames(\n                                        classes.mainArea,\n                                        classes.hiddenOverflow\n                                    )}\n                                >\n                                    <ThreadViewer\n                                        user={user}\n                                        thread={thread}\n                                        editThreadHandler={toggleEditing}\n                                    />\n                                </Grid>\n                            </Hidden>\n                        </Grid>\n                    </Grid>\n                </Container>\n            </CssBaseline>\n        </ThemeProvider>\n    );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./styles/index.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}